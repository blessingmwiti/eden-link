{"ast":null,"code":"import { interval, Subject, combineLatest } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/sensor.service\";\nimport * as i2 from \"../../core/services/ai.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../../shared/components/chart/chart.component\";\nimport * as i5 from \"../../shared/components/metric-card/metric-card.component\";\nfunction DashboardComponent_app_chart_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-chart\", 24);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"chartData\", ctx_r0.chartData)(\"chartOptions\", ctx_r0.chartOptions);\n  }\n}\nconst _c0 = (a0, a1) => ({\n  \"active\": a0,\n  \"completed\": a1\n});\nfunction DashboardComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25)(1, \"div\", 26);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 27);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const stage_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(3, _c0, stage_r2.active, stage_r2.completed));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", stage_r2.completed ? \"\\u2713\" : i_r3 + 1, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(stage_r2.name);\n  }\n}\nexport class DashboardComponent {\n  constructor(sensorService, aiService) {\n    this.sensorService = sensorService;\n    this.aiService = aiService;\n    this.destroy$ = new Subject();\n    this.updateInterval$ = interval(5000);\n    this.currentMetrics = {\n      temperature: 24,\n      humidity: 65,\n      light: 650,\n      ec: 1.8,\n      ph: 6.2\n    };\n    this.systemHealth = {\n      status: 'excellent',\n      message: 'All systems functioning optimally. Consider adjusting CO₂ levels slightly for optimal tomato growth.'\n    };\n    this.chartData = null;\n    this.roadmapStages = [{\n      name: 'Germination',\n      completed: true,\n      active: false\n    }, {\n      name: 'Seedling',\n      completed: true,\n      active: false\n    }, {\n      name: 'Vegetation',\n      completed: false,\n      active: true\n    }, {\n      name: 'Flowering',\n      completed: false,\n      active: false\n    }, {\n      name: 'Fruiting',\n      completed: false,\n      active: false\n    }, {\n      name: 'Harvest',\n      completed: false,\n      active: false\n    }];\n  }\n  ngOnInit() {\n    this.loadInitialData();\n    this.setupRealTimeUpdates();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  loadInitialData() {\n    this.loadCurrentMetrics();\n    this.loadChartData();\n  }\n  setupRealTimeUpdates() {\n    this.updateInterval$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this.loadCurrentMetrics();\n      this.loadChartData();\n    });\n  }\n  loadCurrentMetrics() {\n    combineLatest([this.sensorService.getTemperatureSensors(), this.sensorService.getHumiditySensors(), this.sensorService.getLightSensors(), this.sensorService.getECSensors(), this.sensorService.getPHSensors()]).pipe(takeUntil(this.destroy$), map(([temp, humidity, light, ec, ph]) => ({\n      temperature: Number(temp[0]?.value ?? 24),\n      humidity: Number(humidity[0]?.value ?? 65),\n      light: Number(light[0]?.value ?? 650),\n      ec: Number(ec[0]?.value ?? 1.8),\n      ph: Number(ph[0]?.value ?? 6.2)\n    }))).subscribe({\n      next: metrics => {\n        this.currentMetrics = metrics;\n      },\n      error: error => {\n        console.error('Error loading current metrics:', error);\n        // Keep using last known values\n      }\n    });\n  }\n  loadChartData() {\n    // Get history for all sensor types\n    const sensorIds = ['temp-1', 'humidity-1', 'light-1', 'ec-1', 'ph-1'];\n    const histories$ = sensorIds.map(id => this.sensorService.getSensorHistory(id, 1));\n    combineLatest(histories$).pipe(takeUntil(this.destroy$), map(histories => this.processHistoriesIntoChartData(histories))).subscribe({\n      next: chartData => {\n        this.chartData = chartData;\n      },\n      error: error => {\n        console.error('Error loading chart data:', error);\n        this.loadMockChartData();\n      }\n    });\n  }\n  processHistoriesIntoChartData(histories) {\n    // Process the raw histories into chart data format\n    const timestamps = histories[0]?.map(h => new Date(h.timestamp).toLocaleTimeString()) ?? [];\n    const datasets = [{\n      label: 'Temperature (°C)',\n      data: histories[0]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#006d5b',\n      backgroundColor: 'rgba(0, 109, 91, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'Humidity (%)',\n      data: histories[1]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#8d90bb',\n      backgroundColor: 'rgba(141, 144, 187, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'Light (lux/100)',\n      data: histories[2]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#ffc107',\n      backgroundColor: 'rgba(255, 193, 7, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'EC (mS/cm)',\n      data: histories[3]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#dc3545',\n      backgroundColor: 'rgba(220, 53, 69, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'pH',\n      data: histories[4]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#6610f2',\n      backgroundColor: 'rgba(102, 16, 242, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }];\n    return {\n      timestamps,\n      datasets\n    };\n  }\n  loadMockChartData() {\n    const now = new Date();\n    const labels = Array.from({\n      length: 12\n    }, (_, i) => {\n      const d = new Date(now.getTime() - (11 - i) * 5000);\n      return d.toLocaleTimeString('en-US', {\n        hour12: false\n      });\n    });\n    this.chartData = {\n      timestamps: labels,\n      datasets: [{\n        label: 'Temperature (°C)',\n        data: Array.from({\n          length: 12\n        }, () => 22 + Math.random() * 4),\n        borderColor: '#006d5b',\n        backgroundColor: 'rgba(0, 109, 91, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'Humidity (%)',\n        data: Array.from({\n          length: 12\n        }, () => 60 + Math.random() * 12),\n        borderColor: '#8d90bb',\n        backgroundColor: 'rgba(141, 144, 187, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'Light (lux/100)',\n        data: Array.from({\n          length: 12\n        }, () => Math.max(0, 5 + Math.random() * 3)),\n        borderColor: '#ffc107',\n        backgroundColor: 'rgba(255, 193, 7, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'EC (mS/cm)',\n        data: Array.from({\n          length: 12\n        }, () => 1.5 + Math.random() * 0.6),\n        borderColor: '#dc3545',\n        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'pH',\n        data: Array.from({\n          length: 12\n        }, () => 5.8 + Math.random() * 0.8),\n        borderColor: '#6610f2',\n        backgroundColor: 'rgba(102, 16, 242, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }]\n    };\n  }\n  startIrrigation() {\n    this.sensorService.startIrrigation().subscribe(() => {\n      console.log('Irrigation started');\n    }, error => {\n      console.error('Error starting irrigation:', error);\n    });\n  }\n  exportData() {\n    this.sensorService.exportData().subscribe(data => {\n      const blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: 'application/json'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'sensor-data.json';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }, error => {\n      console.error('Error exporting data:', error);\n    });\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.SensorService), i0.ɵɵdirectiveInject(i2.AiService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 36,\n      vars: 27,\n      consts: [[1, \"dashboard-container\"], [1, \"dashboard-header\"], [1, \"dashboard-title\"], [1, \"dashboard-actions\"], [1, \"btn\", \"btn-outline\", 3, \"click\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"metrics-grid\"], [\"name\", \"Temperature\", \"icon\", \"\\uD83C\\uDF21\\uFE0F\", \"unit\", \"\\u00B0C\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"Humidity\", \"icon\", \"\\uD83D\\uDCA7\", \"unit\", \"%\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"Light\", \"icon\", \"\\u2600\\uFE0F\", \"unit\", \" lux\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"EC\", \"icon\", \"\\u26A1\", \"unit\", \" mS/cm\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"pH\", \"icon\", \"\\uD83E\\uDDEA\", \"unit\", \"\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [1, \"chart-container\"], [3, \"chartData\", \"chartOptions\", 4, \"ngIf\"], [1, \"system-health\", 3, \"ngClass\"], [1, \"system-health-icon\"], [1, \"system-health-content\"], [1, \"system-health-title\"], [1, \"system-health-message\"], [1, \"crop-roadmap\"], [\"class\", \"roadmap-step\", 4, \"ngFor\", \"ngForOf\"], [3, \"chartData\", \"chartOptions\"], [1, \"roadmap-step\"], [1, \"step-icon\", 3, \"ngClass\"], [1, \"step-label\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n          i0.ɵɵtext(3, \"Dashboard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_5_listener() {\n            return ctx.exportData();\n          });\n          i0.ɵɵtext(6, \"Export Data\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_7_listener() {\n            return ctx.startIrrigation();\n          });\n          i0.ɵɵtext(8, \"Start Irrigation\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 7)(11, \"h2\", 8);\n          i0.ɵɵtext(12, \"Real-Time Charts\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 9);\n          i0.ɵɵelement(14, \"app-metric-card\", 10)(15, \"app-metric-card\", 11)(16, \"app-metric-card\", 12)(17, \"app-metric-card\", 13)(18, \"app-metric-card\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"div\", 15);\n          i0.ɵɵtemplate(20, DashboardComponent_app_chart_20_Template, 1, 2, \"app-chart\", 16);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"div\", 17)(22, \"div\", 18);\n          i0.ɵɵtext(23, \"\\u2713\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"div\", 19)(25, \"div\", 20);\n          i0.ɵɵtext(26);\n          i0.ɵɵpipe(27, \"titlecase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"div\", 21);\n          i0.ɵɵtext(29);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(30, \"div\", 6)(31, \"div\", 7)(32, \"h2\", 8);\n          i0.ɵɵtext(33, \"Crop Cycle Roadmap\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(34, \"div\", 22);\n          i0.ɵɵtemplate(35, DashboardComponent_div_35_Template, 5, 6, \"div\", 23);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(14);\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.temperature)(\"minOptimal\", 22)(\"maxOptimal\", 26)(\"maxRange\", 35);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.humidity)(\"minOptimal\", 60)(\"maxOptimal\", 70)(\"maxRange\", 100);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.light)(\"minOptimal\", 500)(\"maxOptimal\", 800)(\"maxRange\", 1000);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.ec)(\"minOptimal\", 1.5)(\"maxOptimal\", 2.1)(\"maxRange\", 3);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.ph)(\"minOptimal\", 5.8)(\"maxOptimal\", 6.6)(\"maxRange\", 14);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.chartData);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", \"system-health-\" + ctx.systemHealth.status);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"System Health: \", i0.ɵɵpipeBind1(27, 25, ctx.systemHealth.status), \"\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(ctx.systemHealth.message);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.roadmapStages);\n        }\n      },\n      dependencies: [i3.NgClass, i3.NgForOf, i3.NgIf, i4.ChartComponent, i5.MetricCardComponent, i3.TitleCasePipe],\n      styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n    padding: 20px;\\n  }\\n  \\n  .dashboard-header[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    margin-bottom: 24px;\\n  }\\n  \\n  .dashboard-title[_ngcontent-%COMP%] {\\n    margin: 0;\\n    font-size: 24px;\\n    color: #212529;\\n  }\\n  \\n  .dashboard-actions[_ngcontent-%COMP%] {\\n    display: flex;\\n    gap: 12px;\\n  }\\n  \\n  .btn[_ngcontent-%COMP%] {\\n    padding: 8px 16px;\\n    border-radius: 6px;\\n    border: none;\\n    font-size: 14px;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s;\\n  }\\n  \\n  .btn-primary[_ngcontent-%COMP%] {\\n    background-color: #008e73;\\n    color: #ffffff;\\n  }\\n  \\n  .btn-primary[_ngcontent-%COMP%]:hover {\\n    background-color: #00594d;\\n  }\\n  \\n  .btn-outline[_ngcontent-%COMP%] {\\n    background-color: transparent;\\n    border: 1px solid #006d5b;\\n    color: #006d5b;\\n  }\\n  \\n  .btn-outline[_ngcontent-%COMP%]:hover {\\n    background-color: #006d5b;\\n    color: #ffffff;\\n  }\\n  \\n  .card[_ngcontent-%COMP%] {\\n    background: white;\\n    border-radius: 12px;\\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\\n    margin-bottom: 24px;\\n    overflow: hidden;\\n  }\\n  \\n  .card-header[_ngcontent-%COMP%] {\\n    padding: 16px 20px;\\n    border-bottom: 1px solid #e9ecef;\\n  }\\n  \\n  .card-title[_ngcontent-%COMP%] {\\n    margin: 0;\\n    font-size: 18px;\\n    color: #343a40;\\n  }\\n  \\n  .sensors-grid[_ngcontent-%COMP%] {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\\n    gap: 15px;\\n  }\\n  \\n  .metrics-grid[_ngcontent-%COMP%] {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\\n    gap: 16px;\\n    padding: 20px;\\n    background: #f8f9fa;\\n    border-bottom: 1px solid #e9ecef;\\n  }\\n  \\n  .chart-container[_ngcontent-%COMP%] {\\n    padding: 20px;\\n    height: 400px;\\n  }\\n  \\n  .system-health[_ngcontent-%COMP%] {\\n    display: flex;\\n    align-items: center;\\n    gap: 16px;\\n    padding: 16px 20px;\\n    background: #f8f9fa;\\n    border-top: 1px solid #e9ecef;\\n  }\\n  \\n  .system-health-warning[_ngcontent-%COMP%] {\\n    background-color: rgba(255, 193, 7, 0.1);\\n    border-left-color: #ffc107;\\n  }\\n  \\n  .system-health-danger[_ngcontent-%COMP%] {\\n    background-color: rgba(220, 53, 69, 0.1);\\n    border-left-color: #dc3545;\\n  }\\n  \\n  .system-health-icon[_ngcontent-%COMP%] {\\n    width: 32px;\\n    height: 32px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    background: #28a745;\\n    color: white;\\n    border-radius: 50%;\\n    font-size: 18px;\\n  }\\n  \\n  .system-health-warning[_ngcontent-%COMP%]   .system-health-icon[_ngcontent-%COMP%] {\\n    background-color: #ffc107;\\n    color: #212529;\\n  }\\n  \\n  .system-health-danger[_ngcontent-%COMP%]   .system-health-icon[_ngcontent-%COMP%] {\\n    background-color: #dc3545;\\n  }\\n  \\n  .system-health-content[_ngcontent-%COMP%] {\\n    flex: 1;\\n  }\\n  \\n  .system-health-title[_ngcontent-%COMP%] {\\n    font-weight: 500;\\n    color: #212529;\\n    margin-bottom: 4px;\\n  }\\n  \\n  .system-health-message[_ngcontent-%COMP%] {\\n    color: #6c757d;\\n    font-size: 14px;\\n  }\\n  \\n  .crop-roadmap[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: space-between;\\n    padding: 20px;\\n    overflow-x: auto;\\n  }\\n  \\n  .roadmap-step[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    gap: 8px;\\n    min-width: 100px;\\n  }\\n  \\n  .roadmap-step[_ngcontent-%COMP%]::before {\\n    content: \\\"\\\";\\n    height: 3px;\\n    width: 100%;\\n    background-color: #dee2e6;\\n    position: absolute;\\n    top: 15px;\\n    left: 50%;\\n    z-index: 0;\\n  }\\n  \\n  .roadmap-step[_ngcontent-%COMP%]:first-child::before {\\n    width: 50%;\\n    left: 50%;\\n  }\\n  \\n  .roadmap-step[_ngcontent-%COMP%]:last-child::before {\\n    width: 50%;\\n    left: 0;\\n  }\\n  \\n  .step-icon[_ngcontent-%COMP%] {\\n    width: 32px;\\n    height: 32px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    background: #e9ecef;\\n    border-radius: 50%;\\n    color: #6c757d;\\n  }\\n  \\n  .step-icon.active[_ngcontent-%COMP%] {\\n    background: #007bff;\\n    color: white;\\n  }\\n  \\n  .step-icon.completed[_ngcontent-%COMP%] {\\n    background: #28a745;\\n    color: white;\\n  }\\n  \\n  .step-label[_ngcontent-%COMP%] {\\n    font-size: 14px;\\n    color: #495057;\\n    text-align: center;\\n  }\\n  \\n  @media (max-width: 768px) {\\n    .sensors-grid[_ngcontent-%COMP%] {\\n      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\\n    }\\n    \\n    .crop-roadmap[_ngcontent-%COMP%] {\\n      flex-wrap: wrap;\\n    }\\n    \\n    .roadmap-step[_ngcontent-%COMP%] {\\n      flex: 0 0 33.333%;\\n      margin-bottom: 20px;\\n    }\\n    \\n    .roadmap-step[_ngcontent-%COMP%]::before {\\n      display: none;\\n    }\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n    });\n  }\n}","map":{"version":3,"names":["interval","Subject","combineLatest","takeUntil","map","i0","ɵɵelement","ɵɵproperty","ctx_r0","chartData","chartOptions","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵpureFunction2","_c0","stage_r2","active","completed","ɵɵtextInterpolate1","i_r3","ɵɵtextInterpolate","name","DashboardComponent","constructor","sensorService","aiService","destroy$","updateInterval$","currentMetrics","temperature","humidity","light","ec","ph","systemHealth","status","message","roadmapStages","ngOnInit","loadInitialData","setupRealTimeUpdates","ngOnDestroy","next","complete","loadCurrentMetrics","loadChartData","pipe","subscribe","getTemperatureSensors","getHumiditySensors","getLightSensors","getECSensors","getPHSensors","temp","Number","value","metrics","error","console","sensorIds","histories$","id","getSensorHistory","histories","processHistoriesIntoChartData","loadMockChartData","timestamps","h","Date","timestamp","toLocaleTimeString","datasets","label","data","borderColor","backgroundColor","tension","fill","borderWidth","now","labels","Array","from","length","_","i","d","getTime","hour12","Math","random","max","startIrrigation","log","exportData","blob","Blob","JSON","stringify","type","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","ɵɵdirectiveInject","i1","SensorService","i2","AiService","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","ɵɵlistener","DashboardComponent_Template_button_click_5_listener","DashboardComponent_Template_button_click_7_listener","ɵɵtemplate","DashboardComponent_app_chart_20_Template","DashboardComponent_div_35_Template","ɵɵpipeBind1"],"sources":["/home/injinia/eden-link/src/app/features/dashboard/dashboard.component.ts","/home/injinia/eden-link/src/app/features/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { SensorService } from '../../core/services/sensor.service';\nimport { AiService } from '../../core/services/ai.service';\nimport { interval, Subject, combineLatest } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\nimport { Sensor } from '../../core/models/sensor.model';\n\ninterface CurrentMetrics {\n  temperature: number;\n  humidity: number;\n  light: number;\n  ec: number;\n  ph: number;\n}\n\ninterface ChartData {\n  timestamps: string[];\n  datasets: Array<{\n    label: string;\n    data: number[];\n    borderColor: string;\n    backgroundColor: string;\n    tension: number;\n    fill: boolean;\n    borderWidth: number;\n  }>;\n}\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private updateInterval$ = interval(5000);\n\n  currentMetrics: CurrentMetrics = {\n    temperature: 24,\n    humidity: 65,\n    light: 650,\n    ec: 1.8,\n    ph: 6.2\n  };\n\n  systemHealth = {\n    status: 'excellent',\n    message: 'All systems functioning optimally. Consider adjusting CO₂ levels slightly for optimal tomato growth.'\n  };\n\n  chartData: ChartData | null = null;\n  chartOptions: any;\n\n  roadmapStages = [\n    { name: 'Germination', completed: true, active: false },\n    { name: 'Seedling', completed: true, active: false },\n    { name: 'Vegetation', completed: false, active: true },\n    { name: 'Flowering', completed: false, active: false },\n    { name: 'Fruiting', completed: false, active: false },\n    { name: 'Harvest', completed: false, active: false }\n  ];\n\n  constructor(\n    private sensorService: SensorService,\n    private aiService: AiService\n  ) {}\n\n  ngOnInit(): void {\n    this.loadInitialData();\n    this.setupRealTimeUpdates();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private loadInitialData(): void {\n    this.loadCurrentMetrics();\n    this.loadChartData();\n  }\n\n  private setupRealTimeUpdates(): void {\n    this.updateInterval$.pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(() => {\n      this.loadCurrentMetrics();\n      this.loadChartData();\n    });\n  }\n\n  private loadCurrentMetrics(): void {\n    combineLatest([\n      this.sensorService.getTemperatureSensors(),\n      this.sensorService.getHumiditySensors(),\n      this.sensorService.getLightSensors(),\n      this.sensorService.getECSensors(),\n      this.sensorService.getPHSensors()\n    ]).pipe(\n      takeUntil(this.destroy$),\n      map(([temp, humidity, light, ec, ph]) => ({\n        temperature: Number(temp[0]?.value ?? 24),\n        humidity: Number(humidity[0]?.value ?? 65),\n        light: Number(light[0]?.value ?? 650),\n        ec: Number(ec[0]?.value ?? 1.8),\n        ph: Number(ph[0]?.value ?? 6.2)\n      } as CurrentMetrics))\n    ).subscribe({\n      next: (metrics: CurrentMetrics) => {\n        this.currentMetrics = metrics;\n      },\n      error: (error: Error) => {\n        console.error('Error loading current metrics:', error);\n        // Keep using last known values\n      }\n    });\n  }\n\n  private loadChartData(): void {\n    // Get history for all sensor types\n    const sensorIds = ['temp-1', 'humidity-1', 'light-1', 'ec-1', 'ph-1'];\n    const histories$ = sensorIds.map(id => this.sensorService.getSensorHistory(id, 1));\n\n    combineLatest(histories$).pipe(\n      takeUntil(this.destroy$),\n      map(histories => this.processHistoriesIntoChartData(histories))\n    ).subscribe({\n      next: (chartData: ChartData) => {\n        this.chartData = chartData;\n      },\n      error: (error: Error) => {\n        console.error('Error loading chart data:', error);\n        this.loadMockChartData();\n      }\n    });\n  }\n\n  private processHistoriesIntoChartData(histories: any[][]): ChartData {\n    // Process the raw histories into chart data format\n    const timestamps = histories[0]?.map(h => new Date(h.timestamp).toLocaleTimeString()) ?? [];\n    const datasets = [\n      {\n        label: 'Temperature (°C)',\n        data: histories[0]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#006d5b',\n        backgroundColor: 'rgba(0, 109, 91, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'Humidity (%)',\n        data: histories[1]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#8d90bb',\n        backgroundColor: 'rgba(141, 144, 187, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'Light (lux/100)',\n        data: histories[2]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#ffc107',\n        backgroundColor: 'rgba(255, 193, 7, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'EC (mS/cm)',\n        data: histories[3]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#dc3545',\n        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'pH',\n        data: histories[4]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#6610f2',\n        backgroundColor: 'rgba(102, 16, 242, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }\n    ];\n\n    return { timestamps, datasets };\n  }\n\n  private loadMockChartData(): void {\n    const now = new Date();\n    const labels = Array.from({ length: 12 }, (_, i) => {\n      const d = new Date(now.getTime() - (11 - i) * 5000);\n      return d.toLocaleTimeString('en-US', { hour12: false });\n    });\n    \n    this.chartData = {\n      timestamps: labels,\n      datasets: [\n        {\n          label: 'Temperature (°C)',\n          data: Array.from({ length: 12 }, () => 22 + Math.random() * 4),\n          borderColor: '#006d5b',\n          backgroundColor: 'rgba(0, 109, 91, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'Humidity (%)',\n          data: Array.from({ length: 12 }, () => 60 + Math.random() * 12),\n          borderColor: '#8d90bb',\n          backgroundColor: 'rgba(141, 144, 187, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'Light (lux/100)',\n          data: Array.from({ length: 12 }, () => Math.max(0, 5 + Math.random() * 3)),\n          borderColor: '#ffc107',\n          backgroundColor: 'rgba(255, 193, 7, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'EC (mS/cm)',\n          data: Array.from({ length: 12 }, () => 1.5 + Math.random() * 0.6),\n          borderColor: '#dc3545',\n          backgroundColor: 'rgba(220, 53, 69, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'pH',\n          data: Array.from({ length: 12 }, () => 5.8 + Math.random() * 0.8),\n          borderColor: '#6610f2',\n          backgroundColor: 'rgba(102, 16, 242, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        }\n      ]\n    };\n  }\n\n  startIrrigation(): void {\n    this.sensorService.startIrrigation().subscribe(\n      () => {\n        console.log('Irrigation started');\n      },\n      error => {\n        console.error('Error starting irrigation:', error);\n      }\n    );\n  }\n\n  exportData(): void {\n    this.sensorService.exportData().subscribe(\n      (data) => {\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'sensor-data.json';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      },\n      error => {\n        console.error('Error exporting data:', error);\n      }\n    );\n  }\n}","<div class=\"dashboard-container\">\n    <div class=\"dashboard-header\">\n      <h1 class=\"dashboard-title\">Dashboard</h1>\n      <div class=\"dashboard-actions\">\n        <button class=\"btn btn-outline\" (click)=\"exportData()\">Export Data</button>\n        <button class=\"btn btn-primary\" (click)=\"startIrrigation()\">Start Irrigation</button>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h2 class=\"card-title\">Real-Time Charts</h2>\n      </div>\n      <div class=\"metrics-grid\">\n        <app-metric-card\n          name=\"Temperature\"\n          icon=\"🌡️\"\n          [currentValue]=\"currentMetrics.temperature\"\n          [minOptimal]=\"22\"\n          [maxOptimal]=\"26\"\n          unit=\"°C\"\n          [maxRange]=\"35\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"Humidity\"\n          icon=\"💧\"\n          [currentValue]=\"currentMetrics.humidity\"\n          [minOptimal]=\"60\"\n          [maxOptimal]=\"70\"\n          unit=\"%\"\n          [maxRange]=\"100\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"Light\"\n          icon=\"☀️\"\n          [currentValue]=\"currentMetrics.light\"\n          [minOptimal]=\"500\"\n          [maxOptimal]=\"800\"\n          unit=\" lux\"\n          [maxRange]=\"1000\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"EC\"\n          icon=\"⚡\"\n          [currentValue]=\"currentMetrics.ec\"\n          [minOptimal]=\"1.5\"\n          [maxOptimal]=\"2.1\"\n          unit=\" mS/cm\"\n          [maxRange]=\"3.0\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"pH\"\n          icon=\"🧪\"\n          [currentValue]=\"currentMetrics.ph\"\n          [minOptimal]=\"5.8\"\n          [maxOptimal]=\"6.6\"\n          unit=\"\"\n          [maxRange]=\"14\">\n        </app-metric-card>\n      </div>\n\n      <div class=\"chart-container\">\n        <app-chart \n          *ngIf=\"chartData\" \n          [chartData]=\"chartData\"\n          [chartOptions]=\"chartOptions\">\n        </app-chart>\n      </div>\n      <div class=\"system-health\" [ngClass]=\"'system-health-' + systemHealth.status\">\n        <div class=\"system-health-icon\">✓</div>\n        <div class=\"system-health-content\">\n          <div class=\"system-health-title\">System Health: {{ systemHealth.status | titlecase }}</div>\n          <div class=\"system-health-message\">{{ systemHealth.message }}</div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h2 class=\"card-title\">Crop Cycle Roadmap</h2>\n      </div>\n      <div class=\"crop-roadmap\">\n        <div class=\"roadmap-step\" *ngFor=\"let stage of roadmapStages; let i = index\">\n          <div class=\"step-icon\" \n               [ngClass]=\"{'active': stage.active, 'completed': stage.completed}\">\n            {{ stage.completed ? '✓' : i + 1 }}\n          </div>\n          <div class=\"step-label\">{{ stage.name }}</div>\n        </div>\n      </div>\n    </div>\n  </div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}