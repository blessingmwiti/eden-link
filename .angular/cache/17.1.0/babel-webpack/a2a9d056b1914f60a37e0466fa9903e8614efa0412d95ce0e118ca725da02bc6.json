{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/features/my-farm/my-farm.component.ts\nimport { Component } from '@angular/core';\nlet MyFarmComponent = class MyFarmComponent {\n  constructor(cropService) {\n    this.cropService = cropService;\n    this.plantingHistory = [];\n    this.suggestedPlants = [];\n    this.currentPage = 1;\n    this.itemsPerPage = 10;\n    this.totalItems = 0;\n    this.isLoading = true;\n    this.Math = Math;\n  }\n  ngOnInit() {\n    this.loadPlantingHistory();\n    this.loadSuggestedPlants();\n  }\n  loadPlantingHistory() {\n    this.isLoading = true;\n    this.cropService.getPlantingHistory(this.currentPage, this.itemsPerPage).subscribe({\n      next: data => {\n        this.plantingHistory = data.history;\n        this.totalItems = data.total;\n        this.isLoading = false;\n      },\n      error: error => {\n        console.error('Error loading planting history:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n  loadSuggestedPlants() {\n    this.cropService.getSuggestedPlants().subscribe({\n      next: plants => {\n        this.suggestedPlants = plants;\n      },\n      error: error => {\n        console.error('Error loading suggested plants:', error);\n      }\n    });\n  }\n  onPageChange(page) {\n    this.currentPage = page;\n    this.loadPlantingHistory();\n  }\n  viewPlantDetails(crop) {\n    // To be implemented when routing is set up\n    console.log('View details for plant:', crop);\n  }\n};\nMyFarmComponent = __decorate([Component({\n  selector: 'app-my-farm',\n  templateUrl: './my-farm.component.html',\n  styleUrls: ['./my-farm.component.css']\n})], MyFarmComponent);\nexport { MyFarmComponent };","map":{"version":3,"names":["Component","MyFarmComponent","constructor","cropService","plantingHistory","suggestedPlants","currentPage","itemsPerPage","totalItems","isLoading","Math","ngOnInit","loadPlantingHistory","loadSuggestedPlants","getPlantingHistory","subscribe","next","data","history","total","error","console","getSuggestedPlants","plants","onPageChange","page","viewPlantDetails","crop","log","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/injinia/eden-link/src/app/features/my-farm/my-farm.component.ts"],"sourcesContent":["// src/app/features/my-farm/my-farm.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { CropService } from '../../core/services/crop.service';\nimport { Crop } from '../../core/models/crop.model';\nimport { PlantingHistory } from '../../shared/models/planting-history.model';\n\n@Component({\n  selector: 'app-my-farm',\n  templateUrl: './my-farm.component.html',\n  styleUrls: ['./my-farm.component.css']\n})\nexport class MyFarmComponent implements OnInit {\n  plantingHistory: PlantingHistory[] = [];\n  suggestedPlants: Crop[] = [];\n  currentPage = 1;\n  itemsPerPage = 10;\n  totalItems = 0;\n  isLoading = true;\n  public Math = Math;\n\n  constructor(private cropService: CropService) { }\n\n  ngOnInit(): void {\n    this.loadPlantingHistory();\n    this.loadSuggestedPlants();\n  }\n\n  loadPlantingHistory(): void {\n    this.isLoading = true;\n    this.cropService.getPlantingHistory(this.currentPage, this.itemsPerPage).subscribe({\n      next: (data) => {\n        this.plantingHistory = data.history;\n        this.totalItems = data.total;\n        this.isLoading = false;\n      },\n      error: (error) => {\n        console.error('Error loading planting history:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n\n  loadSuggestedPlants(): void {\n    this.cropService.getSuggestedPlants().subscribe({\n      next: (plants) => {\n        this.suggestedPlants = plants;\n      },\n      error: (error) => {\n        console.error('Error loading suggested plants:', error);\n      }\n    });\n  }\n\n  onPageChange(page: number): void {\n    this.currentPage = page;\n    this.loadPlantingHistory();\n  }\n\n  viewPlantDetails(crop: Crop): void {\n    // To be implemented when routing is set up\n    console.log('View details for plant:', crop);\n  }\n}"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAgB,eAAe;AAU1C,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAS1BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAR/B,KAAAC,eAAe,GAAsB,EAAE;IACvC,KAAAC,eAAe,GAAW,EAAE;IAC5B,KAAAC,WAAW,GAAG,CAAC;IACf,KAAAC,YAAY,GAAG,EAAE;IACjB,KAAAC,UAAU,GAAG,CAAC;IACd,KAAAC,SAAS,GAAG,IAAI;IACT,KAAAC,IAAI,GAAGA,IAAI;EAE8B;EAEhDC,QAAQA,CAAA;IACN,IAAI,CAACC,mBAAmB,EAAE;IAC1B,IAAI,CAACC,mBAAmB,EAAE;EAC5B;EAEAD,mBAAmBA,CAAA;IACjB,IAAI,CAACH,SAAS,GAAG,IAAI;IACrB,IAAI,CAACN,WAAW,CAACW,kBAAkB,CAAC,IAAI,CAACR,WAAW,EAAE,IAAI,CAACC,YAAY,CAAC,CAACQ,SAAS,CAAC;MACjFC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACb,eAAe,GAAGa,IAAI,CAACC,OAAO;QACnC,IAAI,CAACV,UAAU,GAAGS,IAAI,CAACE,KAAK;QAC5B,IAAI,CAACV,SAAS,GAAG,KAAK;MACxB,CAAC;MACDW,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD,IAAI,CAACX,SAAS,GAAG,KAAK;MACxB;KACD,CAAC;EACJ;EAEAI,mBAAmBA,CAAA;IACjB,IAAI,CAACV,WAAW,CAACmB,kBAAkB,EAAE,CAACP,SAAS,CAAC;MAC9CC,IAAI,EAAGO,MAAM,IAAI;QACf,IAAI,CAAClB,eAAe,GAAGkB,MAAM;MAC/B,CAAC;MACDH,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;KACD,CAAC;EACJ;EAEAI,YAAYA,CAACC,IAAY;IACvB,IAAI,CAACnB,WAAW,GAAGmB,IAAI;IACvB,IAAI,CAACb,mBAAmB,EAAE;EAC5B;EAEAc,gBAAgBA,CAACC,IAAU;IACzB;IACAN,OAAO,CAACO,GAAG,CAAC,yBAAyB,EAAED,IAAI,CAAC;EAC9C;CACD;AAnDY1B,eAAe,GAAA4B,UAAA,EAL3B7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACW/B,eAAe,CAmD3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}