{"ast":null,"code":"import { BehaviorSubject, interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class SensorDataService {\n  constructor() {\n    this.MAX_DATA_POINTS = 10;\n    this.sensorData = new BehaviorSubject([]);\n    // Initialize with one data point\n    this.addNewDataPoint();\n    // Update data every 5 seconds\n    interval(5000).subscribe(() => {\n      this.addNewDataPoint();\n    });\n  }\n  addNewDataPoint() {\n    const currentData = this.sensorData.value;\n    const newData = {\n      timestamp: new Date(),\n      temperature: this.generateTemperature(),\n      humidity: this.generateHumidity(),\n      light: this.generateLight()\n    };\n    // Add new data point and keep only the last MAX_DATA_POINTS\n    const updatedData = [...currentData, newData].slice(-this.MAX_DATA_POINTS);\n    this.sensorData.next(updatedData);\n  }\n  generateTemperature() {\n    // Simulate temperature between 18°C and 28°C\n    return +(18 + Math.random() * 10).toFixed(1);\n  }\n  generateHumidity() {\n    // Simulate humidity between 60% and 80%\n    return +(60 + Math.random() * 20).toFixed(1);\n  }\n  generateLight() {\n    // Simulate light levels between 2000 and 6000 lux\n    return Math.round(2000 + Math.random() * 4000);\n  }\n  getSensorData() {\n    return this.sensorData.asObservable();\n  }\n  static {\n    this.ɵfac = function SensorDataService_Factory(t) {\n      return new (t || SensorDataService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SensorDataService,\n      factory: SensorDataService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","interval","SensorDataService","constructor","MAX_DATA_POINTS","sensorData","addNewDataPoint","subscribe","currentData","value","newData","timestamp","Date","temperature","generateTemperature","humidity","generateHumidity","light","generateLight","updatedData","slice","next","Math","random","toFixed","round","getSensorData","asObservable","factory","ɵfac","providedIn"],"sources":["/home/injinia/eden-link/src/app/services/sensor-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface SensorData {\n  timestamp: Date;\n  temperature: number;\n  humidity: number;\n  light: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SensorDataService {\n  private readonly MAX_DATA_POINTS = 10;\n  private sensorData = new BehaviorSubject<SensorData[]>([]);\n\n  constructor() {\n    // Initialize with one data point\n    this.addNewDataPoint();\n\n    // Update data every 5 seconds\n    interval(5000).subscribe(() => {\n      this.addNewDataPoint();\n    });\n  }\n\n  private addNewDataPoint() {\n    const currentData = this.sensorData.value;\n    const newData = {\n      timestamp: new Date(),\n      temperature: this.generateTemperature(),\n      humidity: this.generateHumidity(),\n      light: this.generateLight()\n    };\n\n    // Add new data point and keep only the last MAX_DATA_POINTS\n    const updatedData = [...currentData, newData]\n      .slice(-this.MAX_DATA_POINTS);\n    \n    this.sensorData.next(updatedData);\n  }\n\n  private generateTemperature(): number {\n    // Simulate temperature between 18°C and 28°C\n    return +(18 + Math.random() * 10).toFixed(1);\n  }\n\n  private generateHumidity(): number {\n    // Simulate humidity between 60% and 80%\n    return +(60 + Math.random() * 20).toFixed(1);\n  }\n\n  private generateLight(): number {\n    // Simulate light levels between 2000 and 6000 lux\n    return Math.round(2000 + Math.random() * 4000);\n  }\n\n  getSensorData(): Observable<SensorData[]> {\n    return this.sensorData.asObservable();\n  }\n} "],"mappings":"AACA,SAASA,eAAe,EAAcC,QAAQ,QAAQ,MAAM;;AAa5D,OAAM,MAAOC,iBAAiB;EAI5BC,YAAA;IAHiB,KAAAC,eAAe,GAAG,EAAE;IAC7B,KAAAC,UAAU,GAAG,IAAIL,eAAe,CAAe,EAAE,CAAC;IAGxD;IACA,IAAI,CAACM,eAAe,EAAE;IAEtB;IACAL,QAAQ,CAAC,IAAI,CAAC,CAACM,SAAS,CAAC,MAAK;MAC5B,IAAI,CAACD,eAAe,EAAE;IACxB,CAAC,CAAC;EACJ;EAEQA,eAAeA,CAAA;IACrB,MAAME,WAAW,GAAG,IAAI,CAACH,UAAU,CAACI,KAAK;IACzC,MAAMC,OAAO,GAAG;MACdC,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,WAAW,EAAE,IAAI,CAACC,mBAAmB,EAAE;MACvCC,QAAQ,EAAE,IAAI,CAACC,gBAAgB,EAAE;MACjCC,KAAK,EAAE,IAAI,CAACC,aAAa;KAC1B;IAED;IACA,MAAMC,WAAW,GAAG,CAAC,GAAGX,WAAW,EAAEE,OAAO,CAAC,CAC1CU,KAAK,CAAC,CAAC,IAAI,CAAChB,eAAe,CAAC;IAE/B,IAAI,CAACC,UAAU,CAACgB,IAAI,CAACF,WAAW,CAAC;EACnC;EAEQL,mBAAmBA,CAAA;IACzB;IACA,OAAO,CAAC,CAAC,EAAE,GAAGQ,IAAI,CAACC,MAAM,EAAE,GAAG,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC;EAC9C;EAEQR,gBAAgBA,CAAA;IACtB;IACA,OAAO,CAAC,CAAC,EAAE,GAAGM,IAAI,CAACC,MAAM,EAAE,GAAG,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC;EAC9C;EAEQN,aAAaA,CAAA;IACnB;IACA,OAAOI,IAAI,CAACG,KAAK,CAAC,IAAI,GAAGH,IAAI,CAACC,MAAM,EAAE,GAAG,IAAI,CAAC;EAChD;EAEAG,aAAaA,CAAA;IACX,OAAO,IAAI,CAACrB,UAAU,CAACsB,YAAY,EAAE;EACvC;;;uBA/CWzB,iBAAiB;IAAA;EAAA;;;aAAjBA,iBAAiB;MAAA0B,OAAA,EAAjB1B,iBAAiB,CAAA2B,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}