{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport class SettingsComponent {\n  constructor() {\n    this.systemSettings = {\n      notifications: {\n        emailAlerts: true,\n        pushNotifications: true,\n        smsAlerts: false\n      },\n      dataManagement: {\n        dataRetentionPeriod: 90,\n        autoBackup: true,\n        backupFrequency: 'weekly'\n      }\n    };\n    this.monitoringSettings = {\n      sensorPollingInterval: 30,\n      thresholds: {\n        temperature: {\n          min: 20,\n          max: 30\n        },\n        humidity: {\n          min: 40,\n          max: 70\n        },\n        light: {\n          min: 2000,\n          max: 6000\n        },\n        ec: {\n          min: 1.0,\n          max: 2.5\n        },\n        ph: {\n          min: 5.5,\n          max: 6.5\n        }\n      }\n    };\n    this.systemVersion = {\n      current: '1.0.0',\n      latest: '1.0.1',\n      updateAvailable: true\n    };\n    this.backupFrequencyOptions = [{\n      value: 'daily',\n      label: 'Daily'\n    }, {\n      value: 'weekly',\n      label: 'Weekly'\n    }, {\n      value: 'monthly',\n      label: 'Monthly'\n    }];\n  }\n  ngOnInit() {\n    // In a real application, these settings would be loaded from a service\n    this.loadSettings();\n  }\n  saveSettings() {\n    // In a real application, this would save to a backend service\n    console.log('Saving settings:', {\n      system: this.systemSettings,\n      monitoring: this.monitoringSettings\n    });\n    // Mock successful save\n    alert('Settings saved successfully!');\n  }\n  backupSystem() {\n    // Mock backup process\n    console.log('Initiating system backup...');\n    setTimeout(() => {\n      alert('System backup completed successfully!');\n    }, 2000);\n  }\n  restoreFromBackup() {\n    // Mock restore process\n    if (confirm('Are you sure you want to restore from the last backup? This will override current settings.')) {\n      console.log('Initiating system restore...');\n      setTimeout(() => {\n        alert('System restored successfully!');\n        this.loadSettings(); // Reload settings after restore\n      }, 2000);\n    }\n  }\n  checkForUpdates() {\n    // Mock update check\n    console.log('Checking for updates...');\n    setTimeout(() => {\n      this.systemVersion = {\n        ...this.systemVersion,\n        updateAvailable: true,\n        latest: '1.0.2'\n      };\n      alert('New update available: v1.0.2');\n    }, 1500);\n  }\n  loadSettings() {\n    // In a real application, this would load from a service\n    // For now, we'll use the default values set in the properties\n    console.log('Loading settings...');\n  }\n  static {\n    this.ɵfac = function SettingsComponent_Factory(t) {\n      return new (t || SettingsComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: SettingsComponent,\n      selectors: [[\"app-settings\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 2,\n      vars: 0,\n      template: function SettingsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"settings works!\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      dependencies: [CommonModule, FormsModule],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["CommonModule","FormsModule","SettingsComponent","constructor","systemSettings","notifications","emailAlerts","pushNotifications","smsAlerts","dataManagement","dataRetentionPeriod","autoBackup","backupFrequency","monitoringSettings","sensorPollingInterval","thresholds","temperature","min","max","humidity","light","ec","ph","systemVersion","current","latest","updateAvailable","backupFrequencyOptions","value","label","ngOnInit","loadSettings","saveSettings","console","log","system","monitoring","alert","backupSystem","setTimeout","restoreFromBackup","confirm","checkForUpdates","selectors","standalone","features","i0","ɵɵStandaloneFeature","decls","vars","template","SettingsComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","styles"],"sources":["/home/injinia/eden-link/src/app/features/settings/settings.component.ts","/home/injinia/eden-link/src/app/features/settings/settings.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\ninterface SystemSettings {\n  notifications: {\n    emailAlerts: boolean;\n    pushNotifications: boolean;\n    smsAlerts: boolean;\n  };\n  dataManagement: {\n    dataRetentionPeriod: number;\n    autoBackup: boolean;\n    backupFrequency: string;\n  };\n}\n\ninterface MonitoringSettings {\n  sensorPollingInterval: number;\n  thresholds: {\n    temperature: { min: number; max: number; };\n    humidity: { min: number; max: number; };\n    light: { min: number; max: number; };\n    ec: { min: number; max: number; };\n    ph: { min: number; max: number; };\n  };\n}\n\ninterface SystemVersion {\n  current: string;\n  latest: string;\n  updateAvailable: boolean;\n}\n\n@Component({\n  selector: 'app-settings',\n  standalone: true,\n  imports: [CommonModule, FormsModule],\n  templateUrl: './settings.component.html',\n  styleUrl: './settings.component.css'\n})\nexport class SettingsComponent implements OnInit {\n  systemSettings: SystemSettings = {\n    notifications: {\n      emailAlerts: true,\n      pushNotifications: true,\n      smsAlerts: false\n    },\n    dataManagement: {\n      dataRetentionPeriod: 90,\n      autoBackup: true,\n      backupFrequency: 'weekly'\n    }\n  };\n\n  monitoringSettings: MonitoringSettings = {\n    sensorPollingInterval: 30,\n    thresholds: {\n      temperature: { min: 20, max: 30 },\n      humidity: { min: 40, max: 70 },\n      light: { min: 2000, max: 6000 },\n      ec: { min: 1.0, max: 2.5 },\n      ph: { min: 5.5, max: 6.5 }\n    }\n  };\n\n  systemVersion: SystemVersion = {\n    current: '1.0.0',\n    latest: '1.0.1',\n    updateAvailable: true\n  };\n\n  backupFrequencyOptions = [\n    { value: 'daily', label: 'Daily' },\n    { value: 'weekly', label: 'Weekly' },\n    { value: 'monthly', label: 'Monthly' }\n  ];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    // In a real application, these settings would be loaded from a service\n    this.loadSettings();\n  }\n\n  saveSettings(): void {\n    // In a real application, this would save to a backend service\n    console.log('Saving settings:', {\n      system: this.systemSettings,\n      monitoring: this.monitoringSettings\n    });\n    // Mock successful save\n    alert('Settings saved successfully!');\n  }\n\n  backupSystem(): void {\n    // Mock backup process\n    console.log('Initiating system backup...');\n    setTimeout(() => {\n      alert('System backup completed successfully!');\n    }, 2000);\n  }\n\n  restoreFromBackup(): void {\n    // Mock restore process\n    if (confirm('Are you sure you want to restore from the last backup? This will override current settings.')) {\n      console.log('Initiating system restore...');\n      setTimeout(() => {\n        alert('System restored successfully!');\n        this.loadSettings(); // Reload settings after restore\n      }, 2000);\n    }\n  }\n\n  checkForUpdates(): void {\n    // Mock update check\n    console.log('Checking for updates...');\n    setTimeout(() => {\n      this.systemVersion = {\n        ...this.systemVersion,\n        updateAvailable: true,\n        latest: '1.0.2'\n      };\n      alert('New update available: v1.0.2');\n    }, 1500);\n  }\n\n  private loadSettings(): void {\n    // In a real application, this would load from a service\n    // For now, we'll use the default values set in the properties\n    console.log('Loading settings...');\n  }\n}\n","<p>settings works!</p>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}