{"ast":null,"code":"import { BehaviorSubject, of, throwError } from 'rxjs';\nimport { delay, map, tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class CropService {\n  // Utility function to get relative dates\n  getRelativeDate(daysOffset) {\n    const date = new Date();\n    date.setDate(date.getDate() + daysOffset);\n    return date;\n  }\n  constructor() {\n    this.SIMULATED_DELAY = 500;\n    // Mock data for current crops\n    this.crops = new BehaviorSubject([{\n      id: 'crop1',\n      name: 'Bell Pepper',\n      scientificName: 'Capsicum annuum',\n      imageUrl: '/assets/images/crops/bell-pepper.jpg',\n      category: 'Vegetable',\n      growthCycle: 100,\n      currentStage: {\n        id: 'stage3',\n        name: 'Flowering',\n        order: 3,\n        description: 'Plants are developing flowers which will turn into peppers.',\n        startDate: this.getRelativeDate(-15),\n        isCompleted: false,\n        requiredActions: ['Monitor temperature between 20-25°C', 'Maintain humidity around 60-70%', 'Ensure proper pollination'],\n        idealConditions: {\n          temperature: {\n            min: 20,\n            max: 25,\n            unit: '°C'\n          },\n          humidity: {\n            min: 60,\n            max: 70,\n            unit: '%'\n          },\n          light: {\n            min: 14,\n            max: 16,\n            unit: 'hours'\n          },\n          ph: {\n            min: 6.0,\n            max: 6.8,\n            unit: 'pH'\n          },\n          ec: {\n            min: 1.8,\n            max: 2.2,\n            unit: 'mS/cm'\n          }\n        }\n      },\n      plantedDate: this.getRelativeDate(-45),\n      expectedHarvestDate: this.getRelativeDate(55),\n      status: 'active',\n      health: 95,\n      notes: 'Growing well, flowers developing nicely',\n      farmId: 'farm1',\n      zoneId: 'zone1',\n      idealTemperature: 23,\n      idealHumidity: 65,\n      idealLight: 14000,\n      aiSuggestion: 'Growth is on track. Consider increasing pollination activities for better fruit set.'\n    }, {\n      id: 'crop2',\n      name: 'Coriander',\n      scientificName: 'Coriandrum sativum',\n      imageUrl: '/assets/images/crops/coriander.jpg',\n      category: 'Herb',\n      growthCycle: 45,\n      currentStage: {\n        id: 'stage2',\n        name: 'Vegetation',\n        order: 2,\n        description: 'Plants are developing lush green leaves.',\n        startDate: this.getRelativeDate(-5),\n        isCompleted: false,\n        requiredActions: ['Maintain soil moisture', 'Ensure good air circulation', 'Monitor for leaf spots'],\n        idealConditions: {\n          temperature: {\n            min: 18,\n            max: 22,\n            unit: '°C'\n          },\n          humidity: {\n            min: 50,\n            max: 60,\n            unit: '%'\n          },\n          light: {\n            min: 12,\n            max: 14,\n            unit: 'hours'\n          },\n          ph: {\n            min: 6.2,\n            max: 6.8,\n            unit: 'pH'\n          },\n          ec: {\n            min: 1.2,\n            max: 1.6,\n            unit: 'mS/cm'\n          }\n        }\n      },\n      plantedDate: this.getRelativeDate(-20),\n      expectedHarvestDate: this.getRelativeDate(25),\n      status: 'active',\n      health: 90,\n      farmId: 'farm1',\n      zoneId: 'zone2',\n      idealTemperature: 20,\n      idealHumidity: 55,\n      idealLight: 12000,\n      aiSuggestion: 'Consider harvesting outer leaves to promote bushier growth.'\n    }]);\n    // Mock data for planting history with relative dates\n    this.plantingHistory = new BehaviorSubject([{\n      id: 'history1',\n      plantName: 'Cherry Tomatoes',\n      plantingDate: this.getRelativeDate(-90),\n      harvestDate: this.getRelativeDate(-30),\n      status: 'completed',\n      yield: 5,\n      yieldUnit: 'kg',\n      notes: 'Good yield, but some pest issues noted.'\n    }, {\n      id: 'history2',\n      plantName: 'Basil',\n      plantingDate: this.getRelativeDate(-60),\n      harvestDate: this.getRelativeDate(-15),\n      status: 'completed',\n      yield: 2,\n      yieldUnit: 'kg',\n      notes: 'Excellent growth, no issues.'\n    }, {\n      id: 'history3',\n      plantName: 'Lettuce',\n      plantingDate: this.getRelativeDate(-45),\n      harvestDate: this.getRelativeDate(-30),\n      status: 'completed',\n      yield: 3,\n      yieldUnit: 'kg',\n      notes: 'Some issues with nutrient levels.'\n    }]);\n  }\n  // CRUD Operations for Crops\n  getCrops(filters) {\n    return this.crops.asObservable().pipe(map(crops => {\n      if (!filters) return crops;\n      return crops.filter(crop => {\n        const categoryMatch = !filters.category || crop.category === filters.category;\n        const statusMatch = !filters.status || crop.status === filters.status;\n        return categoryMatch && statusMatch;\n      });\n    }), delay(this.SIMULATED_DELAY), catchError(error => this.handleError('Failed to fetch crops', error)));\n  }\n  getCropById(id) {\n    return this.crops.asObservable().pipe(map(crops => {\n      const crop = crops.find(c => c.id === id);\n      if (!crop) throw new Error('Crop not found');\n      return crop;\n    }), delay(this.SIMULATED_DELAY), catchError(error => this.handleError(`Failed to fetch crop with id ${id}`, error)));\n  }\n  addCrop(crop) {\n    const newCrop = {\n      ...crop,\n      id: Date.now().toString()\n    };\n    return of(newCrop).pipe(tap(() => {\n      const currentCrops = this.crops.getValue();\n      this.crops.next([...currentCrops, newCrop]);\n    }), delay(this.SIMULATED_DELAY), catchError(error => this.handleError('Failed to add crop', error)));\n  }\n  updateCrop(id, updates) {\n    return this.crops.pipe(map(crops => {\n      const existingCrop = crops.find(c => c.id === id);\n      if (!existingCrop) throw new Error('Crop not found');\n      const updatedCrop = {\n        ...existingCrop,\n        ...updates,\n        lastUpdated: new Date()\n      };\n      const updatedCrops = crops.map(crop => crop.id === id ? updatedCrop : crop);\n      this.crops.next(updatedCrops);\n      return updatedCrop;\n    }), delay(this.SIMULATED_DELAY), catchError(error => this.handleError(`Failed to update crop ${id}`, error)));\n  }\n  deleteCrop(id) {\n    return of(true).pipe(tap(() => {\n      const currentCrops = this.crops.getValue();\n      const updatedCrops = currentCrops.filter(crop => crop.id !== id);\n      this.crops.next(updatedCrops);\n    }), delay(this.SIMULATED_DELAY), catchError(error => this.handleError(`Failed to delete crop ${id}`, error)));\n  }\n  // Enhanced Planting History methods\n  getPlantingHistory(page, itemsPerPage, filters) {\n    return of(this.plantingHistory.getValue()).pipe(map(history => {\n      let filteredHistory = history;\n      if (filters) {\n        filteredHistory = history.filter(record => {\n          const statusMatch = !filters.status || record.status === filters.status;\n          const nameMatch = !filters.plantName || record.plantName.toLowerCase().includes(filters.plantName.toLowerCase());\n          return statusMatch && nameMatch;\n        });\n      }\n      const startIndex = (page - 1) * itemsPerPage;\n      return {\n        history: filteredHistory.slice(startIndex, startIndex + itemsPerPage),\n        total: filteredHistory.length\n      };\n    }), delay(this.SIMULATED_DELAY), catchError(error => this.handleError('Failed to fetch planting history', error)));\n  }\n  // Enhanced Suggested Plants method\n  getSuggestedPlants(limit = 5) {\n    return this.crops.asObservable().pipe(map(crops => {\n      // Simulate AI-based sorting by health score and growth performance\n      const sortedCrops = [...crops].sort((a, b) => b.health - a.health);\n      return sortedCrops.slice(0, limit);\n    }), delay(this.SIMULATED_DELAY), catchError(error => this.handleError('Failed to fetch suggested plants', error)));\n  }\n  // Error handling\n  handleError(message, error) {\n    console.error(message, error);\n    return throwError(() => new Error(`${message}: ${error.message || 'Unknown error'}`));\n  }\n  getCropTypes() {\n    const mockCropTypes = [{\n      id: '1',\n      name: 'Tomato',\n      description: 'Indeterminate tomato variety suitable for greenhouse cultivation',\n      growthDuration: 90,\n      idealTemperature: 25,\n      idealHumidity: 65,\n      idealLight: 30000,\n      stages: [{\n        name: 'Seedling',\n        duration: 14,\n        description: 'Initial growth stage from seed to small plant',\n        tasks: ['Monitor moisture', 'Maintain temperature']\n      }, {\n        name: 'Vegetative',\n        duration: 30,\n        description: 'Main growth phase',\n        tasks: ['Regular pruning', 'Support installation']\n      }, {\n        name: 'Flowering',\n        duration: 20,\n        description: 'Flower development phase',\n        tasks: ['Pollination', 'Nutrient adjustment']\n      }, {\n        name: 'Fruiting',\n        duration: 26,\n        description: 'Fruit development and ripening',\n        tasks: ['Support maintenance', 'Harvest timing']\n      }]\n    }];\n    return of(mockCropTypes).pipe(delay(500));\n  }\n  getCurrentCropCycle() {\n    const mockCropCycle = {\n      id: '1',\n      cropTypeId: '1',\n      cropName: 'Tomato',\n      startDate: new Date(2024, 0, 1),\n      plantDate: new Date(2024, 0, 1),\n      currentStage: 2,\n      status: 'active',\n      completedStages: [0, 1],\n      notes: 'Healthy growth observed',\n      durationWeeks: 12,\n      stages: [{\n        name: 'Seedling',\n        startWeek: 1,\n        endWeek: 2,\n        description: 'Initial growth stage from seed to small plant',\n        tasks: [{\n          description: 'Monitor moisture',\n          completed: true\n        }, {\n          description: 'Maintain temperature',\n          completed: true\n        }],\n        completed: true\n      }, {\n        name: 'Vegetative',\n        startWeek: 3,\n        endWeek: 6,\n        description: 'Main growth phase',\n        tasks: [{\n          description: 'Regular pruning',\n          completed: true\n        }, {\n          description: 'Support installation',\n          completed: true\n        }],\n        completed: true\n      }, {\n        name: 'Flowering',\n        startWeek: 7,\n        endWeek: 9,\n        description: 'Flower development phase',\n        tasks: [{\n          description: 'Pollination',\n          completed: false\n        }, {\n          description: 'Nutrient adjustment',\n          completed: false\n        }],\n        completed: false\n      }]\n    };\n    return of(mockCropCycle).pipe(delay(500));\n  }\n  createCropCycle(cropCycle) {\n    return of({\n      ...cropCycle,\n      id: Date.now().toString()\n    }).pipe(delay(500));\n  }\n  completeStage(cropCycleId, stageIndex) {\n    return of(true).pipe(delay(500));\n  }\n  static {\n    this.ɵfac = function CropService_Factory(t) {\n      return new (t || CropService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CropService,\n      factory: CropService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","of","throwError","delay","map","tap","catchError","CropService","getRelativeDate","daysOffset","date","Date","setDate","getDate","constructor","SIMULATED_DELAY","crops","id","name","scientificName","imageUrl","category","growthCycle","currentStage","order","description","startDate","isCompleted","requiredActions","idealConditions","temperature","min","max","unit","humidity","light","ph","ec","plantedDate","expectedHarvestDate","status","health","notes","farmId","zoneId","idealTemperature","idealHumidity","idealLight","aiSuggestion","plantingHistory","plantName","plantingDate","harvestDate","yield","yieldUnit","getCrops","filters","asObservable","pipe","filter","crop","categoryMatch","statusMatch","error","handleError","getCropById","find","c","Error","addCrop","newCrop","now","toString","currentCrops","getValue","next","updateCrop","updates","existingCrop","updatedCrop","lastUpdated","updatedCrops","deleteCrop","getPlantingHistory","page","itemsPerPage","history","filteredHistory","record","nameMatch","toLowerCase","includes","startIndex","slice","total","length","getSuggestedPlants","limit","sortedCrops","sort","a","b","message","console","getCropTypes","mockCropTypes","growthDuration","stages","duration","tasks","getCurrentCropCycle","mockCropCycle","cropTypeId","cropName","plantDate","completedStages","durationWeeks","startWeek","endWeek","completed","createCropCycle","cropCycle","completeStage","cropCycleId","stageIndex","factory","ɵfac","providedIn"],"sources":["/home/injinia/eden-link/src/app/core/services/crop.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { delay, map, tap, catchError } from 'rxjs/operators';\nimport { Crop, CropRecommendation, CropStage, CropTemplate } from '../models/crop.model';\nimport { PlantingHistory } from '../../shared/models/planting-history.model';\nimport { CropType } from '../models/crop-type.model';\nimport { CropCycle } from '../models/crop-cycle.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CropService {\n  private readonly SIMULATED_DELAY = 500;\n  \n  // Utility function to get relative dates\n  private getRelativeDate(daysOffset: number): Date {\n    const date = new Date();\n    date.setDate(date.getDate() + daysOffset);\n    return date;\n  }\n\n  // Mock data for current crops\n  private crops = new BehaviorSubject<Crop[]>([\n    {\n      id: 'crop1',\n      name: 'Bell Pepper',\n      scientificName: 'Capsicum annuum',\n      imageUrl: '/assets/images/crops/bell-pepper.jpg',\n      category: 'Vegetable',\n      growthCycle: 100,\n      currentStage: {\n        id: 'stage3',\n        name: 'Flowering',\n        order: 3,\n        description: 'Plants are developing flowers which will turn into peppers.',\n        startDate: this.getRelativeDate(-15),\n        isCompleted: false,\n        requiredActions: [\n          'Monitor temperature between 20-25°C',\n          'Maintain humidity around 60-70%',\n          'Ensure proper pollination'\n        ],\n        idealConditions: {\n          temperature: { min: 20, max: 25, unit: '°C' },\n          humidity: { min: 60, max: 70, unit: '%' },\n          light: { min: 14, max: 16, unit: 'hours' },\n          ph: { min: 6.0, max: 6.8, unit: 'pH' },\n          ec: { min: 1.8, max: 2.2, unit: 'mS/cm' }\n        }\n      },\n      plantedDate: this.getRelativeDate(-45),\n      expectedHarvestDate: this.getRelativeDate(55),\n      status: 'active',\n      health: 95,\n      notes: 'Growing well, flowers developing nicely',\n      farmId: 'farm1',\n      zoneId: 'zone1',\n      idealTemperature: 23,\n      idealHumidity: 65,\n      idealLight: 14000,\n      aiSuggestion: 'Growth is on track. Consider increasing pollination activities for better fruit set.'\n    },\n    {\n      id: 'crop2',\n      name: 'Coriander',\n      scientificName: 'Coriandrum sativum',\n      imageUrl: '/assets/images/crops/coriander.jpg',\n      category: 'Herb',\n      growthCycle: 45,\n      currentStage: {\n        id: 'stage2',\n        name: 'Vegetation',\n        order: 2,\n        description: 'Plants are developing lush green leaves.',\n        startDate: this.getRelativeDate(-5),\n        isCompleted: false,\n        requiredActions: [\n          'Maintain soil moisture',\n          'Ensure good air circulation',\n          'Monitor for leaf spots'\n        ],\n        idealConditions: {\n          temperature: { min: 18, max: 22, unit: '°C' },\n          humidity: { min: 50, max: 60, unit: '%' },\n          light: { min: 12, max: 14, unit: 'hours' },\n          ph: { min: 6.2, max: 6.8, unit: 'pH' },\n          ec: { min: 1.2, max: 1.6, unit: 'mS/cm' }\n        }\n      },\n      plantedDate: this.getRelativeDate(-20),\n      expectedHarvestDate: this.getRelativeDate(25),\n      status: 'active',\n      health: 90,\n      farmId: 'farm1',\n      zoneId: 'zone2',\n      idealTemperature: 20,\n      idealHumidity: 55,\n      idealLight: 12000,\n      aiSuggestion: 'Consider harvesting outer leaves to promote bushier growth.'\n    }\n  ]);\n\n  // Mock data for planting history with relative dates\n  private plantingHistory = new BehaviorSubject<PlantingHistory[]>([\n    {\n      id: 'history1',\n      plantName: 'Cherry Tomatoes',\n      plantingDate: this.getRelativeDate(-90),\n      harvestDate: this.getRelativeDate(-30),\n      status: 'completed',\n      yield: 5,\n      yieldUnit: 'kg',\n      notes: 'Good yield, but some pest issues noted.'\n    },\n    {\n      id: 'history2',\n      plantName: 'Basil',\n      plantingDate: this.getRelativeDate(-60),\n      harvestDate: this.getRelativeDate(-15),\n      status: 'completed',\n      yield: 2,\n      yieldUnit: 'kg',\n      notes: 'Excellent growth, no issues.'\n    },\n    {\n      id: 'history3',\n      plantName: 'Lettuce',\n      plantingDate: this.getRelativeDate(-45),\n      harvestDate: this.getRelativeDate(-30),\n      status: 'completed',\n      yield: 3,\n      yieldUnit: 'kg',\n      notes: 'Some issues with nutrient levels.'\n    }\n  ]);\n\n  constructor() {}\n\n  // CRUD Operations for Crops\n  getCrops(filters?: { category?: string; status?: string }): Observable<Crop[]> {\n    return this.crops.asObservable().pipe(\n      map(crops => {\n        if (!filters) return crops;\n        return crops.filter(crop => {\n          const categoryMatch = !filters.category || crop.category === filters.category;\n          const statusMatch = !filters.status || crop.status === filters.status;\n          return categoryMatch && statusMatch;\n        });\n      }),\n      delay(this.SIMULATED_DELAY),\n      catchError(error => this.handleError('Failed to fetch crops', error))\n    );\n  }\n\n  getCropById(id: string): Observable<Crop> {\n    return this.crops.asObservable().pipe(\n      map(crops => {\n        const crop = crops.find(c => c.id === id);\n        if (!crop) throw new Error('Crop not found');\n        return crop;\n      }),\n      delay(this.SIMULATED_DELAY),\n      catchError(error => this.handleError(`Failed to fetch crop with id ${id}`, error))\n    );\n  }\n\n  addCrop(crop: Omit<Crop, 'id'>): Observable<Crop> {\n    const newCrop = { ...crop, id: Date.now().toString() };\n    return of(newCrop).pipe(\n      tap(() => {\n        const currentCrops = this.crops.getValue();\n        this.crops.next([...currentCrops, newCrop]);\n      }),\n      delay(this.SIMULATED_DELAY),\n      catchError(error => this.handleError('Failed to add crop', error))\n    );\n  }\n\n  updateCrop(id: string, updates: Partial<Crop>): Observable<Crop> {\n    return this.crops.pipe(\n      map(crops => {\n        const existingCrop = crops.find(c => c.id === id);\n        if (!existingCrop) throw new Error('Crop not found');\n        \n        const updatedCrop = { ...existingCrop, ...updates, lastUpdated: new Date() };\n        const updatedCrops = crops.map(crop => crop.id === id ? updatedCrop : crop);\n        this.crops.next(updatedCrops);\n        return updatedCrop;\n      }),\n      delay(this.SIMULATED_DELAY),\n      catchError(error => this.handleError(`Failed to update crop ${id}`, error))\n    );\n  }\n\n  deleteCrop(id: string): Observable<boolean> {\n    return of(true).pipe(\n      tap(() => {\n        const currentCrops = this.crops.getValue();\n        const updatedCrops = currentCrops.filter(crop => crop.id !== id);\n        this.crops.next(updatedCrops);\n      }),\n      delay(this.SIMULATED_DELAY),\n      catchError(error => this.handleError(`Failed to delete crop ${id}`, error))\n    );\n  }\n\n  // Enhanced Planting History methods\n  getPlantingHistory(page: number, itemsPerPage: number, filters?: { status?: string; plantName?: string }): Observable<{ history: PlantingHistory[]; total: number }> {\n    return of(this.plantingHistory.getValue()).pipe(\n      map(history => {\n        let filteredHistory = history;\n        if (filters) {\n          filteredHistory = history.filter(record => {\n            const statusMatch = !filters.status || record.status === filters.status;\n            const nameMatch = !filters.plantName || record.plantName.toLowerCase().includes(filters.plantName.toLowerCase());\n            return statusMatch && nameMatch;\n          });\n        }\n    const startIndex = (page - 1) * itemsPerPage;\n        return {\n          history: filteredHistory.slice(startIndex, startIndex + itemsPerPage),\n          total: filteredHistory.length\n        };\n      }),\n      delay(this.SIMULATED_DELAY),\n      catchError(error => this.handleError('Failed to fetch planting history', error))\n    );\n  }\n\n  // Enhanced Suggested Plants method\n  getSuggestedPlants(limit: number = 5): Observable<Crop[]> {\n    return this.crops.asObservable().pipe(\n      map(crops => {\n        // Simulate AI-based sorting by health score and growth performance\n        const sortedCrops = [...crops].sort((a, b) => b.health - a.health);\n        return sortedCrops.slice(0, limit);\n      }),\n      delay(this.SIMULATED_DELAY),\n      catchError(error => this.handleError('Failed to fetch suggested plants', error))\n    );\n  }\n\n  // Error handling\n  private handleError(message: string, error: any): Observable<never> {\n    console.error(message, error);\n    return throwError(() => new Error(`${message}: ${error.message || 'Unknown error'}`));\n  }\n\n  getCropTypes(): Observable<CropType[]> {\n    const mockCropTypes: CropType[] = [\n      {\n        id: '1',\n        name: 'Tomato',\n        description: 'Indeterminate tomato variety suitable for greenhouse cultivation',\n        growthDuration: 90,\n        idealTemperature: 25,\n        idealHumidity: 65,\n        idealLight: 30000,\n        stages: [\n          {\n            name: 'Seedling',\n            duration: 14,\n            description: 'Initial growth stage from seed to small plant',\n            tasks: ['Monitor moisture', 'Maintain temperature']\n          },\n          {\n            name: 'Vegetative',\n            duration: 30,\n            description: 'Main growth phase',\n            tasks: ['Regular pruning', 'Support installation']\n          },\n          {\n            name: 'Flowering',\n            duration: 20,\n            description: 'Flower development phase',\n            tasks: ['Pollination', 'Nutrient adjustment']\n          },\n          {\n            name: 'Fruiting',\n            duration: 26,\n            description: 'Fruit development and ripening',\n            tasks: ['Support maintenance', 'Harvest timing']\n          }\n        ]\n      }\n    ];\n    return of(mockCropTypes).pipe(delay(500));\n  }\n\n  getCurrentCropCycle(): Observable<CropCycle> {\n    const mockCropCycle: CropCycle = {\n      id: '1',\n      cropTypeId: '1',\n      cropName: 'Tomato',\n      startDate: new Date(2024, 0, 1),\n      plantDate: new Date(2024, 0, 1),\n      currentStage: 2,\n      status: 'active',\n      completedStages: [0, 1],\n      notes: 'Healthy growth observed',\n      durationWeeks: 12,\n      stages: [\n        {\n          name: 'Seedling',\n          startWeek: 1,\n          endWeek: 2,\n          description: 'Initial growth stage from seed to small plant',\n          tasks: [\n            { description: 'Monitor moisture', completed: true },\n            { description: 'Maintain temperature', completed: true }\n          ],\n          completed: true\n        },\n        {\n          name: 'Vegetative',\n          startWeek: 3,\n          endWeek: 6,\n          description: 'Main growth phase',\n          tasks: [\n            { description: 'Regular pruning', completed: true },\n            { description: 'Support installation', completed: true }\n          ],\n          completed: true\n        },\n        {\n          name: 'Flowering',\n          startWeek: 7,\n          endWeek: 9,\n          description: 'Flower development phase',\n          tasks: [\n            { description: 'Pollination', completed: false },\n            { description: 'Nutrient adjustment', completed: false }\n          ],\n          completed: false\n        }\n      ]\n    };\n    return of(mockCropCycle).pipe(delay(500));\n  }\n\n  createCropCycle(cropCycle: CropCycle): Observable<CropCycle> {\n    return of({ ...cropCycle, id: Date.now().toString() }).pipe(delay(500));\n  }\n\n  completeStage(cropCycleId: string, stageIndex: number): Observable<boolean> {\n    return of(true).pipe(delay(500));\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}