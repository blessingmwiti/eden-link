{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class LogisticsService {\n  constructor() {\n    this.systemStatus$ = new BehaviorSubject({\n      connectionStatus: 'connected',\n      powerStatus: 'on',\n      automationMode: 'auto',\n      pumps: [{\n        id: 'pump1',\n        name: 'Main Pump',\n        status: 'active',\n        flowRate: 2.5\n      }, {\n        id: 'pump2',\n        name: 'Nutrient Pump A',\n        status: 'inactive',\n        flowRate: 1.0\n      }, {\n        id: 'pump3',\n        name: 'Nutrient Pump B',\n        status: 'inactive',\n        flowRate: 1.0\n      }],\n      lastUpdated: new Date(),\n      status: 'operational',\n      message: 'System running normally'\n    });\n    this.nutrientLevels$ = new BehaviorSubject([{\n      id: 'nutrient-a',\n      name: 'Nutrient A',\n      level: 750,\n      percentage: 75,\n      unit: 'ppm',\n      status: 'normal',\n      lastUpdated: new Date()\n    }, {\n      id: 'nutrient-b',\n      name: 'Nutrient B',\n      level: 300,\n      percentage: 30,\n      unit: 'ppm',\n      status: 'low',\n      lastUpdated: new Date()\n    }]);\n    this.waterLevel$ = new BehaviorSubject({\n      current: 85,\n      capacity: 100,\n      percentage: 85,\n      status: 'normal',\n      lastUpdated: new Date()\n    });\n    this.usageHistory$ = new BehaviorSubject({\n      dates: this.generateLastSevenDays(),\n      waterUsage: [45, 50, 48, 52, 49, 47, 51],\n      nutrientAUsage: [12, 15, 13, 14, 12, 11, 13],\n      nutrientBUsage: [10, 12, 11, 13, 11, 10, 12]\n    });\n  }\n  generateLastSevenDays() {\n    const dates = [];\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      dates.push(date.toLocaleDateString());\n    }\n    return dates;\n  }\n  getSystemStatus() {\n    return this.systemStatus$.asObservable();\n  }\n  getNutrientLevels() {\n    return this.nutrientLevels$.asObservable();\n  }\n  getWaterLevel() {\n    return this.waterLevel$.asObservable();\n  }\n  getUsageHistory() {\n    return this.usageHistory$.asObservable();\n  }\n  setAutomationMode(mode) {\n    const currentStatus = this.systemStatus$.getValue();\n    const updatedStatus = {\n      ...currentStatus,\n      automationMode: mode,\n      lastUpdated: new Date()\n    };\n    this.systemStatus$.next(updatedStatus);\n    return this.systemStatus$.asObservable();\n  }\n  activatePump(pumpId) {\n    const currentStatus = this.systemStatus$.getValue();\n    const updatedPumps = currentStatus.pumps.map(pump => pump.id === pumpId ? {\n      ...pump,\n      status: pump.status === 'active' ? 'inactive' : 'active'\n    } : pump);\n    const updatedStatus = {\n      ...currentStatus,\n      pumps: updatedPumps,\n      lastUpdated: new Date()\n    };\n    this.systemStatus$.next(updatedStatus);\n    return this.systemStatus$.asObservable();\n  }\n  confirmNutrientRefill(nutrientId) {\n    const currentLevels = this.nutrientLevels$.getValue();\n    const updatedLevels = currentLevels.map(nutrient => nutrient.id === nutrientId ? {\n      ...nutrient,\n      level: 1000,\n      percentage: 100,\n      status: 'normal',\n      lastUpdated: new Date()\n    } : nutrient);\n    this.nutrientLevels$.next(updatedLevels);\n    return this.nutrientLevels$.asObservable();\n  }\n  confirmWaterRefill() {\n    const updatedWaterLevel = {\n      ...this.waterLevel$.getValue(),\n      current: 100,\n      percentage: 100,\n      status: 'normal',\n      lastUpdated: new Date()\n    };\n    this.waterLevel$.next(updatedWaterLevel);\n    return this.waterLevel$.asObservable();\n  }\n  static {\n    this.ɵfac = function LogisticsService_Factory(t) {\n      return new (t || LogisticsService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LogisticsService,\n      factory: LogisticsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","LogisticsService","constructor","systemStatus$","connectionStatus","powerStatus","automationMode","pumps","id","name","status","flowRate","lastUpdated","Date","message","nutrientLevels$","level","percentage","unit","waterLevel$","current","capacity","usageHistory$","dates","generateLastSevenDays","waterUsage","nutrientAUsage","nutrientBUsage","i","date","setDate","getDate","push","toLocaleDateString","getSystemStatus","asObservable","getNutrientLevels","getWaterLevel","getUsageHistory","setAutomationMode","mode","currentStatus","getValue","updatedStatus","next","activatePump","pumpId","updatedPumps","map","pump","confirmNutrientRefill","nutrientId","currentLevels","updatedLevels","nutrient","confirmWaterRefill","updatedWaterLevel","factory","ɵfac","providedIn"],"sources":["/home/injinia/eden-link/src/app/core/services/logistics.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { SystemStatus, NutrientLevel, WaterLevel, UsageHistory, PumpStatus } from '../models/system-status.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogisticsService {\n  private systemStatus$ = new BehaviorSubject<SystemStatus>({\n    connectionStatus: 'connected',\n    powerStatus: 'on',\n    automationMode: 'auto',\n    pumps: [\n      { id: 'pump1', name: 'Main Pump', status: 'active' as const, flowRate: 2.5 },\n      { id: 'pump2', name: 'Nutrient Pump A', status: 'inactive' as const, flowRate: 1.0 },\n      { id: 'pump3', name: 'Nutrient Pump B', status: 'inactive' as const, flowRate: 1.0 }\n    ],\n    lastUpdated: new Date(),\n    status: 'operational',\n    message: 'System running normally'\n  });\n\n  private nutrientLevels$ = new BehaviorSubject<NutrientLevel[]>([\n    {\n      id: 'nutrient-a',\n      name: 'Nutrient A',\n      level: 750,\n      percentage: 75,\n      unit: 'ppm',\n      status: 'normal' as const,\n      lastUpdated: new Date()\n      },\n      {\n      id: 'nutrient-b',\n      name: 'Nutrient B',\n      level: 300,\n      percentage: 30,\n      unit: 'ppm',\n      status: 'low' as const,\n      lastUpdated: new Date()\n    }\n  ]);\n\n  private waterLevel$ = new BehaviorSubject<WaterLevel>({\n    current: 85,\n    capacity: 100,\n    percentage: 85,\n    status: 'normal' as const,\n    lastUpdated: new Date()\n  });\n\n  private usageHistory$ = new BehaviorSubject<UsageHistory>({\n    dates: this.generateLastSevenDays(),\n    waterUsage: [45, 50, 48, 52, 49, 47, 51],\n    nutrientAUsage: [12, 15, 13, 14, 12, 11, 13],\n    nutrientBUsage: [10, 12, 11, 13, 11, 10, 12]\n  });\n\n  constructor() {}\n\n  private generateLastSevenDays(): string[] {\n    const dates: string[] = [];\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      dates.push(date.toLocaleDateString());\n    }\n    return dates;\n  }\n\n  getSystemStatus(): Observable<SystemStatus> {\n    return this.systemStatus$.asObservable();\n  }\n\n  getNutrientLevels(): Observable<NutrientLevel[]> {\n    return this.nutrientLevels$.asObservable();\n  }\n\n  getWaterLevel(): Observable<WaterLevel> {\n    return this.waterLevel$.asObservable();\n  }\n\n  getUsageHistory(): Observable<UsageHistory> {\n    return this.usageHistory$.asObservable();\n  }\n\n  setAutomationMode(mode: 'auto' | 'manual'): Observable<SystemStatus> {\n    const currentStatus = this.systemStatus$.getValue();\n    const updatedStatus = {\n      ...currentStatus,\n      automationMode: mode,\n      lastUpdated: new Date()\n    };\n    this.systemStatus$.next(updatedStatus);\n    return this.systemStatus$.asObservable();\n  }\n\n  activatePump(pumpId: string): Observable<SystemStatus> {\n    const currentStatus = this.systemStatus$.getValue();\n    const updatedPumps = currentStatus.pumps.map(pump => \n      pump.id === pumpId \n        ? { ...pump, status: pump.status === 'active' ? ('inactive' as const) : ('active' as const) }\n        : pump\n    );\n    \n    const updatedStatus: SystemStatus = {\n      ...currentStatus,\n      pumps: updatedPumps,\n      lastUpdated: new Date()\n    };\n    \n    this.systemStatus$.next(updatedStatus);\n    return this.systemStatus$.asObservable();\n  }\n\n  confirmNutrientRefill(nutrientId: string): Observable<NutrientLevel[]> {\n    const currentLevels = this.nutrientLevels$.getValue();\n    const updatedLevels = currentLevels.map(nutrient =>\n      nutrient.id === nutrientId\n        ? {\n            ...nutrient,\n            level: 1000,\n            percentage: 100,\n            status: 'normal' as const,\n            lastUpdated: new Date()\n          }\n        : nutrient\n    );\n    \n    this.nutrientLevels$.next(updatedLevels);\n    return this.nutrientLevels$.asObservable();\n  }\n\n  confirmWaterRefill(): Observable<WaterLevel> {\n    const updatedWaterLevel = {\n      ...this.waterLevel$.getValue(),\n      current: 100,\n      percentage: 100,\n      status: 'normal' as const,\n      lastUpdated: new Date()\n    };\n    \n    this.waterLevel$.next(updatedWaterLevel);\n    return this.waterLevel$.asObservable();\n  }\n}"],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAOlD,OAAM,MAAOC,gBAAgB;EAmD3BC,YAAA;IAlDQ,KAAAC,aAAa,GAAG,IAAIH,eAAe,CAAe;MACxDI,gBAAgB,EAAE,WAAW;MAC7BC,WAAW,EAAE,IAAI;MACjBC,cAAc,EAAE,MAAM;MACtBC,KAAK,EAAE,CACL;QAAEC,EAAE,EAAE,OAAO;QAAEC,IAAI,EAAE,WAAW;QAAEC,MAAM,EAAE,QAAiB;QAAEC,QAAQ,EAAE;MAAG,CAAE,EAC5E;QAAEH,EAAE,EAAE,OAAO;QAAEC,IAAI,EAAE,iBAAiB;QAAEC,MAAM,EAAE,UAAmB;QAAEC,QAAQ,EAAE;MAAG,CAAE,EACpF;QAAEH,EAAE,EAAE,OAAO;QAAEC,IAAI,EAAE,iBAAiB;QAAEC,MAAM,EAAE,UAAmB;QAAEC,QAAQ,EAAE;MAAG,CAAE,CACrF;MACDC,WAAW,EAAE,IAAIC,IAAI,EAAE;MACvBH,MAAM,EAAE,aAAa;MACrBI,OAAO,EAAE;KACV,CAAC;IAEM,KAAAC,eAAe,GAAG,IAAIf,eAAe,CAAkB,CAC7D;MACEQ,EAAE,EAAE,YAAY;MAChBC,IAAI,EAAE,YAAY;MAClBO,KAAK,EAAE,GAAG;MACVC,UAAU,EAAE,EAAE;MACdC,IAAI,EAAE,KAAK;MACXR,MAAM,EAAE,QAAiB;MACzBE,WAAW,EAAE,IAAIC,IAAI;KACpB,EACD;MACAL,EAAE,EAAE,YAAY;MAChBC,IAAI,EAAE,YAAY;MAClBO,KAAK,EAAE,GAAG;MACVC,UAAU,EAAE,EAAE;MACdC,IAAI,EAAE,KAAK;MACXR,MAAM,EAAE,KAAc;MACtBE,WAAW,EAAE,IAAIC,IAAI;KACtB,CACF,CAAC;IAEM,KAAAM,WAAW,GAAG,IAAInB,eAAe,CAAa;MACpDoB,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,GAAG;MACbJ,UAAU,EAAE,EAAE;MACdP,MAAM,EAAE,QAAiB;MACzBE,WAAW,EAAE,IAAIC,IAAI;KACtB,CAAC;IAEM,KAAAS,aAAa,GAAG,IAAItB,eAAe,CAAe;MACxDuB,KAAK,EAAE,IAAI,CAACC,qBAAqB,EAAE;MACnCC,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MACxCC,cAAc,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;MAC5CC,cAAc,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;KAC5C,CAAC;EAEa;EAEPH,qBAAqBA,CAAA;IAC3B,MAAMD,KAAK,GAAa,EAAE;IAC1B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMC,IAAI,GAAG,IAAIhB,IAAI,EAAE;MACvBgB,IAAI,CAACC,OAAO,CAACD,IAAI,CAACE,OAAO,EAAE,GAAGH,CAAC,CAAC;MAChCL,KAAK,CAACS,IAAI,CAACH,IAAI,CAACI,kBAAkB,EAAE,CAAC;;IAEvC,OAAOV,KAAK;EACd;EAEAW,eAAeA,CAAA;IACb,OAAO,IAAI,CAAC/B,aAAa,CAACgC,YAAY,EAAE;EAC1C;EAEAC,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACrB,eAAe,CAACoB,YAAY,EAAE;EAC5C;EAEAE,aAAaA,CAAA;IACX,OAAO,IAAI,CAAClB,WAAW,CAACgB,YAAY,EAAE;EACxC;EAEAG,eAAeA,CAAA;IACb,OAAO,IAAI,CAAChB,aAAa,CAACa,YAAY,EAAE;EAC1C;EAEAI,iBAAiBA,CAACC,IAAuB;IACvC,MAAMC,aAAa,GAAG,IAAI,CAACtC,aAAa,CAACuC,QAAQ,EAAE;IACnD,MAAMC,aAAa,GAAG;MACpB,GAAGF,aAAa;MAChBnC,cAAc,EAAEkC,IAAI;MACpB5B,WAAW,EAAE,IAAIC,IAAI;KACtB;IACD,IAAI,CAACV,aAAa,CAACyC,IAAI,CAACD,aAAa,CAAC;IACtC,OAAO,IAAI,CAACxC,aAAa,CAACgC,YAAY,EAAE;EAC1C;EAEAU,YAAYA,CAACC,MAAc;IACzB,MAAML,aAAa,GAAG,IAAI,CAACtC,aAAa,CAACuC,QAAQ,EAAE;IACnD,MAAMK,YAAY,GAAGN,aAAa,CAAClC,KAAK,CAACyC,GAAG,CAACC,IAAI,IAC/CA,IAAI,CAACzC,EAAE,KAAKsC,MAAM,GACd;MAAE,GAAGG,IAAI;MAAEvC,MAAM,EAAEuC,IAAI,CAACvC,MAAM,KAAK,QAAQ,GAAI,UAAoB,GAAI;IAAkB,CAAE,GAC3FuC,IAAI,CACT;IAED,MAAMN,aAAa,GAAiB;MAClC,GAAGF,aAAa;MAChBlC,KAAK,EAAEwC,YAAY;MACnBnC,WAAW,EAAE,IAAIC,IAAI;KACtB;IAED,IAAI,CAACV,aAAa,CAACyC,IAAI,CAACD,aAAa,CAAC;IACtC,OAAO,IAAI,CAACxC,aAAa,CAACgC,YAAY,EAAE;EAC1C;EAEAe,qBAAqBA,CAACC,UAAkB;IACtC,MAAMC,aAAa,GAAG,IAAI,CAACrC,eAAe,CAAC2B,QAAQ,EAAE;IACrD,MAAMW,aAAa,GAAGD,aAAa,CAACJ,GAAG,CAACM,QAAQ,IAC9CA,QAAQ,CAAC9C,EAAE,KAAK2C,UAAU,GACtB;MACE,GAAGG,QAAQ;MACXtC,KAAK,EAAE,IAAI;MACXC,UAAU,EAAE,GAAG;MACfP,MAAM,EAAE,QAAiB;MACzBE,WAAW,EAAE,IAAIC,IAAI;KACtB,GACDyC,QAAQ,CACb;IAED,IAAI,CAACvC,eAAe,CAAC6B,IAAI,CAACS,aAAa,CAAC;IACxC,OAAO,IAAI,CAACtC,eAAe,CAACoB,YAAY,EAAE;EAC5C;EAEAoB,kBAAkBA,CAAA;IAChB,MAAMC,iBAAiB,GAAG;MACxB,GAAG,IAAI,CAACrC,WAAW,CAACuB,QAAQ,EAAE;MAC9BtB,OAAO,EAAE,GAAG;MACZH,UAAU,EAAE,GAAG;MACfP,MAAM,EAAE,QAAiB;MACzBE,WAAW,EAAE,IAAIC,IAAI;KACtB;IAED,IAAI,CAACM,WAAW,CAACyB,IAAI,CAACY,iBAAiB,CAAC;IACxC,OAAO,IAAI,CAACrC,WAAW,CAACgB,YAAY,EAAE;EACxC;;;uBAzIWlC,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAAwD,OAAA,EAAhBxD,gBAAgB,CAAAyD,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}