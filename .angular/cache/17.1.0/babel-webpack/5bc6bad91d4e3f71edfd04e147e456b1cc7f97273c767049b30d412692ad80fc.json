{"ast":null,"code":"import { interval, Subject, combineLatest } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/sensor.service\";\nimport * as i2 from \"../../core/services/ai.service\";\nimport * as i3 from \"../../core/services/crop.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../shared/components/chart/chart.component\";\nimport * as i6 from \"../../shared/components/metric-card/metric-card.component\";\nfunction DashboardComponent_app_chart_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-chart\", 25);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"chartData\", ctx_r0.chartData)(\"chartOptions\", ctx_r0.chartOptions);\n  }\n}\nfunction DashboardComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26)(1, \"span\", 27);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 28);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.currentCrop.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Planted: \", i0.ɵɵpipeBind2(5, 3, ctx_r1.currentCrop.plantedDate, \"mediumDate\"), \" \\u2022 Expected Harvest: \", i0.ɵɵpipeBind2(6, 6, ctx_r1.currentCrop.expectedHarvestDate, \"mediumDate\"), \" \");\n  }\n}\nfunction DashboardComponent_div_36_div_6_div_6_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const action_r8 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(action_r8);\n  }\n}\nfunction DashboardComponent_div_36_div_6_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 38)(1, \"h4\");\n    i0.ɵɵtext(2, \"Required Actions:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, DashboardComponent_div_36_div_6_div_6_li_4_Template, 2, 1, \"li\", 39);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const stage_r3 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", stage_r3.requiredActions);\n  }\n}\nfunction DashboardComponent_div_36_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34)(1, \"div\", 35);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 36);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, DashboardComponent_div_36_div_6_div_6_Template, 5, 1, \"div\", 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const stage_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(stage_r3.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Started: \", i0.ɵɵpipeBind2(5, 3, stage_r3.startDate, \"mediumDate\"), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", stage_r3.requiredActions == null ? null : stage_r3.requiredActions.length);\n  }\n}\nconst _c0 = (a0, a1) => ({\n  \"active\": a0,\n  \"completed\": a1\n});\nfunction DashboardComponent_div_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 31)(4, \"div\", 32);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, DashboardComponent_div_36_div_6_Template, 7, 6, \"div\", 33);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const stage_r3 = ctx.$implicit;\n    const i_r4 = ctx.index;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(4, _c0, stage_r3.active, stage_r3.completed));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", stage_r3.completed ? \"\\u2713\" : i_r4 + 1, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(stage_r3.name);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", stage_r3.active);\n  }\n}\nexport class DashboardComponent {\n  constructor(sensorService, aiService, cropService) {\n    this.sensorService = sensorService;\n    this.aiService = aiService;\n    this.cropService = cropService;\n    this.destroy$ = new Subject();\n    this.updateInterval$ = interval(5000);\n    this.currentMetrics = {\n      temperature: 24,\n      humidity: 65,\n      light: 650,\n      ec: 1.8,\n      ph: 6.2\n    };\n    this.systemHealth = {\n      status: 'excellent',\n      message: 'All systems functioning optimally. Consider adjusting CO₂ levels slightly for optimal tomato growth.'\n    };\n    this.chartData = null;\n    this.chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      animation: {\n        duration: 750,\n        easing: 'easeInOutQuart'\n      },\n      scales: {\n        x: {\n          grid: {\n            color: 'rgba(0, 0, 0, 0.1)',\n            borderColor: 'rgba(0, 0, 0, 0.3)'\n          },\n          ticks: {\n            color: '#666',\n            font: {\n              size: 11\n            }\n          },\n          title: {\n            display: true,\n            text: 'Time',\n            color: '#666',\n            font: {\n              size: 12,\n              weight: 'bold'\n            }\n          }\n        },\n        y: {\n          grid: {\n            color: 'rgba(0, 0, 0, 0.1)',\n            borderColor: 'rgba(0, 0, 0, 0.3)'\n          },\n          ticks: {\n            color: '#666',\n            font: {\n              size: 11\n            }\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          position: 'top',\n          align: 'center',\n          labels: {\n            boxWidth: 15,\n            padding: 15,\n            font: {\n              size: 11\n            }\n          }\n        },\n        tooltip: {\n          mode: 'index',\n          intersect: false,\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\n          titleColor: '#000',\n          bodyColor: '#666',\n          borderColor: 'rgba(0, 0, 0, 0.1)',\n          borderWidth: 1,\n          padding: 10,\n          bodyFont: {\n            size: 11\n          },\n          titleFont: {\n            size: 12,\n            weight: 'bold'\n          }\n        }\n      },\n      interaction: {\n        mode: 'index',\n        axis: 'x',\n        intersect: false\n      }\n    };\n    this.currentCrop = null;\n    this.roadmapStages = [];\n  }\n  ngOnInit() {\n    this.loadInitialData();\n    this.setupRealTimeUpdates();\n    this.loadCurrentCrop();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  loadInitialData() {\n    this.loadSensorData();\n  }\n  setupRealTimeUpdates() {\n    this.updateInterval$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this.loadSensorData();\n    });\n  }\n  loadSensorData() {\n    // Get history for all sensor types\n    const sensorIds = ['temp-1', 'humidity-1', 'light-1', 'ec-1', 'ph-1'];\n    const histories$ = sensorIds.map(id => this.sensorService.getSensorHistory(id, 1));\n    combineLatest(histories$).pipe(takeUntil(this.destroy$), map(histories => {\n      // Update current metrics with the latest values\n      this.updateCurrentMetrics(histories);\n      // Process data for the chart\n      return this.processHistoriesIntoChartData(histories);\n    })).subscribe({\n      next: chartData => {\n        this.chartData = chartData;\n      },\n      error: error => {\n        console.error('Error loading sensor data:', error);\n        this.loadMockData();\n      }\n    });\n  }\n  updateCurrentMetrics(histories) {\n    // Get the most recent values from each history\n    const getLatestValue = history => {\n      if (!history || history.length === 0) return null;\n      const latestReading = history[history.length - 1];\n      return Number(latestReading.value);\n    };\n    const temperature = getLatestValue(histories[0]);\n    const humidity = getLatestValue(histories[1]);\n    const light = getLatestValue(histories[2]);\n    const ec = getLatestValue(histories[3]);\n    const ph = getLatestValue(histories[4]);\n    // Update current metrics with real values or fallback to defaults\n    this.currentMetrics = {\n      temperature: temperature ?? 24,\n      humidity: humidity ?? 65,\n      light: light ?? 650,\n      ec: ec ?? 1.8,\n      ph: ph ?? 6.2\n    };\n    // Update system health status based on current metrics\n    this.updateSystemHealth();\n  }\n  updateSystemHealth() {\n    const isOptimal = (value, min, max) => value >= min && value <= max;\n    const allOptimal = isOptimal(this.currentMetrics.temperature, 22, 26) && isOptimal(this.currentMetrics.humidity, 60, 70) && isOptimal(this.currentMetrics.light, 500, 800) && isOptimal(this.currentMetrics.ec, 1.5, 2.1) && isOptimal(this.currentMetrics.ph, 5.8, 6.6);\n    const someWarning = !isOptimal(this.currentMetrics.temperature, 20, 28) || !isOptimal(this.currentMetrics.humidity, 55, 75) || !isOptimal(this.currentMetrics.light, 400, 900) || !isOptimal(this.currentMetrics.ec, 1.3, 2.3) || !isOptimal(this.currentMetrics.ph, 5.5, 6.9);\n    if (allOptimal) {\n      this.systemHealth = {\n        status: 'excellent',\n        message: 'All systems functioning optimally. Plant growth conditions are ideal.'\n      };\n    } else if (someWarning) {\n      this.systemHealth = {\n        status: 'warning',\n        message: 'Some parameters are outside optimal range. Consider adjusting environmental controls.'\n      };\n    } else {\n      this.systemHealth = {\n        status: 'critical',\n        message: 'Critical: Multiple parameters require immediate attention.'\n      };\n    }\n  }\n  processHistoriesIntoChartData(histories) {\n    const labels = histories[0]?.map(h => new Date(h.timestamp).toLocaleTimeString()) ?? [];\n    const datasets = [{\n      label: 'Temperature (°C)',\n      data: histories[0]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#006d5b',\n      backgroundColor: 'rgba(0, 109, 91, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'Humidity (%)',\n      data: histories[1]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#8d90bb',\n      backgroundColor: 'rgba(141, 144, 187, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'Light (lux/100)',\n      data: histories[2]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#ffc107',\n      backgroundColor: 'rgba(255, 193, 7, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'EC (mS/cm)',\n      data: histories[3]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#dc3545',\n      backgroundColor: 'rgba(220, 53, 69, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'pH',\n      data: histories[4]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#6610f2',\n      backgroundColor: 'rgba(102, 16, 242, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }];\n    return {\n      labels,\n      datasets\n    };\n  }\n  loadMockData() {\n    const now = new Date();\n    const labels = Array.from({\n      length: 12\n    }, (_, i) => {\n      const d = new Date(now.getTime() - (11 - i) * 5000);\n      return d.toLocaleTimeString('en-US', {\n        hour12: false\n      });\n    });\n    // Generate random values that stay within realistic ranges\n    const temperature = 22 + Math.random() * 4;\n    const humidity = 60 + Math.random() * 12;\n    const light = Math.max(0, 5 + Math.random() * 3) * 100;\n    const ec = 1.5 + Math.random() * 0.6;\n    const ph = 5.8 + Math.random() * 0.8;\n    // Update current metrics with the latest mock values\n    this.currentMetrics = {\n      temperature,\n      humidity,\n      light,\n      ec,\n      ph\n    };\n    // Update system health based on new values\n    this.updateSystemHealth();\n    this.chartData = {\n      labels,\n      datasets: [{\n        label: 'Temperature (°C)',\n        data: Array.from({\n          length: 12\n        }, (_, i) => i === 11 ? temperature : 22 + Math.random() * 4),\n        borderColor: '#006d5b',\n        backgroundColor: 'rgba(0, 109, 91, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'Humidity (%)',\n        data: Array.from({\n          length: 12\n        }, (_, i) => i === 11 ? humidity : 60 + Math.random() * 12),\n        borderColor: '#8d90bb',\n        backgroundColor: 'rgba(141, 144, 187, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'Light (lux/100)',\n        data: Array.from({\n          length: 12\n        }, (_, i) => i === 11 ? light / 100 : Math.max(0, 5 + Math.random() * 3)),\n        borderColor: '#ffc107',\n        backgroundColor: 'rgba(255, 193, 7, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'EC (mS/cm)',\n        data: Array.from({\n          length: 12\n        }, (_, i) => i === 11 ? ec : 1.5 + Math.random() * 0.6),\n        borderColor: '#dc3545',\n        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'pH',\n        data: Array.from({\n          length: 12\n        }, (_, i) => i === 11 ? ph : 5.8 + Math.random() * 0.8),\n        borderColor: '#6610f2',\n        backgroundColor: 'rgba(102, 16, 242, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }]\n    };\n  }\n  startIrrigation() {\n    this.sensorService.startIrrigation().subscribe(() => {\n      console.log('Irrigation started');\n    }, error => {\n      console.error('Error starting irrigation:', error);\n    });\n  }\n  exportData() {\n    this.sensorService.exportData().subscribe(data => {\n      const blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: 'application/json'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'sensor-data.json';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }, error => {\n      console.error('Error exporting data:', error);\n    });\n  }\n  loadCurrentCrop() {\n    this.cropService.getCrops({\n      status: 'active'\n    }).pipe(takeUntil(this.destroy$)).subscribe({\n      next: crops => {\n        if (crops.length > 0) {\n          this.currentCrop = crops[0]; // Get the first active crop\n          this.updateRoadmapStages();\n        }\n      },\n      error: error => {\n        console.error('Error loading current crop:', error);\n      }\n    });\n  }\n  updateRoadmapStages() {\n    if (!this.currentCrop) return;\n    const standardStages = ['Germination', 'Seedling', 'Vegetation', 'Flowering', 'Fruiting', 'Harvest'];\n    const currentStageIndex = standardStages.findIndex(stage => stage.toLowerCase() === this.currentCrop?.currentStage.name.toLowerCase());\n    this.roadmapStages = standardStages.map((stageName, index) => {\n      const isCurrentStage = index === currentStageIndex;\n      const isCompleted = index < currentStageIndex;\n      return {\n        name: stageName,\n        completed: isCompleted,\n        active: isCurrentStage,\n        description: isCurrentStage ? this.currentCrop?.currentStage.description : undefined,\n        startDate: isCurrentStage ? this.currentCrop?.currentStage.startDate : undefined,\n        requiredActions: isCurrentStage ? this.currentCrop?.currentStage.requiredActions : undefined\n      };\n    });\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.SensorService), i0.ɵɵdirectiveInject(i2.AiService), i0.ɵɵdirectiveInject(i3.CropService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 37,\n      vars: 28,\n      consts: [[1, \"dashboard-container\"], [1, \"dashboard-header\"], [1, \"dashboard-title\"], [1, \"dashboard-actions\"], [1, \"btn\", \"btn-outline\", 3, \"click\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"metrics-grid\"], [\"name\", \"Temperature\", \"icon\", \"\\uD83C\\uDF21\\uFE0F\", \"unit\", \"\\u00B0C\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"Humidity\", \"icon\", \"\\uD83D\\uDCA7\", \"unit\", \"%\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"Light\", \"icon\", \"\\u2600\\uFE0F\", \"unit\", \" lux\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"EC\", \"icon\", \"\\u26A1\", \"unit\", \" mS/cm\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"pH\", \"icon\", \"\\uD83E\\uDDEA\", \"unit\", \"\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [1, \"chart-container\"], [3, \"chartData\", \"chartOptions\", 4, \"ngIf\"], [1, \"system-health\", 3, \"ngClass\"], [1, \"system-health-icon\"], [1, \"system-health-content\"], [1, \"system-health-title\"], [1, \"system-health-message\"], [\"class\", \"current-crop-info\", 4, \"ngIf\"], [1, \"crop-roadmap\"], [\"class\", \"roadmap-step\", 4, \"ngFor\", \"ngForOf\"], [3, \"chartData\", \"chartOptions\"], [1, \"current-crop-info\"], [1, \"crop-name\"], [1, \"crop-dates\"], [1, \"roadmap-step\"], [1, \"step-icon\", 3, \"ngClass\"], [1, \"step-content\"], [1, \"step-label\"], [\"class\", \"step-details\", 4, \"ngIf\"], [1, \"step-details\"], [1, \"stage-description\"], [1, \"stage-date\"], [\"class\", \"required-actions\", 4, \"ngIf\"], [1, \"required-actions\"], [4, \"ngFor\", \"ngForOf\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n          i0.ɵɵtext(3, \"Dashboard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_5_listener() {\n            return ctx.exportData();\n          });\n          i0.ɵɵtext(6, \"Export Data\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_7_listener() {\n            return ctx.startIrrigation();\n          });\n          i0.ɵɵtext(8, \"Start Irrigation\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 7)(11, \"h2\", 8);\n          i0.ɵɵtext(12, \"Real-Time Charts\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 9);\n          i0.ɵɵelement(14, \"app-metric-card\", 10)(15, \"app-metric-card\", 11)(16, \"app-metric-card\", 12)(17, \"app-metric-card\", 13)(18, \"app-metric-card\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"div\", 15);\n          i0.ɵɵtemplate(20, DashboardComponent_app_chart_20_Template, 1, 2, \"app-chart\", 16);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"div\", 17)(22, \"div\", 18);\n          i0.ɵɵtext(23, \"\\u2713\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"div\", 19)(25, \"div\", 20);\n          i0.ɵɵtext(26);\n          i0.ɵɵpipe(27, \"titlecase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"div\", 21);\n          i0.ɵɵtext(29);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(30, \"div\", 6)(31, \"div\", 7)(32, \"h2\", 8);\n          i0.ɵɵtext(33, \"Crop Cycle Roadmap\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(34, DashboardComponent_div_34_Template, 7, 9, \"div\", 22);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"div\", 23);\n          i0.ɵɵtemplate(36, DashboardComponent_div_36_Template, 7, 7, \"div\", 24);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(14);\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.temperature)(\"minOptimal\", 22)(\"maxOptimal\", 26)(\"maxRange\", 35);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.humidity)(\"minOptimal\", 60)(\"maxOptimal\", 70)(\"maxRange\", 100);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.light)(\"minOptimal\", 500)(\"maxOptimal\", 800)(\"maxRange\", 1000);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.ec)(\"minOptimal\", 1.5)(\"maxOptimal\", 2.1)(\"maxRange\", 3);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.ph)(\"minOptimal\", 5.8)(\"maxOptimal\", 6.6)(\"maxRange\", 14);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.chartData);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", \"system-health-\" + ctx.systemHealth.status);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"System Health: \", i0.ɵɵpipeBind1(27, 26, ctx.systemHealth.status), \"\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(ctx.systemHealth.message);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.currentCrop);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.roadmapStages);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i5.ChartComponent, i6.MetricCardComponent, i4.TitleCasePipe, i4.DatePipe],\n      styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n    padding: 20px;\\n  }\\n  \\n  .dashboard-header[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    margin-bottom: 24px;\\n  }\\n  \\n  .dashboard-title[_ngcontent-%COMP%] {\\n    margin: 0;\\n    font-size: 24px;\\n    color: #212529;\\n  }\\n  \\n  .dashboard-actions[_ngcontent-%COMP%] {\\n    display: flex;\\n    gap: 12px;\\n  }\\n  \\n  .btn[_ngcontent-%COMP%] {\\n    padding: 8px 16px;\\n    border-radius: 6px;\\n    border: none;\\n    font-size: 14px;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s;\\n  }\\n  \\n  .btn-primary[_ngcontent-%COMP%] {\\n    background-color: #008e73;\\n    color: #ffffff;\\n  }\\n  \\n  .btn-primary[_ngcontent-%COMP%]:hover {\\n    background-color: #00594d;\\n  }\\n  \\n  .btn-outline[_ngcontent-%COMP%] {\\n    background-color: transparent;\\n    border: 1px solid #006d5b;\\n    color: #006d5b;\\n  }\\n  \\n  .btn-outline[_ngcontent-%COMP%]:hover {\\n    background-color: #006d5b;\\n    color: #ffffff;\\n  }\\n  \\n  .card[_ngcontent-%COMP%] {\\n    background: white;\\n    border-radius: 12px;\\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\\n    margin-bottom: 24px;\\n    overflow: hidden;\\n  }\\n  \\n  .card-header[_ngcontent-%COMP%] {\\n    padding: 16px 20px;\\n    border-bottom: 1px solid #e9ecef;\\n  }\\n  \\n  .card-title[_ngcontent-%COMP%] {\\n    margin: 0;\\n    font-size: 18px;\\n    color: #343a40;\\n  }\\n  \\n  .sensors-grid[_ngcontent-%COMP%] {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\\n    gap: 15px;\\n  }\\n  \\n  .metrics-grid[_ngcontent-%COMP%] {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\\n    gap: 16px;\\n    padding: 20px;\\n    background: #f8f9fa;\\n    border-bottom: 1px solid #e9ecef;\\n  }\\n  \\n  .chart-container[_ngcontent-%COMP%] {\\n    padding: 20px;\\n    height: 400px;\\n  }\\n  \\n  .system-health[_ngcontent-%COMP%] {\\n    display: flex;\\n    align-items: center;\\n    gap: 16px;\\n    padding: 16px 20px;\\n    background: #f8f9fa;\\n    border-top: 1px solid #e9ecef;\\n  }\\n  \\n  .system-health-warning[_ngcontent-%COMP%] {\\n    background-color: rgba(255, 193, 7, 0.1);\\n    border-left-color: #ffc107;\\n  }\\n  \\n  .system-health-danger[_ngcontent-%COMP%] {\\n    background-color: rgba(220, 53, 69, 0.1);\\n    border-left-color: #dc3545;\\n  }\\n  \\n  .system-health-icon[_ngcontent-%COMP%] {\\n    width: 32px;\\n    height: 32px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    background: #28a745;\\n    color: white;\\n    border-radius: 50%;\\n    font-size: 18px;\\n  }\\n  \\n  .system-health-warning[_ngcontent-%COMP%]   .system-health-icon[_ngcontent-%COMP%] {\\n    background-color: #ffc107;\\n    color: #212529;\\n  }\\n  \\n  .system-health-danger[_ngcontent-%COMP%]   .system-health-icon[_ngcontent-%COMP%] {\\n    background-color: #dc3545;\\n  }\\n  \\n  .system-health-content[_ngcontent-%COMP%] {\\n    flex: 1;\\n  }\\n  \\n  .system-health-title[_ngcontent-%COMP%] {\\n    font-weight: 500;\\n    color: #212529;\\n    margin-bottom: 4px;\\n  }\\n  \\n  .system-health-message[_ngcontent-%COMP%] {\\n    color: #6c757d;\\n    font-size: 14px;\\n  }\\n  \\n  .crop-roadmap[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: space-between;\\n    padding: 20px;\\n    overflow-x: auto;\\n  }\\n  \\n  .roadmap-step[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    gap: 8px;\\n    min-width: 100px;\\n  }\\n  \\n  .roadmap-step[_ngcontent-%COMP%]::before {\\n    content: \\\"\\\";\\n    height: 3px;\\n    width: 100%;\\n    background-color: #dee2e6;\\n    position: absolute;\\n    top: 15px;\\n    left: 50%;\\n    z-index: 0;\\n  }\\n  \\n  .roadmap-step[_ngcontent-%COMP%]:first-child::before {\\n    width: 50%;\\n    left: 50%;\\n  }\\n  \\n  .roadmap-step[_ngcontent-%COMP%]:last-child::before {\\n    width: 50%;\\n    left: 0;\\n  }\\n  \\n  .step-icon[_ngcontent-%COMP%] {\\n    width: 32px;\\n    height: 32px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    background: #e9ecef;\\n    border-radius: 50%;\\n    color: #6c757d;\\n  }\\n  \\n  .step-icon.active[_ngcontent-%COMP%] {\\n    background: #007bff;\\n    color: white;\\n  }\\n  \\n  .step-icon.completed[_ngcontent-%COMP%] {\\n    background: #28a745;\\n    color: white;\\n  }\\n  \\n  .step-label[_ngcontent-%COMP%] {\\n    font-size: 14px;\\n    color: #495057;\\n    text-align: center;\\n  }\\n  \\n  @media (max-width: 768px) {\\n    .sensors-grid[_ngcontent-%COMP%] {\\n      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\\n    }\\n    \\n    .crop-roadmap[_ngcontent-%COMP%] {\\n      flex-wrap: wrap;\\n    }\\n    \\n    .roadmap-step[_ngcontent-%COMP%] {\\n      flex: 0 0 33.333%;\\n      margin-bottom: 20px;\\n    }\\n    \\n    .roadmap-step[_ngcontent-%COMP%]::before {\\n      display: none;\\n    }\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n    });\n  }\n}","map":{"version":3,"names":["interval","Subject","combineLatest","takeUntil","map","i0","ɵɵelement","ɵɵproperty","ctx_r0","chartData","chartOptions","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r1","currentCrop","name","ɵɵtextInterpolate2","ɵɵpipeBind2","plantedDate","expectedHarvestDate","action_r8","ɵɵtemplate","DashboardComponent_div_36_div_6_div_6_li_4_Template","stage_r3","requiredActions","DashboardComponent_div_36_div_6_div_6_Template","description","ɵɵtextInterpolate1","startDate","length","DashboardComponent_div_36_div_6_Template","ɵɵpureFunction2","_c0","active","completed","i_r4","DashboardComponent","constructor","sensorService","aiService","cropService","destroy$","updateInterval$","currentMetrics","temperature","humidity","light","ec","ph","systemHealth","status","message","responsive","maintainAspectRatio","animation","duration","easing","scales","x","grid","color","borderColor","ticks","font","size","title","display","text","weight","y","plugins","legend","position","align","labels","boxWidth","padding","tooltip","mode","intersect","backgroundColor","titleColor","bodyColor","borderWidth","bodyFont","titleFont","interaction","axis","roadmapStages","ngOnInit","loadInitialData","setupRealTimeUpdates","loadCurrentCrop","ngOnDestroy","next","complete","loadSensorData","pipe","subscribe","sensorIds","histories$","id","getSensorHistory","histories","updateCurrentMetrics","processHistoriesIntoChartData","error","console","loadMockData","getLatestValue","history","latestReading","Number","value","updateSystemHealth","isOptimal","min","max","allOptimal","someWarning","h","Date","timestamp","toLocaleTimeString","datasets","label","data","tension","fill","now","Array","from","_","i","d","getTime","hour12","Math","random","startIrrigation","log","exportData","blob","Blob","JSON","stringify","type","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","getCrops","crops","updateRoadmapStages","standardStages","currentStageIndex","findIndex","stage","toLowerCase","currentStage","stageName","index","isCurrentStage","isCompleted","undefined","ɵɵdirectiveInject","i1","SensorService","i2","AiService","i3","CropService","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","ɵɵlistener","DashboardComponent_Template_button_click_5_listener","DashboardComponent_Template_button_click_7_listener","DashboardComponent_app_chart_20_Template","DashboardComponent_div_34_Template","DashboardComponent_div_36_Template","ɵɵpipeBind1"],"sources":["/home/injinia/eden-link/src/app/features/dashboard/dashboard.component.ts","/home/injinia/eden-link/src/app/features/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { SensorService } from '../../core/services/sensor.service';\nimport { AiService } from '../../core/services/ai.service';\nimport { CropService } from '../../core/services/crop.service';\nimport { interval, Subject, combineLatest } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\nimport { Sensor } from '../../core/models/sensor.model';\nimport { ChartConfiguration } from 'chart.js';\nimport { Crop, CropStage } from '../../core/models/crop.model';\n\ninterface CurrentMetrics {\n  temperature: number;\n  humidity: number;\n  light: number;\n  ec: number;\n  ph: number;\n}\n\ninterface ChartData {\n  labels: string[];\n  datasets: Array<{\n    label: string;\n    data: number[];\n    borderColor: string;\n    backgroundColor: string;\n    tension: number;\n    fill: boolean;\n    borderWidth: number;\n  }>;\n}\n\ninterface RoadmapStage {\n  name: string;\n  completed: boolean;\n  active: boolean;\n  description?: string;\n  startDate?: Date;\n  requiredActions?: string[];\n}\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private updateInterval$ = interval(5000);\n\n  currentMetrics: CurrentMetrics = {\n    temperature: 24,\n    humidity: 65,\n    light: 650,\n    ec: 1.8,\n    ph: 6.2\n  };\n\n  systemHealth = {\n    status: 'excellent',\n    message: 'All systems functioning optimally. Consider adjusting CO₂ levels slightly for optimal tomato growth.'\n  };\n\n  chartData: ChartData | null = null;\n  \n  chartOptions: ChartConfiguration['options'] = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: 750,\n      easing: 'easeInOutQuart'\n    },\n    scales: {\n      x: {\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)',\n          borderColor: 'rgba(0, 0, 0, 0.3)'\n        },\n        ticks: {\n          color: '#666',\n          font: {\n            size: 11\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time',\n          color: '#666',\n          font: {\n            size: 12,\n            weight: 'bold'\n          }\n        }\n      },\n      y: {\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)',\n          borderColor: 'rgba(0, 0, 0, 0.3)'\n        },\n        ticks: {\n          color: '#666',\n          font: {\n            size: 11\n          }\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n        align: 'center',\n        labels: {\n          boxWidth: 15,\n          padding: 15,\n          font: {\n            size: 11\n          }\n        }\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        backgroundColor: 'rgba(255, 255, 255, 0.9)',\n        titleColor: '#000',\n        bodyColor: '#666',\n        borderColor: 'rgba(0, 0, 0, 0.1)',\n        borderWidth: 1,\n        padding: 10,\n        bodyFont: {\n          size: 11\n        },\n        titleFont: {\n          size: 12,\n          weight: 'bold'\n        }\n      }\n    },\n    interaction: {\n      mode: 'index',\n      axis: 'x',\n      intersect: false\n    }\n  };\n\n  currentCrop: Crop | null = null;\n  roadmapStages: RoadmapStage[] = [];\n\n  constructor(\n    private sensorService: SensorService,\n    private aiService: AiService,\n    private cropService: CropService\n  ) {}\n\n  ngOnInit(): void {\n    this.loadInitialData();\n    this.setupRealTimeUpdates();\n    this.loadCurrentCrop();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private loadInitialData(): void {\n    this.loadSensorData();\n  }\n\n  private setupRealTimeUpdates(): void {\n    this.updateInterval$.pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(() => {\n      this.loadSensorData();\n    });\n  }\n\n  private loadSensorData(): void {\n    // Get history for all sensor types\n    const sensorIds = ['temp-1', 'humidity-1', 'light-1', 'ec-1', 'ph-1'];\n    const histories$ = sensorIds.map(id => this.sensorService.getSensorHistory(id, 1));\n\n    combineLatest(histories$).pipe(\n      takeUntil(this.destroy$),\n      map(histories => {\n        // Update current metrics with the latest values\n        this.updateCurrentMetrics(histories);\n        // Process data for the chart\n        return this.processHistoriesIntoChartData(histories);\n      })\n    ).subscribe({\n      next: (chartData: ChartData) => {\n        this.chartData = chartData;\n      },\n      error: (error: Error) => {\n        console.error('Error loading sensor data:', error);\n        this.loadMockData();\n      }\n    });\n  }\n\n  private updateCurrentMetrics(histories: any[][]): void {\n    // Get the most recent values from each history\n    const getLatestValue = (history: any[]) => {\n      if (!history || history.length === 0) return null;\n      const latestReading = history[history.length - 1];\n      return Number(latestReading.value);\n    };\n\n    const temperature = getLatestValue(histories[0]);\n    const humidity = getLatestValue(histories[1]);\n    const light = getLatestValue(histories[2]);\n    const ec = getLatestValue(histories[3]);\n    const ph = getLatestValue(histories[4]);\n\n    // Update current metrics with real values or fallback to defaults\n    this.currentMetrics = {\n      temperature: temperature ?? 24,\n      humidity: humidity ?? 65,\n      light: light ?? 650,\n      ec: ec ?? 1.8,\n      ph: ph ?? 6.2\n    };\n\n    // Update system health status based on current metrics\n    this.updateSystemHealth();\n  }\n\n  private updateSystemHealth(): void {\n    const isOptimal = (value: number, min: number, max: number) => \n      value >= min && value <= max;\n\n    const allOptimal = \n      isOptimal(this.currentMetrics.temperature, 22, 26) &&\n      isOptimal(this.currentMetrics.humidity, 60, 70) &&\n      isOptimal(this.currentMetrics.light, 500, 800) &&\n      isOptimal(this.currentMetrics.ec, 1.5, 2.1) &&\n      isOptimal(this.currentMetrics.ph, 5.8, 6.6);\n\n    const someWarning = \n      !isOptimal(this.currentMetrics.temperature, 20, 28) ||\n      !isOptimal(this.currentMetrics.humidity, 55, 75) ||\n      !isOptimal(this.currentMetrics.light, 400, 900) ||\n      !isOptimal(this.currentMetrics.ec, 1.3, 2.3) ||\n      !isOptimal(this.currentMetrics.ph, 5.5, 6.9);\n\n    if (allOptimal) {\n      this.systemHealth = {\n        status: 'excellent',\n        message: 'All systems functioning optimally. Plant growth conditions are ideal.'\n      };\n    } else if (someWarning) {\n      this.systemHealth = {\n        status: 'warning',\n        message: 'Some parameters are outside optimal range. Consider adjusting environmental controls.'\n      };\n    } else {\n      this.systemHealth = {\n        status: 'critical',\n        message: 'Critical: Multiple parameters require immediate attention.'\n      };\n    }\n  }\n\n  private processHistoriesIntoChartData(histories: any[][]): ChartData {\n    const labels = histories[0]?.map(h => new Date(h.timestamp).toLocaleTimeString()) ?? [];\n    const datasets = [\n      {\n        label: 'Temperature (°C)',\n        data: histories[0]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#006d5b',\n        backgroundColor: 'rgba(0, 109, 91, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'Humidity (%)',\n        data: histories[1]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#8d90bb',\n        backgroundColor: 'rgba(141, 144, 187, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'Light (lux/100)',\n        data: histories[2]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#ffc107',\n        backgroundColor: 'rgba(255, 193, 7, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'EC (mS/cm)',\n        data: histories[3]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#dc3545',\n        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'pH',\n        data: histories[4]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#6610f2',\n        backgroundColor: 'rgba(102, 16, 242, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }\n    ];\n\n    return { labels, datasets };\n  }\n\n  private loadMockData(): void {\n    const now = new Date();\n    const labels = Array.from({ length: 12 }, (_, i) => {\n      const d = new Date(now.getTime() - (11 - i) * 5000);\n      return d.toLocaleTimeString('en-US', { hour12: false });\n    });\n    \n    // Generate random values that stay within realistic ranges\n    const temperature = 22 + Math.random() * 4;\n    const humidity = 60 + Math.random() * 12;\n    const light = Math.max(0, 5 + Math.random() * 3) * 100;\n    const ec = 1.5 + Math.random() * 0.6;\n    const ph = 5.8 + Math.random() * 0.8;\n\n    // Update current metrics with the latest mock values\n    this.currentMetrics = {\n      temperature,\n      humidity,\n      light,\n      ec,\n      ph\n    };\n\n    // Update system health based on new values\n    this.updateSystemHealth();\n    \n    this.chartData = {\n      labels,\n      datasets: [\n        {\n          label: 'Temperature (°C)',\n          data: Array.from({ length: 12 }, (_, i) => i === 11 ? temperature : 22 + Math.random() * 4),\n          borderColor: '#006d5b',\n          backgroundColor: 'rgba(0, 109, 91, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'Humidity (%)',\n          data: Array.from({ length: 12 }, (_, i) => i === 11 ? humidity : 60 + Math.random() * 12),\n          borderColor: '#8d90bb',\n          backgroundColor: 'rgba(141, 144, 187, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'Light (lux/100)',\n          data: Array.from({ length: 12 }, (_, i) => i === 11 ? light/100 : Math.max(0, 5 + Math.random() * 3)),\n          borderColor: '#ffc107',\n          backgroundColor: 'rgba(255, 193, 7, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'EC (mS/cm)',\n          data: Array.from({ length: 12 }, (_, i) => i === 11 ? ec : 1.5 + Math.random() * 0.6),\n          borderColor: '#dc3545',\n          backgroundColor: 'rgba(220, 53, 69, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'pH',\n          data: Array.from({ length: 12 }, (_, i) => i === 11 ? ph : 5.8 + Math.random() * 0.8),\n          borderColor: '#6610f2',\n          backgroundColor: 'rgba(102, 16, 242, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        }\n      ]\n    };\n  }\n\n  startIrrigation(): void {\n    this.sensorService.startIrrigation().subscribe(\n      () => {\n        console.log('Irrigation started');\n      },\n      error => {\n        console.error('Error starting irrigation:', error);\n      }\n    );\n  }\n\n  exportData(): void {\n    this.sensorService.exportData().subscribe(\n      (data) => {\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'sensor-data.json';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      },\n      error => {\n        console.error('Error exporting data:', error);\n      }\n    );\n  }\n\n  private loadCurrentCrop(): void {\n    this.cropService.getCrops({ status: 'active' }).pipe(\n      takeUntil(this.destroy$)\n    ).subscribe({\n      next: (crops) => {\n        if (crops.length > 0) {\n          this.currentCrop = crops[0]; // Get the first active crop\n          this.updateRoadmapStages();\n        }\n      },\n      error: (error) => {\n        console.error('Error loading current crop:', error);\n      }\n    });\n  }\n\n  private updateRoadmapStages(): void {\n    if (!this.currentCrop) return;\n\n    const standardStages: string[] = ['Germination', 'Seedling', 'Vegetation', 'Flowering', 'Fruiting', 'Harvest'];\n    const currentStageIndex = standardStages.findIndex(stage => \n      stage.toLowerCase() === this.currentCrop?.currentStage.name.toLowerCase()\n    );\n\n    this.roadmapStages = standardStages.map((stageName, index) => {\n      const isCurrentStage = index === currentStageIndex;\n      const isCompleted = index < currentStageIndex;\n\n      return {\n        name: stageName,\n        completed: isCompleted,\n        active: isCurrentStage,\n        description: isCurrentStage ? this.currentCrop?.currentStage.description : undefined,\n        startDate: isCurrentStage ? this.currentCrop?.currentStage.startDate : undefined,\n        requiredActions: isCurrentStage ? this.currentCrop?.currentStage.requiredActions : undefined\n      };\n    });\n  }\n}","<div class=\"dashboard-container\">\n    <div class=\"dashboard-header\">\n      <h1 class=\"dashboard-title\">Dashboard</h1>\n      <div class=\"dashboard-actions\">\n        <button class=\"btn btn-outline\" (click)=\"exportData()\">Export Data</button>\n        <button class=\"btn btn-primary\" (click)=\"startIrrigation()\">Start Irrigation</button>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h2 class=\"card-title\">Real-Time Charts</h2>\n      </div>\n      <div class=\"metrics-grid\">\n        <app-metric-card\n          name=\"Temperature\"\n          icon=\"🌡️\"\n          [currentValue]=\"currentMetrics.temperature\"\n          [minOptimal]=\"22\"\n          [maxOptimal]=\"26\"\n          unit=\"°C\"\n          [maxRange]=\"35\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"Humidity\"\n          icon=\"💧\"\n          [currentValue]=\"currentMetrics.humidity\"\n          [minOptimal]=\"60\"\n          [maxOptimal]=\"70\"\n          unit=\"%\"\n          [maxRange]=\"100\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"Light\"\n          icon=\"☀️\"\n          [currentValue]=\"currentMetrics.light\"\n          [minOptimal]=\"500\"\n          [maxOptimal]=\"800\"\n          unit=\" lux\"\n          [maxRange]=\"1000\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"EC\"\n          icon=\"⚡\"\n          [currentValue]=\"currentMetrics.ec\"\n          [minOptimal]=\"1.5\"\n          [maxOptimal]=\"2.1\"\n          unit=\" mS/cm\"\n          [maxRange]=\"3.0\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"pH\"\n          icon=\"🧪\"\n          [currentValue]=\"currentMetrics.ph\"\n          [minOptimal]=\"5.8\"\n          [maxOptimal]=\"6.6\"\n          unit=\"\"\n          [maxRange]=\"14\">\n        </app-metric-card>\n      </div>\n\n      <div class=\"chart-container\">\n        <app-chart \n          *ngIf=\"chartData\" \n          [chartData]=\"chartData\"\n          [chartOptions]=\"chartOptions\">\n        </app-chart>\n      </div>\n      <div class=\"system-health\" [ngClass]=\"'system-health-' + systemHealth.status\">\n        <div class=\"system-health-icon\">✓</div>\n        <div class=\"system-health-content\">\n          <div class=\"system-health-title\">System Health: {{ systemHealth.status | titlecase }}</div>\n          <div class=\"system-health-message\">{{ systemHealth.message }}</div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h2 class=\"card-title\">Crop Cycle Roadmap</h2>\n        <div class=\"current-crop-info\" *ngIf=\"currentCrop\">\n          <span class=\"crop-name\">{{ currentCrop.name }}</span>\n          <span class=\"crop-dates\">\n            Planted: {{ currentCrop.plantedDate | date:'mediumDate' }} • \n            Expected Harvest: {{ currentCrop.expectedHarvestDate | date:'mediumDate' }}\n          </span>\n        </div>\n      </div>\n      <div class=\"crop-roadmap\">\n        <div class=\"roadmap-step\" *ngFor=\"let stage of roadmapStages; let i = index\">\n          <div class=\"step-icon\" \n               [ngClass]=\"{'active': stage.active, 'completed': stage.completed}\">\n            {{ stage.completed ? '✓' : i + 1 }}\n          </div>\n          <div class=\"step-content\">\n            <div class=\"step-label\">{{ stage.name }}</div>\n            <div class=\"step-details\" *ngIf=\"stage.active\">\n              <div class=\"stage-description\">{{ stage.description }}</div>\n              <div class=\"stage-date\">Started: {{ stage.startDate | date:'mediumDate' }}</div>\n              <div class=\"required-actions\" *ngIf=\"stage.requiredActions?.length\">\n                <h4>Required Actions:</h4>\n                <ul>\n                  <li *ngFor=\"let action of stage.requiredActions\">{{ action }}</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}