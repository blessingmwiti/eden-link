{"ast":null,"code":"import { interval, Subject, combineLatest } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/sensor.service\";\nimport * as i2 from \"../../core/services/ai.service\";\nimport * as i3 from \"../../core/services/crop.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../shared/components/chart/chart.component\";\nimport * as i6 from \"../../shared/components/metric-card/metric-card.component\";\nfunction DashboardComponent_app_chart_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-chart\", 24);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"chartData\", ctx_r0.chartData)(\"chartOptions\", ctx_r0.chartOptions);\n  }\n}\nfunction DashboardComponent_div_35_div_9_div_6_div_6_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const action_r9 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(action_r9);\n  }\n}\nfunction DashboardComponent_div_35_div_9_div_6_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 40)(1, \"h4\");\n    i0.ɵɵtext(2, \"Required Actions:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, DashboardComponent_div_35_div_9_div_6_div_6_li_4_Template, 2, 1, \"li\", 41);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const stage_r4 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", stage_r4.requiredActions);\n  }\n}\nfunction DashboardComponent_div_35_div_9_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 36)(1, \"div\", 37);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 38);\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, DashboardComponent_div_35_div_9_div_6_div_6_Template, 5, 1, \"div\", 39);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const stage_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(stage_r4.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Started: \", i0.ɵɵpipeBind2(5, 3, stage_r4.startDate, \"mediumDate\"), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", stage_r4.requiredActions == null ? null : stage_r4.requiredActions.length);\n  }\n}\nconst _c0 = (a0, a1) => ({\n  \"active\": a0,\n  \"completed\": a1\n});\nfunction DashboardComponent_div_35_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31)(1, \"div\", 32);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 33)(4, \"div\", 34);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, DashboardComponent_div_35_div_9_div_6_Template, 7, 6, \"div\", 35);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const stage_r4 = ctx.$implicit;\n    const i_r5 = ctx.index;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(4, _c0, stage_r4.active, stage_r4.completed));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", stage_r4.completed ? \"\\u2713\" : i_r5 + 1, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(stage_r4.name);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", stage_r4.active);\n  }\n}\nfunction DashboardComponent_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 25)(1, \"div\", 26)(2, \"div\", 27);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 28);\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"date\");\n    i0.ɵɵpipe(7, \"date\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 29);\n    i0.ɵɵtemplate(9, DashboardComponent_div_35_div_9_Template, 7, 7, \"div\", 30);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const cycle_r2 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(cycle_r2.crop.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" Planted: \", i0.ɵɵpipeBind2(6, 4, cycle_r2.crop.plantedDate, \"mediumDate\"), \" \\u2022 Expected Harvest: \", i0.ɵɵpipeBind2(7, 7, cycle_r2.crop.expectedHarvestDate, \"mediumDate\"), \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", cycle_r2.stages);\n  }\n}\nexport class DashboardComponent {\n  constructor(sensorService, aiService, cropService) {\n    this.sensorService = sensorService;\n    this.aiService = aiService;\n    this.cropService = cropService;\n    this.destroy$ = new Subject();\n    this.updateInterval$ = interval(5000);\n    this.currentMetrics = {\n      temperature: 24,\n      humidity: 65,\n      light: 650,\n      ec: 1.8,\n      ph: 6.2\n    };\n    this.systemHealth = {\n      status: 'excellent',\n      message: 'All systems functioning optimally. Consider adjusting humidity levels for optimal bell pepper and coriander growth.'\n    };\n    this.chartData = null;\n    this.chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      animation: {\n        duration: 750,\n        easing: 'easeInOutQuart'\n      },\n      scales: {\n        x: {\n          grid: {\n            color: 'rgba(0, 0, 0, 0.1)',\n            borderColor: 'rgba(0, 0, 0, 0.3)'\n          },\n          ticks: {\n            color: '#666',\n            font: {\n              size: 11\n            }\n          },\n          title: {\n            display: true,\n            text: 'Time',\n            color: '#666',\n            font: {\n              size: 12,\n              weight: 'bold'\n            }\n          }\n        },\n        y: {\n          grid: {\n            color: 'rgba(0, 0, 0, 0.1)',\n            borderColor: 'rgba(0, 0, 0, 0.3)'\n          },\n          ticks: {\n            color: '#666',\n            font: {\n              size: 11\n            }\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          position: 'top',\n          align: 'center',\n          labels: {\n            boxWidth: 15,\n            padding: 15,\n            font: {\n              size: 11\n            }\n          }\n        },\n        tooltip: {\n          mode: 'index',\n          intersect: false,\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\n          titleColor: '#000',\n          bodyColor: '#666',\n          borderColor: 'rgba(0, 0, 0, 0.1)',\n          borderWidth: 1,\n          padding: 10,\n          bodyFont: {\n            size: 11\n          },\n          titleFont: {\n            size: 12,\n            weight: 'bold'\n          }\n        }\n      },\n      interaction: {\n        mode: 'index',\n        axis: 'x',\n        intersect: false\n      }\n    };\n    this.currentCrop = null;\n    this.roadmapStages = [];\n    this.cropCycles = [];\n  }\n  ngOnInit() {\n    this.loadInitialData();\n    this.setupRealTimeUpdates();\n    this.loadCurrentCrop();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  loadInitialData() {\n    this.loadSensorData();\n    // Ensure mock crops are loaded if no real data\n    this.addMockCrops();\n  }\n  setupRealTimeUpdates() {\n    this.updateInterval$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this.loadSensorData();\n    });\n  }\n  loadSensorData() {\n    // Get history for all sensor types\n    const sensorIds = ['temp-1', 'humidity-1', 'light-1', 'ec-1', 'ph-1'];\n    const histories$ = sensorIds.map(id => this.sensorService.getSensorHistory(id, 1));\n    combineLatest(histories$).pipe(takeUntil(this.destroy$), map(histories => {\n      // Update current metrics with the latest values\n      this.updateCurrentMetrics(histories);\n      // Process data for the chart\n      return this.processHistoriesIntoChartData(histories);\n    })).subscribe({\n      next: chartData => {\n        this.chartData = chartData;\n      },\n      error: error => {\n        console.error('Error loading sensor data:', error);\n        this.loadMockData();\n      }\n    });\n  }\n  updateCurrentMetrics(histories) {\n    // Get the most recent values from each history\n    const getLatestValue = history => {\n      if (!history || history.length === 0) return null;\n      const latestReading = history[history.length - 1];\n      return Number(latestReading.value);\n    };\n    const temperature = getLatestValue(histories[0]);\n    const humidity = getLatestValue(histories[1]);\n    const light = getLatestValue(histories[2]);\n    const ec = getLatestValue(histories[3]);\n    const ph = getLatestValue(histories[4]);\n    // Update current metrics with real values or fallback to defaults\n    this.currentMetrics = {\n      temperature: temperature ?? 24,\n      humidity: humidity ?? 65,\n      light: light ?? 650,\n      ec: ec ?? 1.8,\n      ph: ph ?? 6.2\n    };\n    // Update system health status based on current metrics\n    this.updateSystemHealth();\n  }\n  updateSystemHealth() {\n    const isOptimal = (value, min, max) => value >= min && value <= max;\n    // Adjusted ranges to accommodate both Bell Pepper and Coriander\n    const allOptimal = isOptimal(this.currentMetrics.temperature, 20, 25) && isOptimal(this.currentMetrics.humidity, 55, 70) && isOptimal(this.currentMetrics.light, 500, 800) && isOptimal(this.currentMetrics.ec, 1.5, 2.2) && isOptimal(this.currentMetrics.ph, 6.0, 6.8);\n    const someWarning = !isOptimal(this.currentMetrics.temperature, 18, 27) || !isOptimal(this.currentMetrics.humidity, 50, 75) || !isOptimal(this.currentMetrics.light, 400, 900) || !isOptimal(this.currentMetrics.ec, 1.2, 2.4) || !isOptimal(this.currentMetrics.ph, 5.8, 7.0);\n    if (allOptimal) {\n      this.systemHealth = {\n        status: 'excellent',\n        message: 'All systems functioning optimally. Both bell pepper and coriander are in ideal growing conditions.'\n      };\n    } else if (someWarning) {\n      this.systemHealth = {\n        status: 'warning',\n        message: 'Some parameters are outside optimal range. Adjust environmental controls for bell pepper and coriander needs.'\n      };\n    } else {\n      this.systemHealth = {\n        status: 'critical',\n        message: 'Critical: Multiple parameters require immediate attention for crop health.'\n      };\n    }\n  }\n  processHistoriesIntoChartData(histories) {\n    const labels = histories[0]?.map(h => new Date(h.timestamp).toLocaleTimeString()) ?? [];\n    const datasets = [{\n      label: 'Temperature (°C)',\n      data: histories[0]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#006d5b',\n      backgroundColor: 'rgba(0, 109, 91, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'Humidity (%)',\n      data: histories[1]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#8d90bb',\n      backgroundColor: 'rgba(141, 144, 187, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'Light (lux/100)',\n      data: histories[2]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#ffc107',\n      backgroundColor: 'rgba(255, 193, 7, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'EC (mS/cm)',\n      data: histories[3]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#dc3545',\n      backgroundColor: 'rgba(220, 53, 69, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }, {\n      label: 'pH',\n      data: histories[4]?.map(h => Number(h.value)) ?? [],\n      borderColor: '#6610f2',\n      backgroundColor: 'rgba(102, 16, 242, 0.1)',\n      tension: 0.4,\n      fill: true,\n      borderWidth: 2\n    }];\n    return {\n      labels,\n      datasets\n    };\n  }\n  loadMockData() {\n    const now = new Date();\n    const labels = Array.from({\n      length: 12\n    }, (_, i) => {\n      const d = new Date(now.getTime() - (11 - i) * 5000);\n      return d.toLocaleTimeString('en-US', {\n        hour12: false\n      });\n    });\n    // Generate random values that stay within realistic ranges\n    const temperature = 22 + Math.random() * 4;\n    const humidity = 60 + Math.random() * 12;\n    const light = Math.max(0, 5 + Math.random() * 3) * 100;\n    const ec = 1.5 + Math.random() * 0.6;\n    const ph = 5.8 + Math.random() * 0.8;\n    // Update current metrics with the latest mock values\n    this.currentMetrics = {\n      temperature,\n      humidity,\n      light,\n      ec,\n      ph\n    };\n    // Update system health based on new values\n    this.updateSystemHealth();\n    this.chartData = {\n      labels,\n      datasets: [{\n        label: 'Temperature (°C)',\n        data: Array.from({\n          length: 12\n        }, (_, i) => i === 11 ? temperature : 22 + Math.random() * 4),\n        borderColor: '#006d5b',\n        backgroundColor: 'rgba(0, 109, 91, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'Humidity (%)',\n        data: Array.from({\n          length: 12\n        }, (_, i) => i === 11 ? humidity : 60 + Math.random() * 12),\n        borderColor: '#8d90bb',\n        backgroundColor: 'rgba(141, 144, 187, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'Light (lux/100)',\n        data: Array.from({\n          length: 12\n        }, (_, i) => i === 11 ? light / 100 : Math.max(0, 5 + Math.random() * 3)),\n        borderColor: '#ffc107',\n        backgroundColor: 'rgba(255, 193, 7, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'EC (mS/cm)',\n        data: Array.from({\n          length: 12\n        }, (_, i) => i === 11 ? ec : 1.5 + Math.random() * 0.6),\n        borderColor: '#dc3545',\n        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }, {\n        label: 'pH',\n        data: Array.from({\n          length: 12\n        }, (_, i) => i === 11 ? ph : 5.8 + Math.random() * 0.8),\n        borderColor: '#6610f2',\n        backgroundColor: 'rgba(102, 16, 242, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }]\n    };\n  }\n  startIrrigation() {\n    this.sensorService.startIrrigation().subscribe(() => {\n      console.log('Irrigation started');\n    }, error => {\n      console.error('Error starting irrigation:', error);\n    });\n  }\n  exportData() {\n    this.sensorService.exportData().subscribe(data => {\n      const blob = new Blob([JSON.stringify(data, null, 2)], {\n        type: 'application/json'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'sensor-data.json';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }, error => {\n      console.error('Error exporting data:', error);\n    });\n  }\n  loadCurrentCrop() {\n    this.cropService.getCrops({\n      status: 'active'\n    }).pipe(takeUntil(this.destroy$)).subscribe({\n      next: crops => {\n        if (crops && crops.length > 0) {\n          this.cropCycles = crops.map(crop => ({\n            crop,\n            stages: this.createRoadmapStages(crop)\n          }));\n        } else {\n          // If no crops from service, use mock data\n          this.addMockCrops();\n        }\n      },\n      error: error => {\n        console.error('Error loading current crops:', error);\n        // Add mock data for demonstration\n        this.addMockCrops();\n      }\n    });\n  }\n  addMockCrops() {\n    const mockCrops = [{\n      id: 'mock-1',\n      name: 'Bell Pepper',\n      scientificName: 'Capsicum annuum',\n      imageUrl: '/assets/images/crops/bell-pepper.jpg',\n      category: 'Vegetable',\n      growthCycle: 100,\n      currentStage: {\n        id: 'stage-3',\n        name: 'Flowering',\n        order: 3,\n        description: 'Plants are developing flowers which will turn into peppers.',\n        startDate: new Date(2024, 3, 15),\n        isCompleted: false,\n        requiredActions: ['Monitor temperature between 20-25°C', 'Maintain humidity around 60-70%', 'Ensure proper pollination'],\n        idealConditions: {\n          temperature: {\n            min: 20,\n            max: 25,\n            unit: '°C'\n          },\n          humidity: {\n            min: 60,\n            max: 70,\n            unit: '%'\n          },\n          light: {\n            min: 14,\n            max: 16,\n            unit: 'hours'\n          },\n          ph: {\n            min: 6.0,\n            max: 6.8,\n            unit: 'pH'\n          },\n          ec: {\n            min: 1.8,\n            max: 2.2,\n            unit: 'mS/cm'\n          }\n        }\n      },\n      plantedDate: new Date(2024, 2, 1),\n      expectedHarvestDate: new Date(2024, 5, 10),\n      status: 'active',\n      health: 95,\n      farmId: 'farm-1',\n      zoneId: 'zone-1',\n      idealTemperature: 23,\n      idealHumidity: 65,\n      idealLight: 14000,\n      aiSuggestion: 'Growth is on track. Consider increasing pollination activities for better fruit set.'\n    }, {\n      id: 'mock-2',\n      name: 'Coriander',\n      scientificName: 'Coriandrum sativum',\n      imageUrl: '/assets/images/crops/coriander.jpg',\n      category: 'Herb',\n      growthCycle: 45,\n      currentStage: {\n        id: 'stage-2',\n        name: 'Vegetation',\n        order: 2,\n        description: 'Plants are developing lush green leaves.',\n        startDate: new Date(2024, 3, 15),\n        isCompleted: false,\n        requiredActions: ['Maintain soil moisture', 'Ensure good air circulation', 'Monitor for leaf spots'],\n        idealConditions: {\n          temperature: {\n            min: 18,\n            max: 22,\n            unit: '°C'\n          },\n          humidity: {\n            min: 50,\n            max: 60,\n            unit: '%'\n          },\n          light: {\n            min: 12,\n            max: 14,\n            unit: 'hours'\n          },\n          ph: {\n            min: 6.2,\n            max: 6.8,\n            unit: 'pH'\n          },\n          ec: {\n            min: 1.2,\n            max: 1.6,\n            unit: 'mS/cm'\n          }\n        }\n      },\n      plantedDate: new Date(2024, 3, 1),\n      expectedHarvestDate: new Date(2024, 4, 15),\n      status: 'active',\n      health: 90,\n      farmId: 'farm-1',\n      zoneId: 'zone-2',\n      idealTemperature: 20,\n      idealHumidity: 55,\n      idealLight: 12000,\n      aiSuggestion: 'Consider harvesting outer leaves to promote bushier growth.'\n    }];\n    // Ensure cropCycles is initialized with the mock data\n    this.cropCycles = mockCrops.map(crop => ({\n      crop,\n      stages: this.createRoadmapStages(crop)\n    }));\n  }\n  createRoadmapStages(crop) {\n    let stages;\n    const today = new Date();\n    const totalDays = Math.ceil((crop.expectedHarvestDate.getTime() - crop.plantedDate.getTime()) / (1000 * 60 * 60 * 24));\n    const daysSincePlanting = Math.ceil((today.getTime() - crop.plantedDate.getTime()) / (1000 * 60 * 60 * 24));\n    const progressPercentage = daysSincePlanting / totalDays * 100;\n    if (crop.name === 'Bell Pepper') {\n      // Bell Pepper stages with approximate durations\n      stages = [{\n        name: 'Germination',\n        description: 'Seeds sprouting and developing first leaves',\n        startDate: crop.plantedDate,\n        requiredActions: ['Maintain soil temperature 20-30°C', 'Keep soil moist'],\n        completed: progressPercentage >= 10,\n        active: progressPercentage < 10\n      }, {\n        name: 'Seedling',\n        description: 'Young plants developing true leaves',\n        startDate: new Date(crop.plantedDate.getTime() + totalDays * 0.1 * 24 * 60 * 60 * 1000),\n        requiredActions: ['Monitor light levels', 'Begin light fertilization'],\n        completed: progressPercentage >= 25,\n        active: progressPercentage >= 10 && progressPercentage < 25\n      }, {\n        name: 'Vegetation',\n        description: 'Plants growing rapidly and developing strong stems',\n        startDate: new Date(crop.plantedDate.getTime() + totalDays * 0.25 * 24 * 60 * 60 * 1000),\n        requiredActions: ['Support plant growth', 'Regular pruning'],\n        completed: progressPercentage >= 45,\n        active: progressPercentage >= 25 && progressPercentage < 45\n      }, {\n        name: 'Flowering',\n        description: 'Plants developing flowers',\n        startDate: new Date(crop.plantedDate.getTime() + totalDays * 0.45 * 24 * 60 * 60 * 1000),\n        requiredActions: ['Ensure pollination', 'Adjust nutrients'],\n        completed: progressPercentage >= 65,\n        active: progressPercentage >= 45 && progressPercentage < 65\n      }, {\n        name: 'Fruit Set',\n        description: 'Peppers forming and developing',\n        startDate: new Date(crop.plantedDate.getTime() + totalDays * 0.65 * 24 * 60 * 60 * 1000),\n        requiredActions: ['Support heavy fruits', 'Monitor calcium levels'],\n        completed: progressPercentage >= 85,\n        active: progressPercentage >= 65 && progressPercentage < 85\n      }, {\n        name: 'Harvest',\n        description: 'Peppers reaching full size and color',\n        startDate: new Date(crop.plantedDate.getTime() + totalDays * 0.85 * 24 * 60 * 60 * 1000),\n        requiredActions: ['Check pepper maturity', 'Harvest regularly'],\n        completed: progressPercentage >= 100,\n        active: progressPercentage >= 85 && progressPercentage < 100\n      }];\n    } else {\n      // Coriander stages with approximate durations\n      stages = [{\n        name: 'Germination',\n        description: 'Seeds sprouting and developing first leaves',\n        startDate: crop.plantedDate,\n        requiredActions: ['Keep soil moist', 'Maintain warm temperature'],\n        completed: progressPercentage >= 15,\n        active: progressPercentage < 15\n      }, {\n        name: 'Seedling',\n        description: 'Young plants developing true leaves',\n        startDate: new Date(crop.plantedDate.getTime() + totalDays * 0.15 * 24 * 60 * 60 * 1000),\n        requiredActions: ['Thin seedlings', 'Monitor moisture'],\n        completed: progressPercentage >= 35,\n        active: progressPercentage >= 15 && progressPercentage < 35\n      }, {\n        name: 'Vegetation',\n        description: 'Plants developing full leaf growth',\n        startDate: new Date(crop.plantedDate.getTime() + totalDays * 0.35 * 24 * 60 * 60 * 1000),\n        requiredActions: ['Regular watering', 'Light fertilization'],\n        completed: progressPercentage >= 70,\n        active: progressPercentage >= 35 && progressPercentage < 70\n      }, {\n        name: 'Mature',\n        description: 'Plants reaching full size with mature leaves',\n        startDate: new Date(crop.plantedDate.getTime() + totalDays * 0.70 * 24 * 60 * 60 * 1000),\n        requiredActions: ['Begin harvesting leaves', 'Maintain moisture'],\n        completed: progressPercentage >= 90,\n        active: progressPercentage >= 70 && progressPercentage < 90\n      }, {\n        name: 'Harvest',\n        description: 'Full harvest stage',\n        startDate: new Date(crop.plantedDate.getTime() + totalDays * 0.90 * 24 * 60 * 60 * 1000),\n        requiredActions: ['Regular harvesting', 'Monitor for bolting'],\n        completed: progressPercentage >= 100,\n        active: progressPercentage >= 90 && progressPercentage < 100\n      }];\n    }\n    return stages;\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.SensorService), i0.ɵɵdirectiveInject(i2.AiService), i0.ɵɵdirectiveInject(i3.CropService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 36,\n      vars: 27,\n      consts: [[1, \"dashboard-container\"], [1, \"dashboard-header\"], [1, \"dashboard-title\"], [1, \"dashboard-actions\"], [1, \"btn\", \"btn-outline\", 3, \"click\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"metrics-grid\"], [\"name\", \"Temperature\", \"icon\", \"\\uD83C\\uDF21\\uFE0F\", \"unit\", \"\\u00B0C\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"Humidity\", \"icon\", \"\\uD83D\\uDCA7\", \"unit\", \"%\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"Light\", \"icon\", \"\\u2600\\uFE0F\", \"unit\", \" lux\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"EC\", \"icon\", \"\\u26A1\", \"unit\", \" mS/cm\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [\"name\", \"pH\", \"icon\", \"\\uD83E\\uDDEA\", \"unit\", \"\", 3, \"currentValue\", \"minOptimal\", \"maxOptimal\", \"maxRange\"], [1, \"chart-container\"], [3, \"chartData\", \"chartOptions\", 4, \"ngIf\"], [1, \"system-health\", 3, \"ngClass\"], [1, \"system-health-icon\"], [1, \"system-health-content\"], [1, \"system-health-title\"], [1, \"system-health-message\"], [1, \"crop-cycles\"], [\"class\", \"crop-cycle\", 4, \"ngFor\", \"ngForOf\"], [3, \"chartData\", \"chartOptions\"], [1, \"crop-cycle\"], [1, \"crop-header\"], [1, \"crop-name\"], [1, \"crop-dates\"], [1, \"crop-roadmap\"], [\"class\", \"roadmap-step\", 4, \"ngFor\", \"ngForOf\"], [1, \"roadmap-step\"], [1, \"step-icon\", 3, \"ngClass\"], [1, \"step-content\"], [1, \"step-label\"], [\"class\", \"step-details\", 4, \"ngIf\"], [1, \"step-details\"], [1, \"stage-description\"], [1, \"stage-date\"], [\"class\", \"required-actions\", 4, \"ngIf\"], [1, \"required-actions\"], [4, \"ngFor\", \"ngForOf\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n          i0.ɵɵtext(3, \"Dashboard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_5_listener() {\n            return ctx.exportData();\n          });\n          i0.ɵɵtext(6, \"Export Data\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_7_listener() {\n            return ctx.startIrrigation();\n          });\n          i0.ɵɵtext(8, \"Start Irrigation\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 7)(11, \"h2\", 8);\n          i0.ɵɵtext(12, \"Real-Time Charts\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 9);\n          i0.ɵɵelement(14, \"app-metric-card\", 10)(15, \"app-metric-card\", 11)(16, \"app-metric-card\", 12)(17, \"app-metric-card\", 13)(18, \"app-metric-card\", 14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"div\", 15);\n          i0.ɵɵtemplate(20, DashboardComponent_app_chart_20_Template, 1, 2, \"app-chart\", 16);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"div\", 17)(22, \"div\", 18);\n          i0.ɵɵtext(23, \"\\u2713\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"div\", 19)(25, \"div\", 20);\n          i0.ɵɵtext(26);\n          i0.ɵɵpipe(27, \"titlecase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"div\", 21);\n          i0.ɵɵtext(29);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(30, \"div\", 6)(31, \"div\", 7)(32, \"h2\", 8);\n          i0.ɵɵtext(33, \"Active Crop Cycles\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(34, \"div\", 22);\n          i0.ɵɵtemplate(35, DashboardComponent_div_35_Template, 10, 10, \"div\", 23);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(14);\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.temperature)(\"minOptimal\", 20)(\"maxOptimal\", 25)(\"maxRange\", 35);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.humidity)(\"minOptimal\", 55)(\"maxOptimal\", 70)(\"maxRange\", 100);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.light)(\"minOptimal\", 500)(\"maxOptimal\", 800)(\"maxRange\", 1000);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.ec)(\"minOptimal\", 1.5)(\"maxOptimal\", 2.2)(\"maxRange\", 3);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"currentValue\", ctx.currentMetrics.ph)(\"minOptimal\", 6)(\"maxOptimal\", 6.8)(\"maxRange\", 14);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.chartData);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", \"system-health-\" + ctx.systemHealth.status);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"System Health: \", i0.ɵɵpipeBind1(27, 25, ctx.systemHealth.status), \"\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(ctx.systemHealth.message);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.cropCycles);\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i5.ChartComponent, i6.MetricCardComponent, i4.TitleCasePipe, i4.DatePipe],\n      styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n    padding: 20px;\\n  }\\n  \\n  .dashboard-header[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    margin-bottom: 24px;\\n  }\\n  \\n  .dashboard-title[_ngcontent-%COMP%] {\\n    margin: 0;\\n    font-size: 24px;\\n    color: #212529;\\n  }\\n  \\n  .dashboard-actions[_ngcontent-%COMP%] {\\n    display: flex;\\n    gap: 12px;\\n  }\\n  \\n  .btn[_ngcontent-%COMP%] {\\n    padding: 8px 16px;\\n    border-radius: 6px;\\n    border: none;\\n    font-size: 14px;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: all 0.2s;\\n  }\\n  \\n  .btn-primary[_ngcontent-%COMP%] {\\n    background-color: #008e73;\\n    color: #ffffff;\\n  }\\n  \\n  .btn-primary[_ngcontent-%COMP%]:hover {\\n    background-color: #00594d;\\n  }\\n  \\n  .btn-outline[_ngcontent-%COMP%] {\\n    background-color: transparent;\\n    border: 1px solid #006d5b;\\n    color: #006d5b;\\n  }\\n  \\n  .btn-outline[_ngcontent-%COMP%]:hover {\\n    background-color: #006d5b;\\n    color: #ffffff;\\n  }\\n  \\n  .card[_ngcontent-%COMP%] {\\n    background: white;\\n    border-radius: 12px;\\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\\n    margin-bottom: 24px;\\n    overflow: hidden;\\n  }\\n  \\n  .card-header[_ngcontent-%COMP%] {\\n    padding: 16px 20px;\\n    border-bottom: 1px solid #e9ecef;\\n  }\\n  \\n  .card-title[_ngcontent-%COMP%] {\\n    margin: 0;\\n    font-size: 18px;\\n    color: #343a40;\\n  }\\n  \\n  .sensors-grid[_ngcontent-%COMP%] {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\\n    gap: 15px;\\n  }\\n  \\n  .metrics-grid[_ngcontent-%COMP%] {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));\\n    gap: 16px;\\n    padding: 20px;\\n    background: #f8f9fa;\\n    border-bottom: 1px solid #e9ecef;\\n  }\\n  \\n  .chart-container[_ngcontent-%COMP%] {\\n    padding: 20px;\\n    height: 400px;\\n  }\\n  \\n  .system-health[_ngcontent-%COMP%] {\\n    display: flex;\\n    align-items: center;\\n    gap: 16px;\\n    padding: 16px 20px;\\n    background: #f8f9fa;\\n    border-top: 1px solid #e9ecef;\\n  }\\n  \\n  .system-health-warning[_ngcontent-%COMP%] {\\n    background-color: rgba(255, 193, 7, 0.1);\\n    border-left-color: #ffc107;\\n  }\\n  \\n  .system-health-danger[_ngcontent-%COMP%] {\\n    background-color: rgba(220, 53, 69, 0.1);\\n    border-left-color: #dc3545;\\n  }\\n  \\n  .system-health-icon[_ngcontent-%COMP%] {\\n    width: 32px;\\n    height: 32px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    background: #28a745;\\n    color: white;\\n    border-radius: 50%;\\n    font-size: 18px;\\n  }\\n  \\n  .system-health-warning[_ngcontent-%COMP%]   .system-health-icon[_ngcontent-%COMP%] {\\n    background-color: #ffc107;\\n    color: #212529;\\n  }\\n  \\n  .system-health-danger[_ngcontent-%COMP%]   .system-health-icon[_ngcontent-%COMP%] {\\n    background-color: #dc3545;\\n  }\\n  \\n  .system-health-content[_ngcontent-%COMP%] {\\n    flex: 1;\\n  }\\n  \\n  .system-health-title[_ngcontent-%COMP%] {\\n    font-weight: 500;\\n    color: #212529;\\n    margin-bottom: 4px;\\n  }\\n  \\n  .system-health-message[_ngcontent-%COMP%] {\\n    color: #6c757d;\\n    font-size: 14px;\\n  }\\n  \\n  .current-crop-info[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 4px;\\n    margin-top: 8px;\\n  }\\n  \\n  .crop-name[_ngcontent-%COMP%] {\\n    font-size: 1.1em;\\n    font-weight: 500;\\n    color: #2c3e50;\\n  }\\n  \\n  .crop-dates[_ngcontent-%COMP%] {\\n    font-size: 0.9em;\\n    color: #666;\\n  }\\n  \\n  .crop-cycles[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n    padding: 0.75rem;\\n  }\\n  \\n  .crop-cycle[_ngcontent-%COMP%] {\\n    background: #ffffff;\\n    border-radius: 6px;\\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\\n    padding: 1rem;\\n  }\\n  \\n  .crop-header[_ngcontent-%COMP%] {\\n    margin-bottom: 1rem;\\n  }\\n  \\n  .crop-name[_ngcontent-%COMP%] {\\n    font-size: 1.25rem;\\n    font-weight: 600;\\n    color: #2c3e50;\\n    margin-bottom: 0.25rem;\\n  }\\n  \\n  .crop-dates[_ngcontent-%COMP%] {\\n    color: #7f8c8d;\\n    font-size: 0.85rem;\\n  }\\n  \\n  .crop-roadmap[_ngcontent-%COMP%] {\\n    display: flex;\\n    flex-direction: row;\\n    align-items: flex-start;\\n    gap: 1rem;\\n    overflow-x: auto;\\n    padding: 0.75rem 0;\\n    margin: 0 -0.5rem;\\n    padding: 0 0.5rem;\\n  }\\n  \\n  .roadmap-step[_ngcontent-%COMP%] {\\n    display: flex;\\n    align-items: flex-start;\\n    gap: 0.75rem;\\n    min-width: 180px;\\n    position: relative;\\n  }\\n  \\n  .roadmap-step[_ngcontent-%COMP%]:not(:last-child)::after {\\n    content: '';\\n    position: absolute;\\n    top: 16px;\\n    right: -0.75rem;\\n    width: 0.75rem;\\n    height: 2px;\\n    background-color: #e0e0e0;\\n  }\\n  \\n  .step-icon[_ngcontent-%COMP%] {\\n    width: 32px;\\n    height: 32px;\\n    border-radius: 50%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    background-color: #e0e0e0;\\n    color: #fff;\\n    font-weight: 600;\\n    flex-shrink: 0;\\n    font-size: 0.875rem;\\n  }\\n  \\n  .step-icon.active[_ngcontent-%COMP%] {\\n    background-color: #3498db;\\n  }\\n  \\n  .step-icon.completed[_ngcontent-%COMP%] {\\n    background-color: #2ecc71;\\n  }\\n  \\n  .step-content[_ngcontent-%COMP%] {\\n    flex-grow: 1;\\n    min-width: 0;\\n  }\\n  \\n  .step-label[_ngcontent-%COMP%] {\\n    font-weight: 500;\\n    color: #2c3e50;\\n    margin-bottom: 0.25rem;\\n    font-size: 0.9rem;\\n  }\\n  \\n  .step-details[_ngcontent-%COMP%] {\\n    background-color: #f8f9fa;\\n    border-radius: 4px;\\n    padding: 0.75rem;\\n    margin-top: 0.25rem;\\n  }\\n  \\n  .stage-description[_ngcontent-%COMP%] {\\n    color: #34495e;\\n    margin-bottom: 0.25rem;\\n    font-size: 0.85rem;\\n    line-height: 1.4;\\n  }\\n  \\n  .stage-date[_ngcontent-%COMP%] {\\n    color: #7f8c8d;\\n    font-size: 0.8rem;\\n    margin-bottom: 0.75rem;\\n  }\\n  \\n  .required-actions[_ngcontent-%COMP%] {\\n    margin-top: 0.5rem;\\n  }\\n  \\n  .required-actions[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%] {\\n    font-size: 0.85rem;\\n    color: #2c3e50;\\n    margin-bottom: 0.25rem;\\n    font-weight: 600;\\n  }\\n  \\n  .required-actions[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\\n    list-style-type: none;\\n    padding-left: 0;\\n    margin: 0;\\n  }\\n  \\n  .required-actions[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\n    color: #34495e;\\n    padding: 0.15rem 0;\\n    display: flex;\\n    align-items: center;\\n    font-size: 0.8rem;\\n    line-height: 1.4;\\n  }\\n  \\n  .required-actions[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]::before {\\n    content: '\\u2022';\\n    color: #3498db;\\n    margin-right: 0.4rem;\\n    font-size: 1rem;\\n    line-height: 0;\\n  }\\n  \\n  @media (max-width: 768px) {\\n    .sensors-grid[_ngcontent-%COMP%] {\\n      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\\n    }\\n    \\n    .crop-roadmap[_ngcontent-%COMP%] {\\n      padding: 0.5rem;\\n      gap: 1rem;\\n    }\\n    \\n    .roadmap-step[_ngcontent-%COMP%] {\\n      min-width: 150px;\\n    }\\n    \\n    .step-details[_ngcontent-%COMP%] {\\n      padding: 0.5rem;\\n    }\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n    });\n  }\n}","map":{"version":3,"names":["interval","Subject","combineLatest","takeUntil","map","i0","ɵɵelement","ɵɵproperty","ctx_r0","chartData","chartOptions","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","action_r9","ɵɵtemplate","DashboardComponent_div_35_div_9_div_6_div_6_li_4_Template","stage_r4","requiredActions","DashboardComponent_div_35_div_9_div_6_div_6_Template","description","ɵɵtextInterpolate1","ɵɵpipeBind2","startDate","length","DashboardComponent_div_35_div_9_div_6_Template","ɵɵpureFunction2","_c0","active","completed","i_r5","name","DashboardComponent_div_35_div_9_Template","cycle_r2","crop","ɵɵtextInterpolate2","plantedDate","expectedHarvestDate","stages","DashboardComponent","constructor","sensorService","aiService","cropService","destroy$","updateInterval$","currentMetrics","temperature","humidity","light","ec","ph","systemHealth","status","message","responsive","maintainAspectRatio","animation","duration","easing","scales","x","grid","color","borderColor","ticks","font","size","title","display","text","weight","y","plugins","legend","position","align","labels","boxWidth","padding","tooltip","mode","intersect","backgroundColor","titleColor","bodyColor","borderWidth","bodyFont","titleFont","interaction","axis","currentCrop","roadmapStages","cropCycles","ngOnInit","loadInitialData","setupRealTimeUpdates","loadCurrentCrop","ngOnDestroy","next","complete","loadSensorData","addMockCrops","pipe","subscribe","sensorIds","histories$","id","getSensorHistory","histories","updateCurrentMetrics","processHistoriesIntoChartData","error","console","loadMockData","getLatestValue","history","latestReading","Number","value","updateSystemHealth","isOptimal","min","max","allOptimal","someWarning","h","Date","timestamp","toLocaleTimeString","datasets","label","data","tension","fill","now","Array","from","_","i","d","getTime","hour12","Math","random","startIrrigation","log","exportData","blob","Blob","JSON","stringify","type","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","getCrops","crops","createRoadmapStages","mockCrops","scientificName","imageUrl","category","growthCycle","currentStage","order","isCompleted","idealConditions","unit","health","farmId","zoneId","idealTemperature","idealHumidity","idealLight","aiSuggestion","today","totalDays","ceil","daysSincePlanting","progressPercentage","ɵɵdirectiveInject","i1","SensorService","i2","AiService","i3","CropService","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","ɵɵlistener","DashboardComponent_Template_button_click_5_listener","DashboardComponent_Template_button_click_7_listener","DashboardComponent_app_chart_20_Template","DashboardComponent_div_35_Template","ɵɵpipeBind1"],"sources":["/home/injinia/eden-link/src/app/features/dashboard/dashboard.component.ts","/home/injinia/eden-link/src/app/features/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { SensorService } from '../../core/services/sensor.service';\nimport { AiService } from '../../core/services/ai.service';\nimport { CropService } from '../../core/services/crop.service';\nimport { interval, Subject, combineLatest } from 'rxjs';\nimport { takeUntil, map } from 'rxjs/operators';\nimport { Sensor } from '../../core/models/sensor.model';\nimport { ChartConfiguration } from 'chart.js';\nimport { Crop, CropStage } from '../../core/models/crop.model';\n\ninterface CurrentMetrics {\n  temperature: number;\n  humidity: number;\n  light: number;\n  ec: number;\n  ph: number;\n}\n\ninterface ChartData {\n  labels: string[];\n  datasets: Array<{\n    label: string;\n    data: number[];\n    borderColor: string;\n    backgroundColor: string;\n    tension: number;\n    fill: boolean;\n    borderWidth: number;\n  }>;\n}\n\ninterface RoadmapStage {\n  name: string;\n  completed: boolean;\n  active: boolean;\n  description?: string;\n  startDate?: Date;\n  requiredActions?: string[];\n}\n\ninterface CropCycle {\n  crop: Crop;\n  stages: RoadmapStage[];\n}\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private updateInterval$ = interval(5000);\n\n  currentMetrics: CurrentMetrics = {\n    temperature: 24,\n    humidity: 65,\n    light: 650,\n    ec: 1.8,\n    ph: 6.2\n  };\n\n  systemHealth = {\n    status: 'excellent',\n    message: 'All systems functioning optimally. Consider adjusting humidity levels for optimal bell pepper and coriander growth.'\n  };\n\n  chartData: ChartData | null = null;\n  \n  chartOptions: ChartConfiguration['options'] = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: 750,\n      easing: 'easeInOutQuart'\n    },\n    scales: {\n      x: {\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)',\n          borderColor: 'rgba(0, 0, 0, 0.3)'\n        },\n        ticks: {\n          color: '#666',\n          font: {\n            size: 11\n          }\n        },\n        title: {\n          display: true,\n          text: 'Time',\n          color: '#666',\n          font: {\n            size: 12,\n            weight: 'bold'\n          }\n        }\n      },\n      y: {\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)',\n          borderColor: 'rgba(0, 0, 0, 0.3)'\n        },\n        ticks: {\n          color: '#666',\n          font: {\n            size: 11\n          }\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n        align: 'center',\n        labels: {\n          boxWidth: 15,\n          padding: 15,\n          font: {\n            size: 11\n          }\n        }\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n        backgroundColor: 'rgba(255, 255, 255, 0.9)',\n        titleColor: '#000',\n        bodyColor: '#666',\n        borderColor: 'rgba(0, 0, 0, 0.1)',\n        borderWidth: 1,\n        padding: 10,\n        bodyFont: {\n          size: 11\n        },\n        titleFont: {\n          size: 12,\n          weight: 'bold'\n        }\n      }\n    },\n    interaction: {\n      mode: 'index',\n      axis: 'x',\n      intersect: false\n    }\n  };\n\n  currentCrop: Crop | null = null;\n  roadmapStages: RoadmapStage[] = [];\n  cropCycles: CropCycle[] = [];\n\n  constructor(\n    private sensorService: SensorService,\n    private aiService: AiService,\n    private cropService: CropService\n  ) {}\n\n  ngOnInit(): void {\n    this.loadInitialData();\n    this.setupRealTimeUpdates();\n    this.loadCurrentCrop();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private loadInitialData(): void {\n    this.loadSensorData();\n    // Ensure mock crops are loaded if no real data\n    this.addMockCrops();\n  }\n\n  private setupRealTimeUpdates(): void {\n    this.updateInterval$.pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(() => {\n      this.loadSensorData();\n    });\n  }\n\n  private loadSensorData(): void {\n    // Get history for all sensor types\n    const sensorIds = ['temp-1', 'humidity-1', 'light-1', 'ec-1', 'ph-1'];\n    const histories$ = sensorIds.map(id => this.sensorService.getSensorHistory(id, 1));\n\n    combineLatest(histories$).pipe(\n      takeUntil(this.destroy$),\n      map(histories => {\n        // Update current metrics with the latest values\n        this.updateCurrentMetrics(histories);\n        // Process data for the chart\n        return this.processHistoriesIntoChartData(histories);\n      })\n    ).subscribe({\n      next: (chartData: ChartData) => {\n        this.chartData = chartData;\n      },\n      error: (error: Error) => {\n        console.error('Error loading sensor data:', error);\n        this.loadMockData();\n      }\n    });\n  }\n\n  private updateCurrentMetrics(histories: any[][]): void {\n    // Get the most recent values from each history\n    const getLatestValue = (history: any[]) => {\n      if (!history || history.length === 0) return null;\n      const latestReading = history[history.length - 1];\n      return Number(latestReading.value);\n    };\n\n    const temperature = getLatestValue(histories[0]);\n    const humidity = getLatestValue(histories[1]);\n    const light = getLatestValue(histories[2]);\n    const ec = getLatestValue(histories[3]);\n    const ph = getLatestValue(histories[4]);\n\n    // Update current metrics with real values or fallback to defaults\n    this.currentMetrics = {\n      temperature: temperature ?? 24,\n      humidity: humidity ?? 65,\n      light: light ?? 650,\n      ec: ec ?? 1.8,\n      ph: ph ?? 6.2\n    };\n\n    // Update system health status based on current metrics\n    this.updateSystemHealth();\n  }\n\n  private updateSystemHealth(): void {\n    const isOptimal = (value: number, min: number, max: number) => \n      value >= min && value <= max;\n\n    // Adjusted ranges to accommodate both Bell Pepper and Coriander\n    const allOptimal = \n      isOptimal(this.currentMetrics.temperature, 20, 25) &&\n      isOptimal(this.currentMetrics.humidity, 55, 70) &&\n      isOptimal(this.currentMetrics.light, 500, 800) &&\n      isOptimal(this.currentMetrics.ec, 1.5, 2.2) &&\n      isOptimal(this.currentMetrics.ph, 6.0, 6.8);\n\n    const someWarning = \n      !isOptimal(this.currentMetrics.temperature, 18, 27) ||\n      !isOptimal(this.currentMetrics.humidity, 50, 75) ||\n      !isOptimal(this.currentMetrics.light, 400, 900) ||\n      !isOptimal(this.currentMetrics.ec, 1.2, 2.4) ||\n      !isOptimal(this.currentMetrics.ph, 5.8, 7.0);\n\n    if (allOptimal) {\n      this.systemHealth = {\n        status: 'excellent',\n        message: 'All systems functioning optimally. Both bell pepper and coriander are in ideal growing conditions.'\n      };\n    } else if (someWarning) {\n      this.systemHealth = {\n        status: 'warning',\n        message: 'Some parameters are outside optimal range. Adjust environmental controls for bell pepper and coriander needs.'\n      };\n    } else {\n      this.systemHealth = {\n        status: 'critical',\n        message: 'Critical: Multiple parameters require immediate attention for crop health.'\n      };\n    }\n  }\n\n  private processHistoriesIntoChartData(histories: any[][]): ChartData {\n    const labels = histories[0]?.map(h => new Date(h.timestamp).toLocaleTimeString()) ?? [];\n    const datasets = [\n      {\n        label: 'Temperature (°C)',\n        data: histories[0]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#006d5b',\n        backgroundColor: 'rgba(0, 109, 91, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'Humidity (%)',\n        data: histories[1]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#8d90bb',\n        backgroundColor: 'rgba(141, 144, 187, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'Light (lux/100)',\n        data: histories[2]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#ffc107',\n        backgroundColor: 'rgba(255, 193, 7, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'EC (mS/cm)',\n        data: histories[3]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#dc3545',\n        backgroundColor: 'rgba(220, 53, 69, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      },\n      {\n        label: 'pH',\n        data: histories[4]?.map(h => Number(h.value)) ?? [],\n        borderColor: '#6610f2',\n        backgroundColor: 'rgba(102, 16, 242, 0.1)',\n        tension: 0.4,\n        fill: true,\n        borderWidth: 2\n      }\n    ];\n\n    return { labels, datasets };\n  }\n\n  private loadMockData(): void {\n    const now = new Date();\n    const labels = Array.from({ length: 12 }, (_, i) => {\n      const d = new Date(now.getTime() - (11 - i) * 5000);\n      return d.toLocaleTimeString('en-US', { hour12: false });\n    });\n    \n    // Generate random values that stay within realistic ranges\n    const temperature = 22 + Math.random() * 4;\n    const humidity = 60 + Math.random() * 12;\n    const light = Math.max(0, 5 + Math.random() * 3) * 100;\n    const ec = 1.5 + Math.random() * 0.6;\n    const ph = 5.8 + Math.random() * 0.8;\n\n    // Update current metrics with the latest mock values\n    this.currentMetrics = {\n      temperature,\n      humidity,\n      light,\n      ec,\n      ph\n    };\n\n    // Update system health based on new values\n    this.updateSystemHealth();\n    \n    this.chartData = {\n      labels,\n      datasets: [\n        {\n          label: 'Temperature (°C)',\n          data: Array.from({ length: 12 }, (_, i) => i === 11 ? temperature : 22 + Math.random() * 4),\n          borderColor: '#006d5b',\n          backgroundColor: 'rgba(0, 109, 91, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'Humidity (%)',\n          data: Array.from({ length: 12 }, (_, i) => i === 11 ? humidity : 60 + Math.random() * 12),\n          borderColor: '#8d90bb',\n          backgroundColor: 'rgba(141, 144, 187, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'Light (lux/100)',\n          data: Array.from({ length: 12 }, (_, i) => i === 11 ? light/100 : Math.max(0, 5 + Math.random() * 3)),\n          borderColor: '#ffc107',\n          backgroundColor: 'rgba(255, 193, 7, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'EC (mS/cm)',\n          data: Array.from({ length: 12 }, (_, i) => i === 11 ? ec : 1.5 + Math.random() * 0.6),\n          borderColor: '#dc3545',\n          backgroundColor: 'rgba(220, 53, 69, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        },\n        {\n          label: 'pH',\n          data: Array.from({ length: 12 }, (_, i) => i === 11 ? ph : 5.8 + Math.random() * 0.8),\n          borderColor: '#6610f2',\n          backgroundColor: 'rgba(102, 16, 242, 0.1)',\n          tension: 0.4,\n          fill: true,\n          borderWidth: 2\n        }\n      ]\n    };\n  }\n\n  startIrrigation(): void {\n    this.sensorService.startIrrigation().subscribe(\n      () => {\n        console.log('Irrigation started');\n      },\n      error => {\n        console.error('Error starting irrigation:', error);\n      }\n    );\n  }\n\n  exportData(): void {\n    this.sensorService.exportData().subscribe(\n      (data) => {\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'sensor-data.json';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n      },\n      error => {\n        console.error('Error exporting data:', error);\n      }\n    );\n  }\n\n  private loadCurrentCrop(): void {\n    this.cropService.getCrops({ status: 'active' }).pipe(\n      takeUntil(this.destroy$)\n    ).subscribe({\n      next: (crops) => {\n        if (crops && crops.length > 0) {\n          this.cropCycles = crops.map(crop => ({\n            crop,\n            stages: this.createRoadmapStages(crop)\n          }));\n        } else {\n          // If no crops from service, use mock data\n          this.addMockCrops();\n        }\n      },\n      error: (error) => {\n        console.error('Error loading current crops:', error);\n        // Add mock data for demonstration\n        this.addMockCrops();\n      }\n    });\n  }\n\n  private addMockCrops(): void {\n    const mockCrops: Crop[] = [\n      {\n        id: 'mock-1',\n        name: 'Bell Pepper',\n        scientificName: 'Capsicum annuum',\n        imageUrl: '/assets/images/crops/bell-pepper.jpg',\n        category: 'Vegetable',\n        growthCycle: 100, // 100 days total\n        currentStage: {\n          id: 'stage-3',\n          name: 'Flowering',\n          order: 3,\n          description: 'Plants are developing flowers which will turn into peppers.',\n          startDate: new Date(2024, 3, 15), // April 15\n          isCompleted: false,\n          requiredActions: [\n            'Monitor temperature between 20-25°C',\n            'Maintain humidity around 60-70%',\n            'Ensure proper pollination'\n          ],\n          idealConditions: {\n            temperature: { min: 20, max: 25, unit: '°C' },\n            humidity: { min: 60, max: 70, unit: '%' },\n            light: { min: 14, max: 16, unit: 'hours' },\n            ph: { min: 6.0, max: 6.8, unit: 'pH' },\n            ec: { min: 1.8, max: 2.2, unit: 'mS/cm' }\n          }\n        },\n        plantedDate: new Date(2024, 2, 1), // March 1\n        expectedHarvestDate: new Date(2024, 5, 10), // June 10\n        status: 'active',\n        health: 95,\n        farmId: 'farm-1',\n        zoneId: 'zone-1',\n        idealTemperature: 23,\n        idealHumidity: 65,\n        idealLight: 14000,\n        aiSuggestion: 'Growth is on track. Consider increasing pollination activities for better fruit set.'\n      },\n      {\n        id: 'mock-2',\n        name: 'Coriander',\n        scientificName: 'Coriandrum sativum',\n        imageUrl: '/assets/images/crops/coriander.jpg',\n        category: 'Herb',\n        growthCycle: 45, // 45 days total\n        currentStage: {\n          id: 'stage-2',\n          name: 'Vegetation',\n          order: 2,\n          description: 'Plants are developing lush green leaves.',\n          startDate: new Date(2024, 3, 15), // April 15\n          isCompleted: false,\n          requiredActions: [\n            'Maintain soil moisture',\n            'Ensure good air circulation',\n            'Monitor for leaf spots'\n          ],\n          idealConditions: {\n            temperature: { min: 18, max: 22, unit: '°C' },\n            humidity: { min: 50, max: 60, unit: '%' },\n            light: { min: 12, max: 14, unit: 'hours' },\n            ph: { min: 6.2, max: 6.8, unit: 'pH' },\n            ec: { min: 1.2, max: 1.6, unit: 'mS/cm' }\n          }\n        },\n        plantedDate: new Date(2024, 3, 1), // April 1\n        expectedHarvestDate: new Date(2024, 4, 15), // May 15\n        status: 'active',\n        health: 90,\n        farmId: 'farm-1',\n        zoneId: 'zone-2',\n        idealTemperature: 20,\n        idealHumidity: 55,\n        idealLight: 12000,\n        aiSuggestion: 'Consider harvesting outer leaves to promote bushier growth.'\n      }\n    ];\n\n    // Ensure cropCycles is initialized with the mock data\n    this.cropCycles = mockCrops.map(crop => ({\n      crop,\n      stages: this.createRoadmapStages(crop)\n    }));\n  }\n\n  private createRoadmapStages(crop: Crop): RoadmapStage[] {\n    let stages: RoadmapStage[];\n    const today = new Date();\n    const totalDays = Math.ceil((crop.expectedHarvestDate.getTime() - crop.plantedDate.getTime()) / (1000 * 60 * 60 * 24));\n    const daysSincePlanting = Math.ceil((today.getTime() - crop.plantedDate.getTime()) / (1000 * 60 * 60 * 24));\n    const progressPercentage = (daysSincePlanting / totalDays) * 100;\n\n    if (crop.name === 'Bell Pepper') {\n      // Bell Pepper stages with approximate durations\n      stages = [\n        {\n          name: 'Germination',\n          description: 'Seeds sprouting and developing first leaves',\n          startDate: crop.plantedDate,\n          requiredActions: ['Maintain soil temperature 20-30°C', 'Keep soil moist'],\n          completed: progressPercentage >= 10,\n          active: progressPercentage < 10\n        },\n        {\n          name: 'Seedling',\n          description: 'Young plants developing true leaves',\n          startDate: new Date(crop.plantedDate.getTime() + (totalDays * 0.1 * 24 * 60 * 60 * 1000)),\n          requiredActions: ['Monitor light levels', 'Begin light fertilization'],\n          completed: progressPercentage >= 25,\n          active: progressPercentage >= 10 && progressPercentage < 25\n        },\n        {\n          name: 'Vegetation',\n          description: 'Plants growing rapidly and developing strong stems',\n          startDate: new Date(crop.plantedDate.getTime() + (totalDays * 0.25 * 24 * 60 * 60 * 1000)),\n          requiredActions: ['Support plant growth', 'Regular pruning'],\n          completed: progressPercentage >= 45,\n          active: progressPercentage >= 25 && progressPercentage < 45\n        },\n        {\n          name: 'Flowering',\n          description: 'Plants developing flowers',\n          startDate: new Date(crop.plantedDate.getTime() + (totalDays * 0.45 * 24 * 60 * 60 * 1000)),\n          requiredActions: ['Ensure pollination', 'Adjust nutrients'],\n          completed: progressPercentage >= 65,\n          active: progressPercentage >= 45 && progressPercentage < 65\n        },\n        {\n          name: 'Fruit Set',\n          description: 'Peppers forming and developing',\n          startDate: new Date(crop.plantedDate.getTime() + (totalDays * 0.65 * 24 * 60 * 60 * 1000)),\n          requiredActions: ['Support heavy fruits', 'Monitor calcium levels'],\n          completed: progressPercentage >= 85,\n          active: progressPercentage >= 65 && progressPercentage < 85\n        },\n        {\n          name: 'Harvest',\n          description: 'Peppers reaching full size and color',\n          startDate: new Date(crop.plantedDate.getTime() + (totalDays * 0.85 * 24 * 60 * 60 * 1000)),\n          requiredActions: ['Check pepper maturity', 'Harvest regularly'],\n          completed: progressPercentage >= 100,\n          active: progressPercentage >= 85 && progressPercentage < 100\n        }\n      ];\n    } else {\n      // Coriander stages with approximate durations\n      stages = [\n        {\n          name: 'Germination',\n          description: 'Seeds sprouting and developing first leaves',\n          startDate: crop.plantedDate,\n          requiredActions: ['Keep soil moist', 'Maintain warm temperature'],\n          completed: progressPercentage >= 15,\n          active: progressPercentage < 15\n        },\n        {\n          name: 'Seedling',\n          description: 'Young plants developing true leaves',\n          startDate: new Date(crop.plantedDate.getTime() + (totalDays * 0.15 * 24 * 60 * 60 * 1000)),\n          requiredActions: ['Thin seedlings', 'Monitor moisture'],\n          completed: progressPercentage >= 35,\n          active: progressPercentage >= 15 && progressPercentage < 35\n        },\n        {\n          name: 'Vegetation',\n          description: 'Plants developing full leaf growth',\n          startDate: new Date(crop.plantedDate.getTime() + (totalDays * 0.35 * 24 * 60 * 60 * 1000)),\n          requiredActions: ['Regular watering', 'Light fertilization'],\n          completed: progressPercentage >= 70,\n          active: progressPercentage >= 35 && progressPercentage < 70\n        },\n        {\n          name: 'Mature',\n          description: 'Plants reaching full size with mature leaves',\n          startDate: new Date(crop.plantedDate.getTime() + (totalDays * 0.70 * 24 * 60 * 60 * 1000)),\n          requiredActions: ['Begin harvesting leaves', 'Maintain moisture'],\n          completed: progressPercentage >= 90,\n          active: progressPercentage >= 70 && progressPercentage < 90\n        },\n        {\n          name: 'Harvest',\n          description: 'Full harvest stage',\n          startDate: new Date(crop.plantedDate.getTime() + (totalDays * 0.90 * 24 * 60 * 60 * 1000)),\n          requiredActions: ['Regular harvesting', 'Monitor for bolting'],\n          completed: progressPercentage >= 100,\n          active: progressPercentage >= 90 && progressPercentage < 100\n        }\n      ];\n    }\n\n    return stages;\n  }\n}","<div class=\"dashboard-container\">\n    <div class=\"dashboard-header\">\n      <h1 class=\"dashboard-title\">Dashboard</h1>\n      <div class=\"dashboard-actions\">\n        <button class=\"btn btn-outline\" (click)=\"exportData()\">Export Data</button>\n        <button class=\"btn btn-primary\" (click)=\"startIrrigation()\">Start Irrigation</button>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h2 class=\"card-title\">Real-Time Charts</h2>\n      </div>\n      <div class=\"metrics-grid\">\n        <app-metric-card\n          name=\"Temperature\"\n          icon=\"🌡️\"\n          [currentValue]=\"currentMetrics.temperature\"\n          [minOptimal]=\"20\"\n          [maxOptimal]=\"25\"\n          unit=\"°C\"\n          [maxRange]=\"35\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"Humidity\"\n          icon=\"💧\"\n          [currentValue]=\"currentMetrics.humidity\"\n          [minOptimal]=\"55\"\n          [maxOptimal]=\"70\"\n          unit=\"%\"\n          [maxRange]=\"100\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"Light\"\n          icon=\"☀️\"\n          [currentValue]=\"currentMetrics.light\"\n          [minOptimal]=\"500\"\n          [maxOptimal]=\"800\"\n          unit=\" lux\"\n          [maxRange]=\"1000\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"EC\"\n          icon=\"⚡\"\n          [currentValue]=\"currentMetrics.ec\"\n          [minOptimal]=\"1.5\"\n          [maxOptimal]=\"2.2\"\n          unit=\" mS/cm\"\n          [maxRange]=\"3.0\">\n        </app-metric-card>\n\n        <app-metric-card\n          name=\"pH\"\n          icon=\"🧪\"\n          [currentValue]=\"currentMetrics.ph\"\n          [minOptimal]=\"6.0\"\n          [maxOptimal]=\"6.8\"\n          unit=\"\"\n          [maxRange]=\"14\">\n        </app-metric-card>\n      </div>\n\n      <div class=\"chart-container\">\n        <app-chart \n          *ngIf=\"chartData\" \n          [chartData]=\"chartData\"\n          [chartOptions]=\"chartOptions\">\n        </app-chart>\n      </div>\n      <div class=\"system-health\" [ngClass]=\"'system-health-' + systemHealth.status\">\n        <div class=\"system-health-icon\">✓</div>\n        <div class=\"system-health-content\">\n          <div class=\"system-health-title\">System Health: {{ systemHealth.status | titlecase }}</div>\n          <div class=\"system-health-message\">{{ systemHealth.message }}</div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h2 class=\"card-title\">Active Crop Cycles</h2>\n      </div>\n      <div class=\"crop-cycles\">\n        <div class=\"crop-cycle\" *ngFor=\"let cycle of cropCycles\">\n          <div class=\"crop-header\">\n            <div class=\"crop-name\">{{ cycle.crop.name }}</div>\n            <div class=\"crop-dates\">\n              Planted: {{ cycle.crop.plantedDate | date:'mediumDate' }} • \n              Expected Harvest: {{ cycle.crop.expectedHarvestDate | date:'mediumDate' }}\n            </div>\n          </div>\n          <div class=\"crop-roadmap\">\n            <div class=\"roadmap-step\" *ngFor=\"let stage of cycle.stages; let i = index\">\n              <div class=\"step-icon\" \n                   [ngClass]=\"{'active': stage.active, 'completed': stage.completed}\">\n                {{ stage.completed ? '✓' : i + 1 }}\n              </div>\n              <div class=\"step-content\">\n                <div class=\"step-label\">{{ stage.name }}</div>\n                <div class=\"step-details\" *ngIf=\"stage.active\">\n                  <div class=\"stage-description\">{{ stage.description }}</div>\n                  <div class=\"stage-date\">Started: {{ stage.startDate | date:'mediumDate' }}</div>\n                  <div class=\"required-actions\" *ngIf=\"stage.requiredActions?.length\">\n                    <h4>Required Actions:</h4>\n                    <ul>\n                      <li *ngFor=\"let action of stage.requiredActions\">{{ action }}</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}