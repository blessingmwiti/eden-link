{"ast":null,"code":"import { Chart } from 'chart.js/auto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/sensor.service\";\nimport * as i2 from \"../../core/services/ai.service\";\nimport * as i3 from \"../../services/sensor-data.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../shared/components/sensor-card/sensor-card.component\";\nconst _c0 = [\"chartCanvas\"];\nfunction DashboardComponent_app_sensor_card_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-sensor-card\", 28);\n  }\n  if (rf & 2) {\n    const sensor_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"sensor\", sensor_r8);\n  }\n}\nfunction DashboardComponent_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"\\u2713\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"\\u2713\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_span_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"\\u26A0\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_span_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"\\u26A0\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c1 = (a0, a1) => ({\n  \"active\": a0,\n  \"completed\": a1\n});\nfunction DashboardComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 31);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const stage_r9 = ctx.$implicit;\n    const i_r10 = ctx.index;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(3, _c1, stage_r9.active, stage_r9.completed));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", stage_r9.completed ? \"\\u2713\" : i_r10 + 1, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(stage_r9.name);\n  }\n}\nfunction DashboardComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32)(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 33);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 34);\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"date\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const sensor_r11 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(sensor_r11.name);\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"online\", sensor_r11.isOnline);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", sensor_r11.isOnline ? \"Online\" : \"Offline\", \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Last Reading: \", i0.ɵɵpipeBind2(7, 5, sensor_r11.lastReading, \"medium\"), \" \");\n  }\n}\nexport class DashboardComponent {\n  constructor(sensorService, aiService, sensorDataService) {\n    this.sensorService = sensorService;\n    this.aiService = aiService;\n    this.sensorDataService = sensorDataService;\n    this.sensors = [];\n    this.systemHealth = {\n      status: 'excellent',\n      message: 'All systems functioning optimally. Consider adjusting CO₂ levels slightly for optimal tomato growth.',\n      cpuUsage: 45,\n      memoryUsage: 60,\n      storageUsage: 55\n    };\n    this.roadmapStages = [{\n      name: 'Germination',\n      completed: true,\n      active: false\n    }, {\n      name: 'Seedling',\n      completed: true,\n      active: false\n    }, {\n      name: 'Vegetation',\n      completed: false,\n      active: true\n    }, {\n      name: 'Flowering',\n      completed: false,\n      active: false\n    }, {\n      name: 'Fruiting',\n      completed: false,\n      active: false\n    }, {\n      name: 'Harvest',\n      completed: false,\n      active: false\n    }];\n  }\n  ngOnInit() {\n    this.loadSensorData();\n    this.loadChartData();\n    this.initChart();\n    // Update system metrics every 30 seconds\n    setInterval(() => this.updateSystemMetrics(), 30000);\n  }\n  ngOnDestroy() {\n    if (this.dataSubscription) {\n      this.dataSubscription.unsubscribe();\n    }\n    if (this.chart) {\n      this.chart.destroy();\n    }\n  }\n  loadSensorData() {\n    this.sensorService.getECSensors().subscribe(data => {\n      this.sensors = data;\n    }, error => {\n      console.error('Error fetching sensor data:', error);\n      // Fallback to mock data\n      this.loadMockSensorData();\n    });\n  }\n  loadMockSensorData() {\n    this.sensors = [{\n      id: 1,\n      name: 'Temperature',\n      value: '24°C',\n      icon: '🌡️',\n      type: 'Environmental',\n      unit: '°C',\n      status: 'normal',\n      isOnline: true,\n      lastReading: new Date()\n    }, {\n      id: 2,\n      name: 'Humidity',\n      value: '65%',\n      icon: '💧',\n      type: 'Environmental',\n      unit: '%',\n      status: 'normal',\n      isOnline: true,\n      lastReading: new Date()\n    }, {\n      id: 3,\n      name: 'Light',\n      value: '850 lux',\n      icon: '☀️',\n      type: 'Environmental',\n      unit: 'lux',\n      status: 'normal',\n      isOnline: true,\n      lastReading: new Date()\n    }, {\n      id: 4,\n      name: 'EC',\n      value: '1.8 mS/cm',\n      icon: '⚡',\n      type: 'Nutrient',\n      unit: 'mS/cm',\n      status: 'warning',\n      isOnline: false,\n      lastReading: new Date()\n    }, {\n      id: 5,\n      name: 'pH',\n      value: '6.2',\n      icon: '🧪',\n      type: 'Nutrient',\n      unit: '',\n      status: 'normal',\n      isOnline: true,\n      lastReading: new Date()\n    }, {\n      id: 6,\n      name: 'CO₂',\n      value: '450 ppm',\n      icon: '🌫️',\n      type: 'Gas',\n      unit: 'ppm',\n      status: 'normal',\n      isOnline: true,\n      lastReading: new Date()\n    }];\n  }\n  loadChartData() {\n    this.sensorService.getSensorHistory('defaultSensorId').subscribe(data => {\n      this.processChartData(data);\n    }, error => {\n      console.error('Error fetching chart data:', error);\n      // Fallback to mock chart data\n      this.loadMockChartData();\n    });\n  }\n  processChartData(data) {\n    // Process and format real data for chart\n    this.chartData = {\n      labels: data.timestamps,\n      datasets: data.datasets\n    };\n  }\n  loadMockChartData() {\n    const labels = Array.from({\n      length: 24\n    }, (_, i) => `${i}:00`);\n    this.chartData = {\n      labels,\n      datasets: [{\n        label: 'Temperature (°C)',\n        data: [22, 22.5, 23, 23.5, 24, 24.5, 25, 25.5, 26, 26.5, 26, 25.5, 25, 24.5, 24, 23.5, 23, 22.5, 22, 21.5, 21, 21.5, 22, 22],\n        borderColor: '#006d5b',\n        tension: 0.4,\n        fill: false\n      }, {\n        label: 'Humidity (%)',\n        data: [60, 61, 63, 64, 65, 67, 68, 70, 71, 72, 70, 68, 67, 65, 63, 62, 60, 59, 58, 57, 58, 59, 60, 60],\n        borderColor: '#8d90bb',\n        tension: 0.4,\n        fill: false\n      }, {\n        label: 'Light (lux/100)',\n        data: [0, 0, 0, 1, 3, 5, 7, 8, 8.5, 8.5, 8.5, 8.5, 8.5, 8, 7, 5, 3, 1, 0, 0, 0, 0, 0, 0],\n        borderColor: '#ffc107',\n        tension: 0.4,\n        fill: false\n      }]\n    };\n  }\n  startIrrigation() {\n    this.sensorService.startIrrigation().subscribe(() => alert('Irrigation started successfully!'), error => console.error('Error starting irrigation:', error));\n  }\n  exportData() {\n    this.sensorService.exportData().subscribe(data => {\n      const blob = new Blob([data], {\n        type: 'application/json'\n      }); // Set MIME type to JSON\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.setAttribute('hidden', '');\n      a.setAttribute('href', url);\n      a.setAttribute('download', 'eden-link-data-export.json'); // Update file extension to .json\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }, error => console.error('Error exporting data:', error));\n  }\n  initChart() {\n    this.dataSubscription = this.sensorDataService.getSensorData().subscribe(data => {\n      if (!this.chart && this.chartCanvas) {\n        this.createChart(data);\n      } else if (this.chart) {\n        this.updateChart(data);\n      }\n    });\n  }\n  createChart(data) {\n    const ctx = this.chartCanvas.nativeElement.getContext('2d');\n    const config = {\n      type: 'line',\n      data: {\n        labels: data.map(d => this.formatTimestamp(d.timestamp)),\n        datasets: [{\n          label: 'Temperature (°C)',\n          data: data.map(d => d.temperature),\n          borderColor: 'rgb(255, 99, 132)',\n          tension: 0.3,\n          yAxisID: 'temperature'\n        }, {\n          label: 'Humidity (%)',\n          data: data.map(d => d.humidity),\n          borderColor: 'rgb(54, 162, 235)',\n          tension: 0.3,\n          yAxisID: 'humidity'\n        }, {\n          label: 'Light (lux)',\n          data: data.map(d => d.light),\n          borderColor: 'rgb(255, 205, 86)',\n          tension: 0.3,\n          yAxisID: 'light'\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 0\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Time'\n            }\n          },\n          temperature: {\n            type: 'linear',\n            position: 'left',\n            title: {\n              display: true,\n              text: 'Temperature (°C)'\n            },\n            min: 15,\n            max: 30\n          },\n          humidity: {\n            type: 'linear',\n            position: 'right',\n            title: {\n              display: true,\n              text: 'Humidity (%)'\n            },\n            min: 55,\n            max: 85\n          },\n          light: {\n            type: 'linear',\n            position: 'right',\n            title: {\n              display: true,\n              text: 'Light (lux)'\n            },\n            min: 1500,\n            max: 6500,\n            grid: {\n              drawOnChartArea: false\n            }\n          }\n        },\n        plugins: {\n          title: {\n            display: true,\n            text: 'Greenhouse Environmental Conditions',\n            font: {\n              size: 16\n            }\n          },\n          legend: {\n            position: 'bottom'\n          }\n        }\n      }\n    };\n    this.chart = new Chart(ctx, config);\n  }\n  updateChart(data) {\n    if (!this.chart) return;\n    this.chart.data.labels = data.map(d => this.formatTimestamp(d.timestamp));\n    this.chart.data.datasets[0].data = data.map(d => d.temperature);\n    this.chart.data.datasets[1].data = data.map(d => d.humidity);\n    this.chart.data.datasets[2].data = data.map(d => d.light);\n    this.chart.update();\n  }\n  formatTimestamp(timestamp) {\n    return new Date(timestamp).toLocaleTimeString();\n  }\n  // Add method to determine system health status based on metrics\n  updateSystemHealthStatus() {\n    const cpuCritical = this.systemHealth.cpuUsage > 90;\n    const memoryCritical = this.systemHealth.memoryUsage > 90;\n    const storageCritical = this.systemHealth.storageUsage > 90;\n    const cpuWarning = this.systemHealth.cpuUsage > 80;\n    const memoryWarning = this.systemHealth.memoryUsage > 80;\n    const storageWarning = this.systemHealth.storageUsage > 80;\n    if (cpuCritical || memoryCritical || storageCritical) {\n      this.systemHealth.status = 'error';\n      this.systemHealth.message = 'Critical: System resources are severely constrained. Immediate attention required.';\n    } else if (cpuWarning || memoryWarning || storageWarning) {\n      this.systemHealth.status = 'warning';\n      this.systemHealth.message = 'Warning: System resources are running high. Consider optimization.';\n    } else if (this.systemHealth.cpuUsage > 70 || this.systemHealth.memoryUsage > 70 || this.systemHealth.storageUsage > 70) {\n      this.systemHealth.status = 'good';\n      this.systemHealth.message = 'System is functioning well but resource usage is elevated.';\n    } else {\n      this.systemHealth.status = 'excellent';\n      this.systemHealth.message = 'All systems functioning optimally.';\n    }\n  }\n  // Call this method periodically or when metrics update\n  updateSystemMetrics() {\n    // In a real application, these would come from a service\n    this.systemHealth.cpuUsage = Math.round(45 + Math.random() * 10);\n    this.systemHealth.memoryUsage = Math.round(60 + Math.random() * 10);\n    this.systemHealth.storageUsage = Math.round(55 + Math.random() * 5);\n    this.updateSystemHealthStatus();\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.SensorService), i0.ɵɵdirectiveInject(i2.AiService), i0.ɵɵdirectiveInject(i3.SensorDataService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      viewQuery: function DashboardComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartCanvas = _t.first);\n        }\n      },\n      decls: 65,\n      vars: 22,\n      consts: [[1, \"dashboard-container\"], [1, \"dashboard-header\"], [1, \"dashboard-title\"], [1, \"dashboard-actions\"], [1, \"btn\", \"btn-outline\", 3, \"click\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"sensors-grid\"], [3, \"sensor\", 4, \"ngFor\", \"ngForOf\"], [1, \"chart-container\"], [\"chartCanvas\", \"\"], [1, \"system-health\", 3, \"ngClass\"], [1, \"system-health-icon\"], [3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [1, \"system-health-content\"], [1, \"system-health-title\"], [1, \"system-health-message\"], [1, \"crop-roadmap\"], [\"class\", \"roadmap-step\", 4, \"ngFor\", \"ngForOf\"], [1, \"system-status\"], [1, \"status-grid\"], [\"class\", \"status-card\", 4, \"ngFor\", \"ngForOf\"], [1, \"status-card\", \"system-health\"], [1, \"health-metrics\"], [1, \"metric\"], [3, \"sensor\"], [1, \"roadmap-step\"], [1, \"step-icon\", 3, \"ngClass\"], [1, \"step-label\"], [1, \"status-card\"], [1, \"status-indicator\"], [1, \"last-reading\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\", 2);\n          i0.ɵɵtext(3, \"Dashboard\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 3)(5, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_5_listener() {\n            return ctx.exportData();\n          });\n          i0.ɵɵtext(6, \"Export Data\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_7_listener() {\n            return ctx.startIrrigation();\n          });\n          i0.ɵɵtext(8, \"Start Irrigation\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 7)(11, \"h2\", 8);\n          i0.ɵɵtext(12, \"Sensor Status\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 9);\n          i0.ɵɵtemplate(14, DashboardComponent_app_sensor_card_14_Template, 1, 1, \"app-sensor-card\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 6)(16, \"div\", 7)(17, \"h2\", 8);\n          i0.ɵɵtext(18, \"Real-Time Charts\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(19, \"div\", 11);\n          i0.ɵɵelement(20, \"canvas\", null, 12);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"div\", 13)(23, \"div\", 14)(24, \"span\", 15);\n          i0.ɵɵtemplate(25, DashboardComponent_span_25_Template, 2, 0, \"span\", 16)(26, DashboardComponent_span_26_Template, 2, 0, \"span\", 16)(27, DashboardComponent_span_27_Template, 2, 0, \"span\", 16)(28, DashboardComponent_span_28_Template, 2, 0, \"span\", 16);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(29, \"div\", 17)(30, \"div\", 18);\n          i0.ɵɵtext(31);\n          i0.ɵɵpipe(32, \"titlecase\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"div\", 19);\n          i0.ɵɵtext(34);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(35, \"div\", 6)(36, \"div\", 7)(37, \"h2\", 8);\n          i0.ɵɵtext(38, \"Crop Cycle Roadmap\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(39, \"div\", 20);\n          i0.ɵɵtemplate(40, DashboardComponent_div_40_Template, 5, 6, \"div\", 21);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(41, \"div\", 22)(42, \"h2\");\n          i0.ɵɵtext(43, \"System Status\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(44, \"div\", 23);\n          i0.ɵɵtemplate(45, DashboardComponent_div_45_Template, 8, 8, \"div\", 24);\n          i0.ɵɵelementStart(46, \"div\", 25)(47, \"h3\");\n          i0.ɵɵtext(48, \"System Health\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(49, \"div\", 26)(50, \"div\", 27)(51, \"span\");\n          i0.ɵɵtext(52, \"CPU Usage:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(53, \"span\");\n          i0.ɵɵtext(54);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(55, \"div\", 27)(56, \"span\");\n          i0.ɵɵtext(57, \"Memory Usage:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(58, \"span\");\n          i0.ɵɵtext(59);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(60, \"div\", 27)(61, \"span\");\n          i0.ɵɵtext(62, \"Storage:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(63, \"span\");\n          i0.ɵɵtext(64);\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(14);\n          i0.ɵɵproperty(\"ngForOf\", ctx.sensors);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngClass\", \"system-health-\" + ctx.systemHealth.status);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngSwitch\", ctx.systemHealth.status);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngSwitchCase\", \"excellent\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngSwitchCase\", \"good\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngSwitchCase\", \"warning\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngSwitchCase\", \"error\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"System Health: \", i0.ɵɵpipeBind1(32, 20, ctx.systemHealth.status), \"\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(ctx.systemHealth.message);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.roadmapStages);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngForOf\", ctx.sensors);\n          i0.ɵɵadvance(8);\n          i0.ɵɵclassProp(\"warning\", ctx.systemHealth.cpuUsage > 80);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.systemHealth.cpuUsage, \"% \");\n          i0.ɵɵadvance(4);\n          i0.ɵɵclassProp(\"warning\", ctx.systemHealth.memoryUsage > 80);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.systemHealth.memoryUsage, \"% \");\n          i0.ɵɵadvance(4);\n          i0.ɵɵclassProp(\"warning\", ctx.systemHealth.storageUsage > 80);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.systemHealth.storageUsage, \"% \");\n        }\n      },\n      dependencies: [i4.NgClass, i4.NgForOf, i4.NgSwitch, i4.NgSwitchCase, i5.SensorCardComponent, i4.TitleCasePipe, i4.DatePipe],\n      styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n  padding: 2rem;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 2rem;\\n  background-color: #f8f9fa;\\n  min-height: 100vh;\\n}\\n\\n.chart-container[_ngcontent-%COMP%] {\\n  background: white;\\n  border-radius: 12px;\\n  padding: 1.5rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\\n  height: 400px;\\n}\\n\\n.system-status[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n  margin-bottom: 1.5rem;\\n  color: #2c3e50;\\n  font-weight: 600;\\n}\\n\\n.status-grid[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\\n  gap: 1.5rem;\\n}\\n\\n.status-card[_ngcontent-%COMP%] {\\n  background: white;\\n  border-radius: 12px;\\n  padding: 1.5rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\\n}\\n.status-card[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  margin: 0 0 1rem;\\n  color: #2c3e50;\\n  font-size: 1.1rem;\\n  font-weight: 600;\\n}\\n\\n.status-indicator[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  padding: 0.5rem 1rem;\\n  border-radius: 20px;\\n  font-size: 0.9rem;\\n  font-weight: 500;\\n  color: white;\\n}\\n.status-indicator.normal[_ngcontent-%COMP%] {\\n  background-color: #28a745;\\n}\\n.status-indicator.warning[_ngcontent-%COMP%] {\\n  background-color: #ffc107;\\n  color: #212529;\\n}\\n.status-indicator.alert[_ngcontent-%COMP%] {\\n  background-color: #dc3545;\\n}\\n.status-indicator.online[_ngcontent-%COMP%] {\\n  background-color: #28a745;\\n}\\n\\n.last-reading[_ngcontent-%COMP%] {\\n  margin-top: 1rem;\\n  color: #6c757d;\\n  font-size: 0.9rem;\\n}\\n\\n.health-metrics[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 1rem;\\n}\\n\\n.metric[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  padding: 0.5rem 0;\\n  border-bottom: 1px solid #e9ecef;\\n}\\n.metric[_ngcontent-%COMP%]:last-child {\\n  border-bottom: none;\\n}\\n.metric[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:first-child {\\n  color: #6c757d;\\n}\\n.metric[_ngcontent-%COMP%]   span.warning[_ngcontent-%COMP%] {\\n  color: #dc3545;\\n  font-weight: 600;\\n}\\n\\n.system-health[_ngcontent-%COMP%] {\\n  margin-top: 1rem;\\n  padding: 1rem;\\n  border-radius: 8px;\\n  display: flex;\\n  align-items: flex-start;\\n  gap: 1rem;\\n}\\n.system-health-icon[_ngcontent-%COMP%] {\\n  font-size: 1.5rem;\\n  line-height: 1;\\n}\\n.system-health-content[_ngcontent-%COMP%] {\\n  flex: 1;\\n}\\n.system-health-title[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n  margin-bottom: 0.5rem;\\n}\\n.system-health-message[_ngcontent-%COMP%] {\\n  color: #6c757d;\\n  font-size: 0.9rem;\\n}\\n.system-health-excellent[_ngcontent-%COMP%] {\\n  background-color: rgba(40, 167, 69, 0.1);\\n  border: 1px solid rgba(40, 167, 69, 0.2);\\n}\\n.system-health-excellent[_ngcontent-%COMP%]   .system-health-icon[_ngcontent-%COMP%] {\\n  color: #28a745;\\n}\\n.system-health-good[_ngcontent-%COMP%] {\\n  background-color: rgba(23, 162, 184, 0.1);\\n  border: 1px solid rgba(23, 162, 184, 0.2);\\n}\\n.system-health-good[_ngcontent-%COMP%]   .system-health-icon[_ngcontent-%COMP%] {\\n  color: #17a2b8;\\n}\\n.system-health-warning[_ngcontent-%COMP%] {\\n  background-color: rgba(255, 193, 7, 0.1);\\n  border: 1px solid rgba(255, 193, 7, 0.2);\\n}\\n.system-health-warning[_ngcontent-%COMP%]   .system-health-icon[_ngcontent-%COMP%] {\\n  color: #ffc107;\\n}\\n.system-health-error[_ngcontent-%COMP%] {\\n  background-color: rgba(220, 53, 69, 0.1);\\n  border: 1px solid rgba(220, 53, 69, 0.2);\\n}\\n.system-health-error[_ngcontent-%COMP%]   .system-health-icon[_ngcontent-%COMP%] {\\n  color: #dc3545;\\n}\\n\\n@media (max-width: 768px) {\\n  .dashboard-container[_ngcontent-%COMP%] {\\n    padding: 1rem;\\n  }\\n  .chart-container[_ngcontent-%COMP%] {\\n    height: 300px;\\n  }\\n  .status-grid[_ngcontent-%COMP%] {\\n    grid-template-columns: 1fr;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxTQUFBO0VBQ0EseUJBQUE7RUFDQSxpQkFBQTtBQUNGOztBQUVBO0VBQ0UsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLGVBQUE7RUFDQSx5Q0FBQTtFQUNBLGFBQUE7QUFDRjs7QUFHRTtFQUNFLHFCQUFBO0VBQ0EsY0FBQTtFQUNBLGdCQUFBO0FBQUo7O0FBSUE7RUFDRSxhQUFBO0VBQ0EsMkRBQUE7RUFDQSxXQUFBO0FBREY7O0FBSUE7RUFDRSxpQkFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLHlDQUFBO0FBREY7QUFHRTtFQUNFLGdCQUFBO0VBQ0EsY0FBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7QUFESjs7QUFLQTtFQUNFLHFCQUFBO0VBQ0Esb0JBQUE7RUFDQSxtQkFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxZQUFBO0FBRkY7QUFJRTtFQUNFLHlCQUFBO0FBRko7QUFLRTtFQUNFLHlCQUFBO0VBQ0EsY0FBQTtBQUhKO0FBTUU7RUFDRSx5QkFBQTtBQUpKO0FBT0U7RUFDRSx5QkFBQTtBQUxKOztBQVNBO0VBQ0UsZ0JBQUE7RUFDQSxjQUFBO0VBQ0EsaUJBQUE7QUFORjs7QUFTQTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLFNBQUE7QUFORjs7QUFTQTtFQUNFLGFBQUE7RUFDQSw4QkFBQTtFQUNBLG1CQUFBO0VBQ0EsaUJBQUE7RUFDQSxnQ0FBQTtBQU5GO0FBUUU7RUFDRSxtQkFBQTtBQU5KO0FBVUk7RUFDRSxjQUFBO0FBUk47QUFXSTtFQUNFLGNBQUE7RUFDQSxnQkFBQTtBQVROOztBQWNBO0VBQ0UsZ0JBQUE7RUFDQSxhQUFBO0VBQ0Esa0JBQUE7RUFDQSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxTQUFBO0FBWEY7QUFhRTtFQUNFLGlCQUFBO0VBQ0EsY0FBQTtBQVhKO0FBY0U7RUFDRSxPQUFBO0FBWko7QUFlRTtFQUNFLGdCQUFBO0VBQ0EscUJBQUE7QUFiSjtBQWdCRTtFQUNFLGNBQUE7RUFDQSxpQkFBQTtBQWRKO0FBa0JFO0VBQ0Usd0NBQUE7RUFDQSx3Q0FBQTtBQWhCSjtBQWlCSTtFQUNFLGNBQUE7QUFmTjtBQW1CRTtFQUNFLHlDQUFBO0VBQ0EseUNBQUE7QUFqQko7QUFrQkk7RUFDRSxjQUFBO0FBaEJOO0FBb0JFO0VBQ0Usd0NBQUE7RUFDQSx3Q0FBQTtBQWxCSjtBQW1CSTtFQUNFLGNBQUE7QUFqQk47QUFxQkU7RUFDRSx3Q0FBQTtFQUNBLHdDQUFBO0FBbkJKO0FBb0JJO0VBQ0UsY0FBQTtBQWxCTjs7QUF1QkE7RUFDRTtJQUNFLGFBQUE7RUFwQkY7RUF1QkE7SUFDRSxhQUFBO0VBckJGO0VBd0JBO0lBQ0UsMEJBQUE7RUF0QkY7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5kYXNoYm9hcmQtY29udGFpbmVyIHtcbiAgcGFkZGluZzogMnJlbTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiAycmVtO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcbn1cblxuLmNoYXJ0LWNvbnRhaW5lciB7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAxLjVyZW07XG4gIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMDUpO1xuICBoZWlnaHQ6IDQwMHB4O1xufVxuXG4uc3lzdGVtLXN0YXR1cyB7XG4gIGgyIHtcbiAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW07XG4gICAgY29sb3I6ICMyYzNlNTA7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgfVxufVxuXG4uc3RhdHVzLWdyaWQge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDI4MHB4LCAxZnIpKTtcbiAgZ2FwOiAxLjVyZW07XG59XG5cbi5zdGF0dXMtY2FyZCB7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAxLjVyZW07XG4gIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMDUpO1xuXG4gIGgzIHtcbiAgICBtYXJnaW46IDAgMCAxcmVtO1xuICAgIGNvbG9yOiAjMmMzZTUwO1xuICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIH1cbn1cblxuLnN0YXR1cy1pbmRpY2F0b3Ige1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBhZGRpbmc6IDAuNXJlbSAxcmVtO1xuICBib3JkZXItcmFkaXVzOiAyMHB4O1xuICBmb250LXNpemU6IDAuOXJlbTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY29sb3I6IHdoaXRlO1xuXG4gICYubm9ybWFsIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1O1xuICB9XG5cbiAgJi53YXJuaW5nIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjMTA3O1xuICAgIGNvbG9yOiAjMjEyNTI5O1xuICB9XG5cbiAgJi5hbGVydCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RjMzU0NTtcbiAgfVxuXG4gICYub25saW5lIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjhhNzQ1O1xuICB9XG59XG5cbi5sYXN0LXJlYWRpbmcge1xuICBtYXJnaW4tdG9wOiAxcmVtO1xuICBjb2xvcjogIzZjNzU3ZDtcbiAgZm9udC1zaXplOiAwLjlyZW07XG59XG5cbi5oZWFsdGgtbWV0cmljcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGdhcDogMXJlbTtcbn1cblxuLm1ldHJpYyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgcGFkZGluZzogMC41cmVtIDA7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZTllY2VmO1xuXG4gICY6bGFzdC1jaGlsZCB7XG4gICAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgfVxuXG4gIHNwYW4ge1xuICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgY29sb3I6ICM2Yzc1N2Q7XG4gICAgfVxuXG4gICAgJi53YXJuaW5nIHtcbiAgICAgIGNvbG9yOiAjZGMzNTQ1O1xuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICB9XG4gIH1cbn1cblxuLnN5c3RlbS1oZWFsdGgge1xuICBtYXJnaW4tdG9wOiAxcmVtO1xuICBwYWRkaW5nOiAxcmVtO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICBnYXA6IDFyZW07XG5cbiAgJi1pY29uIHtcbiAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICBsaW5lLWhlaWdodDogMTtcbiAgfVxuXG4gICYtY29udGVudCB7XG4gICAgZmxleDogMTtcbiAgfVxuXG4gICYtdGl0bGUge1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xuICB9XG5cbiAgJi1tZXNzYWdlIHtcbiAgICBjb2xvcjogIzZjNzU3ZDtcbiAgICBmb250LXNpemU6IDAuOXJlbTtcbiAgfVxuXG4gIC8vIEhlYWx0aCBzdGF0dXMgdmFyaWF0aW9uc1xuICAmLWV4Y2VsbGVudCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg0MCwgMTY3LCA2OSwgMC4xKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDQwLCAxNjcsIDY5LCAwLjIpO1xuICAgIC5zeXN0ZW0taGVhbHRoLWljb24ge1xuICAgICAgY29sb3I6ICMyOGE3NDU7XG4gICAgfVxuICB9XG5cbiAgJi1nb29kIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIzLCAxNjIsIDE4NCwgMC4xKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDIzLCAxNjIsIDE4NCwgMC4yKTtcbiAgICAuc3lzdGVtLWhlYWx0aC1pY29uIHtcbiAgICAgIGNvbG9yOiAjMTdhMmI4O1xuICAgIH1cbiAgfVxuXG4gICYtd2FybmluZyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDE5MywgNywgMC4xKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI1NSwgMTkzLCA3LCAwLjIpO1xuICAgIC5zeXN0ZW0taGVhbHRoLWljb24ge1xuICAgICAgY29sb3I6ICNmZmMxMDc7XG4gICAgfVxuICB9XG5cbiAgJi1lcnJvciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMjAsIDUzLCA2OSwgMC4xKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDIyMCwgNTMsIDY5LCAwLjIpO1xuICAgIC5zeXN0ZW0taGVhbHRoLWljb24ge1xuICAgICAgY29sb3I6ICNkYzM1NDU7XG4gICAgfVxuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAuZGFzaGJvYXJkLWNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMXJlbTtcbiAgfVxuXG4gIC5jaGFydC1jb250YWluZXIge1xuICAgIGhlaWdodDogMzAwcHg7XG4gIH1cblxuICAuc3RhdHVzLWdyaWQge1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xuICB9XG59ICJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"names":["Chart","i0","ɵɵelement","ɵɵproperty","sensor_r8","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵpureFunction2","_c1","stage_r9","active","completed","ɵɵtextInterpolate1","i_r10","ɵɵtextInterpolate","name","sensor_r11","ɵɵclassProp","isOnline","ɵɵpipeBind2","lastReading","DashboardComponent","constructor","sensorService","aiService","sensorDataService","sensors","systemHealth","status","message","cpuUsage","memoryUsage","storageUsage","roadmapStages","ngOnInit","loadSensorData","loadChartData","initChart","setInterval","updateSystemMetrics","ngOnDestroy","dataSubscription","unsubscribe","chart","destroy","getECSensors","subscribe","data","error","console","loadMockSensorData","id","value","icon","type","unit","Date","getSensorHistory","processChartData","loadMockChartData","chartData","labels","timestamps","datasets","Array","from","length","_","i","label","borderColor","tension","fill","startIrrigation","alert","exportData","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","setAttribute","body","appendChild","click","removeChild","getSensorData","chartCanvas","createChart","updateChart","ctx","nativeElement","getContext","config","map","d","formatTimestamp","timestamp","temperature","yAxisID","humidity","light","options","responsive","maintainAspectRatio","animation","duration","scales","x","title","display","text","position","min","max","grid","drawOnChartArea","plugins","font","size","legend","update","toLocaleTimeString","updateSystemHealthStatus","cpuCritical","memoryCritical","storageCritical","cpuWarning","memoryWarning","storageWarning","Math","round","random","ɵɵdirectiveInject","i1","SensorService","i2","AiService","i3","SensorDataService","selectors","viewQuery","DashboardComponent_Query","rf","ɵɵlistener","DashboardComponent_Template_button_click_5_listener","DashboardComponent_Template_button_click_7_listener","ɵɵtemplate","DashboardComponent_app_sensor_card_14_Template","DashboardComponent_span_25_Template","DashboardComponent_span_26_Template","DashboardComponent_span_27_Template","DashboardComponent_span_28_Template","DashboardComponent_div_40_Template","DashboardComponent_div_45_Template","ɵɵpipeBind1"],"sources":["/home/injinia/eden-link/src/app/features/dashboard/dashboard.component.ts","/home/injinia/eden-link/src/app/features/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { SensorService } from '../../core/services/sensor.service';\nimport { AiService } from '../../core/services/ai.service';\nimport { Sensor } from '../../core/models/sensor.model';\nimport { Chart, ChartConfiguration } from 'chart.js/auto';\nimport { SensorDataService, SensorData } from '../../services/sensor-data.service';\nimport { Subscription } from 'rxjs';\n\ninterface SystemHealth {\n  status: 'excellent' | 'good' | 'warning' | 'error';\n  message: string;\n  cpuUsage: number;\n  memoryUsage: number;\n  storageUsage: number;\n}\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit, OnDestroy {\n  @ViewChild('chartCanvas') chartCanvas!: ElementRef;\n  \n  private chart: Chart | undefined;\n  private dataSubscription: Subscription | undefined;\n\n  sensors: Sensor[] = [];\n  systemHealth: SystemHealth = {\n    status: 'excellent',\n    message: 'All systems functioning optimally. Consider adjusting CO₂ levels slightly for optimal tomato growth.',\n    cpuUsage: 45,\n    memoryUsage: 60,\n    storageUsage: 55\n  };\n  chartData: any;\n  roadmapStages = [\n    { name: 'Germination', completed: true, active: false },\n    { name: 'Seedling', completed: true, active: false },\n    { name: 'Vegetation', completed: false, active: true },\n    { name: 'Flowering', completed: false, active: false },\n    { name: 'Fruiting', completed: false, active: false },\n    { name: 'Harvest', completed: false, active: false }\n  ];\n\n  constructor(\n    private sensorService: SensorService,\n    private aiService: AiService,\n    private sensorDataService: SensorDataService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadSensorData();\n    this.loadChartData();\n    this.initChart();\n    \n    // Update system metrics every 30 seconds\n    setInterval(() => this.updateSystemMetrics(), 30000);\n  }\n\n  ngOnDestroy() {\n    if (this.dataSubscription) {\n      this.dataSubscription.unsubscribe();\n    }\n    if (this.chart) {\n      this.chart.destroy();\n    }\n  }\n\n  loadSensorData(): void {\n    this.sensorService.getECSensors().subscribe(\n      (data) => {\n        this.sensors = data;\n      },\n      (error) => {\n        console.error('Error fetching sensor data:', error);\n        // Fallback to mock data\n        this.loadMockSensorData();\n      }\n    );\n  }\n\n  loadMockSensorData(): void {\n    this.sensors = [\n      { id: 1, name: 'Temperature', value: '24°C', icon: '🌡️', type: 'Environmental', unit: '°C', status: 'normal', isOnline: true, lastReading: new Date() },\n      { id: 2, name: 'Humidity', value: '65%', icon: '💧', type: 'Environmental', unit: '%', status: 'normal', isOnline: true, lastReading: new Date() },\n      { id: 3, name: 'Light', value: '850 lux', icon: '☀️', type: 'Environmental', unit: 'lux', status: 'normal', isOnline: true, lastReading: new Date() },\n      { id: 4, name: 'EC', value: '1.8 mS/cm', icon: '⚡', type: 'Nutrient', unit: 'mS/cm', status: 'warning', isOnline: false, lastReading: new Date() },\n      { id: 5, name: 'pH', value: '6.2', icon: '🧪', type: 'Nutrient', unit: '', status: 'normal', isOnline: true, lastReading: new Date() },\n      { id: 6, name: 'CO₂', value: '450 ppm', icon: '🌫️', type: 'Gas', unit: 'ppm', status: 'normal', isOnline: true, lastReading: new Date() }\n    ];\n  }\n\n  loadChartData(): void {\n    this.sensorService.getSensorHistory('defaultSensorId').subscribe(\n      (data) => {\n        this.processChartData(data);\n      },\n      (error) => {\n        console.error('Error fetching chart data:', error);\n        // Fallback to mock chart data\n        this.loadMockChartData();\n      }\n    );\n  }\n\n  processChartData(data: any): void {\n    // Process and format real data for chart\n    this.chartData = {\n      labels: data.timestamps,\n      datasets: data.datasets\n    };\n  }\n\n  loadMockChartData(): void {\n    const labels = Array.from({ length: 24 }, (_, i) => `${i}:00`);\n    \n    this.chartData = {\n      labels,\n      datasets: [\n        {\n          label: 'Temperature (°C)',\n          data: [22, 22.5, 23, 23.5, 24, 24.5, 25, 25.5, 26, 26.5, 26, 25.5, 25, 24.5, 24, 23.5, 23, 22.5, 22, 21.5, 21, 21.5, 22, 22],\n          borderColor: '#006d5b',\n          tension: 0.4,\n          fill: false\n        },\n        {\n          label: 'Humidity (%)',\n          data: [60, 61, 63, 64, 65, 67, 68, 70, 71, 72, 70, 68, 67, 65, 63, 62, 60, 59, 58, 57, 58, 59, 60, 60],\n          borderColor: '#8d90bb',\n          tension: 0.4,\n          fill: false\n        },\n        {\n          label: 'Light (lux/100)',\n          data: [0, 0, 0, 1, 3, 5, 7, 8, 8.5, 8.5, 8.5, 8.5, 8.5, 8, 7, 5, 3, 1, 0, 0, 0, 0, 0, 0],\n          borderColor: '#ffc107',\n          tension: 0.4,\n          fill: false\n        }\n      ]\n    };\n  }\n\n  startIrrigation(): void {\n    this.sensorService.startIrrigation().subscribe(\n      () => alert('Irrigation started successfully!'),\n      (error) => console.error('Error starting irrigation:', error)\n    );\n  }\n\n  exportData(): void {\n    this.sensorService.exportData().subscribe(\n      (data) => {\n        const blob = new Blob([data], { type: 'application/json' }); // Set MIME type to JSON\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.setAttribute('hidden', '');\n        a.setAttribute('href', url);\n        a.setAttribute('download', 'eden-link-data-export.json'); // Update file extension to .json\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      },\n      (error) => console.error('Error exporting data:', error)\n    );\n  }\n\n  private initChart() {\n    this.dataSubscription = this.sensorDataService.getSensorData().subscribe(data => {\n      if (!this.chart && this.chartCanvas) {\n        this.createChart(data);\n      } else if (this.chart) {\n        this.updateChart(data);\n      }\n    });\n  }\n\n  private createChart(data: SensorData[]) {\n    const ctx = this.chartCanvas.nativeElement.getContext('2d');\n    \n    const config: ChartConfiguration = {\n      type: 'line',\n      data: {\n        labels: data.map(d => this.formatTimestamp(d.timestamp)),\n        datasets: [\n          {\n            label: 'Temperature (°C)',\n            data: data.map(d => d.temperature),\n            borderColor: 'rgb(255, 99, 132)',\n            tension: 0.3,\n            yAxisID: 'temperature'\n          },\n          {\n            label: 'Humidity (%)',\n            data: data.map(d => d.humidity),\n            borderColor: 'rgb(54, 162, 235)',\n            tension: 0.3,\n            yAxisID: 'humidity'\n          },\n          {\n            label: 'Light (lux)',\n            data: data.map(d => d.light),\n            borderColor: 'rgb(255, 205, 86)',\n            tension: 0.3,\n            yAxisID: 'light'\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 0\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Time'\n            }\n          },\n          temperature: {\n            type: 'linear',\n            position: 'left',\n            title: {\n              display: true,\n              text: 'Temperature (°C)'\n            },\n            min: 15,\n            max: 30\n          },\n          humidity: {\n            type: 'linear',\n            position: 'right',\n            title: {\n              display: true,\n              text: 'Humidity (%)'\n            },\n            min: 55,\n            max: 85\n          },\n          light: {\n            type: 'linear',\n            position: 'right',\n            title: {\n              display: true,\n              text: 'Light (lux)'\n            },\n            min: 1500,\n            max: 6500,\n            grid: {\n              drawOnChartArea: false\n            }\n          }\n        },\n        plugins: {\n          title: {\n            display: true,\n            text: 'Greenhouse Environmental Conditions',\n            font: {\n              size: 16\n            }\n          },\n          legend: {\n            position: 'bottom'\n          }\n        }\n      }\n    };\n\n    this.chart = new Chart(ctx, config);\n  }\n\n  private updateChart(data: SensorData[]) {\n    if (!this.chart) return;\n\n    this.chart.data.labels = data.map(d => this.formatTimestamp(d.timestamp));\n    this.chart.data.datasets[0].data = data.map(d => d.temperature);\n    this.chart.data.datasets[1].data = data.map(d => d.humidity);\n    this.chart.data.datasets[2].data = data.map(d => d.light);\n    \n    this.chart.update();\n  }\n\n  private formatTimestamp(timestamp: Date): string {\n    return new Date(timestamp).toLocaleTimeString();\n  }\n\n  // Add method to determine system health status based on metrics\n  private updateSystemHealthStatus(): void {\n    const cpuCritical = this.systemHealth.cpuUsage > 90;\n    const memoryCritical = this.systemHealth.memoryUsage > 90;\n    const storageCritical = this.systemHealth.storageUsage > 90;\n    \n    const cpuWarning = this.systemHealth.cpuUsage > 80;\n    const memoryWarning = this.systemHealth.memoryUsage > 80;\n    const storageWarning = this.systemHealth.storageUsage > 80;\n\n    if (cpuCritical || memoryCritical || storageCritical) {\n      this.systemHealth.status = 'error';\n      this.systemHealth.message = 'Critical: System resources are severely constrained. Immediate attention required.';\n    } else if (cpuWarning || memoryWarning || storageWarning) {\n      this.systemHealth.status = 'warning';\n      this.systemHealth.message = 'Warning: System resources are running high. Consider optimization.';\n    } else if (this.systemHealth.cpuUsage > 70 || this.systemHealth.memoryUsage > 70 || this.systemHealth.storageUsage > 70) {\n      this.systemHealth.status = 'good';\n      this.systemHealth.message = 'System is functioning well but resource usage is elevated.';\n    } else {\n      this.systemHealth.status = 'excellent';\n      this.systemHealth.message = 'All systems functioning optimally.';\n    }\n  }\n\n  // Call this method periodically or when metrics update\n  private updateSystemMetrics(): void {\n    // In a real application, these would come from a service\n    this.systemHealth.cpuUsage = Math.round(45 + Math.random() * 10);\n    this.systemHealth.memoryUsage = Math.round(60 + Math.random() * 10);\n    this.systemHealth.storageUsage = Math.round(55 + Math.random() * 5);\n    this.updateSystemHealthStatus();\n  }\n}","<div class=\"dashboard-container\">\n    <div class=\"dashboard-header\">\n      <h1 class=\"dashboard-title\">Dashboard</h1>\n      <div class=\"dashboard-actions\">\n        <button class=\"btn btn-outline\" (click)=\"exportData()\">Export Data</button>\n        <button class=\"btn btn-primary\" (click)=\"startIrrigation()\">Start Irrigation</button>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h2 class=\"card-title\">Sensor Status</h2>\n      </div>\n      <div class=\"sensors-grid\">\n        <app-sensor-card \n          *ngFor=\"let sensor of sensors\" \n          [sensor]=\"sensor\">\n        </app-sensor-card>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h2 class=\"card-title\">Real-Time Charts</h2>\n      </div>\n      <div class=\"chart-container\">\n        <canvas #chartCanvas></canvas>\n      </div>\n      <div class=\"system-health\" [ngClass]=\"'system-health-' + systemHealth.status\">\n        <div class=\"system-health-icon\">\n          <span [ngSwitch]=\"systemHealth.status\">\n            <span *ngSwitchCase=\"'excellent'\">✓</span>\n            <span *ngSwitchCase=\"'good'\">✓</span>\n            <span *ngSwitchCase=\"'warning'\">⚠</span>\n            <span *ngSwitchCase=\"'error'\">⚠</span>\n          </span>\n        </div>\n        <div class=\"system-health-content\">\n          <div class=\"system-health-title\">System Health: {{ systemHealth.status | titlecase }}</div>\n          <div class=\"system-health-message\">{{ systemHealth.message }}</div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <div class=\"card-header\">\n        <h2 class=\"card-title\">Crop Cycle Roadmap</h2>\n      </div>\n      <div class=\"crop-roadmap\">\n        <div class=\"roadmap-step\" *ngFor=\"let stage of roadmapStages; let i = index\">\n          <div class=\"step-icon\" \n               [ngClass]=\"{'active': stage.active, 'completed': stage.completed}\">\n            {{ stage.completed ? '✓' : i + 1 }}\n          </div>\n          <div class=\"step-label\">{{ stage.name }}</div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"system-status\">\n      <h2>System Status</h2>\n      <div class=\"status-grid\">\n        <div class=\"status-card\" *ngFor=\"let sensor of sensors\">\n          <h3>{{ sensor.name }}</h3>\n          <div class=\"status-indicator\" [class.online]=\"sensor.isOnline\">\n            {{ sensor.isOnline ? 'Online' : 'Offline' }}\n          </div>\n          <div class=\"last-reading\">\n            Last Reading: {{ sensor.lastReading | date:'medium' }}\n          </div>\n        </div>\n\n        <div class=\"status-card system-health\">\n          <h3>System Health</h3>\n          <div class=\"health-metrics\">\n            <div class=\"metric\">\n              <span>CPU Usage:</span>\n              <span [class.warning]=\"systemHealth.cpuUsage > 80\">\n                {{ systemHealth.cpuUsage }}%\n              </span>\n            </div>\n            <div class=\"metric\">\n              <span>Memory Usage:</span>\n              <span [class.warning]=\"systemHealth.memoryUsage > 80\">\n                {{ systemHealth.memoryUsage }}%\n              </span>\n            </div>\n            <div class=\"metric\">\n              <span>Storage:</span>\n              <span [class.warning]=\"systemHealth.storageUsage > 80\">\n                {{ systemHealth.storageUsage }}%\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}