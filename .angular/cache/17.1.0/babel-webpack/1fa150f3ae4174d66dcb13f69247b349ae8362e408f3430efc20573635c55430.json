{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/features/my-farm/my-farm.component.ts\nimport { Component } from '@angular/core';\nlet MyFarmComponent = class MyFarmComponent {\n  constructor(cropService) {\n    this.cropService = cropService;\n    this.plantingHistory = [];\n    this.suggestedPlants = [];\n    this.currentPage = 1;\n    this.itemsPerPage = 10;\n    this.totalItems = 0;\n    this.isLoading = true;\n    this.Math = Math;\n    this.spinachCrop = {\n      id: 'spinach-template',\n      name: 'Spinach',\n      scientificName: 'Spinacia oleracea',\n      imageUrl: '/assets/images/spinach.jpg',\n      category: 'Vegetable',\n      growthCycle: 45,\n      currentStage: {\n        id: 'stage-1',\n        name: 'Seedling',\n        order: 1,\n        description: 'Initial growth stage',\n        startDate: new Date(),\n        isCompleted: false,\n        requiredActions: [],\n        idealConditions: {\n          temperature: {\n            min: 15,\n            max: 21,\n            unit: '°C'\n          },\n          humidity: {\n            min: 60,\n            max: 70,\n            unit: '%'\n          },\n          light: {\n            min: 12000,\n            max: 18000,\n            unit: 'lux'\n          },\n          ph: {\n            min: 6.0,\n            max: 7.0,\n            unit: 'pH'\n          },\n          ec: {\n            min: 1.0,\n            max: 1.5,\n            unit: 'mS/cm'\n          }\n        }\n      },\n      plantedDate: new Date(),\n      expectedHarvestDate: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000),\n      status: 'active',\n      health: 100,\n      farmId: 'default-farm',\n      zoneId: 'default-zone',\n      idealTemperature: 18,\n      idealHumidity: 65,\n      idealLight: 15000,\n      aiSuggestion: 'Perfect for your current soil conditions and climate.'\n    };\n  }\n  ngOnInit() {\n    this.loadPlantingHistory();\n    this.loadSuggestedPlants();\n  }\n  loadPlantingHistory() {\n    this.isLoading = true;\n    this.cropService.getPlantingHistory(this.currentPage, this.itemsPerPage).subscribe({\n      next: data => {\n        this.plantingHistory = data.history;\n        this.totalItems = data.total;\n        this.isLoading = false;\n      },\n      error: error => {\n        console.error('Error loading planting history:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n  loadSuggestedPlants() {\n    this.cropService.getSuggestedPlants().subscribe({\n      next: plants => {\n        this.suggestedPlants = plants;\n      },\n      error: error => {\n        console.error('Error loading suggested plants:', error);\n      }\n    });\n  }\n  onPageChange(page) {\n    this.currentPage = page;\n    this.loadPlantingHistory();\n  }\n  viewPlantDetails(crop) {\n    // To be implemented when routing is set up\n    console.log('View details for plant:', crop);\n  }\n};\nMyFarmComponent = __decorate([Component({\n  selector: 'app-my-farm',\n  templateUrl: './my-farm.component.html',\n  styleUrls: ['./my-farm.component.css']\n})], MyFarmComponent);\nexport { MyFarmComponent };","map":{"version":3,"names":["Component","MyFarmComponent","constructor","cropService","plantingHistory","suggestedPlants","currentPage","itemsPerPage","totalItems","isLoading","Math","spinachCrop","id","name","scientificName","imageUrl","category","growthCycle","currentStage","order","description","startDate","Date","isCompleted","requiredActions","idealConditions","temperature","min","max","unit","humidity","light","ph","ec","plantedDate","expectedHarvestDate","now","status","health","farmId","zoneId","idealTemperature","idealHumidity","idealLight","aiSuggestion","ngOnInit","loadPlantingHistory","loadSuggestedPlants","getPlantingHistory","subscribe","next","data","history","total","error","console","getSuggestedPlants","plants","onPageChange","page","viewPlantDetails","crop","log","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/injinia/eden-link/src/app/features/my-farm/my-farm.component.ts"],"sourcesContent":["// src/app/features/my-farm/my-farm.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { CropService } from '../../core/services/crop.service';\nimport { Crop } from '../../core/models/crop.model';\nimport { PlantingHistory } from '../../shared/models/planting-history.model';\n\n@Component({\n  selector: 'app-my-farm',\n  templateUrl: './my-farm.component.html',\n  styleUrls: ['./my-farm.component.css']\n})\nexport class MyFarmComponent implements OnInit {\n  plantingHistory: PlantingHistory[] = [];\n  suggestedPlants: Crop[] = [];\n  currentPage = 1;\n  itemsPerPage = 10;\n  totalItems = 0;\n  isLoading = true;\n  public Math = Math;\n\n  spinachCrop: Crop = {\n    id: 'spinach-template',\n    name: 'Spinach',\n    scientificName: 'Spinacia oleracea',\n    imageUrl: '/assets/images/spinach.jpg',\n    category: 'Vegetable',\n    growthCycle: 45,\n    currentStage: {\n      id: 'stage-1',\n      name: 'Seedling',\n      order: 1,\n      description: 'Initial growth stage',\n      startDate: new Date(),\n      isCompleted: false,\n      requiredActions: [],\n      idealConditions: {\n        temperature: { min: 15, max: 21, unit: '°C' },\n        humidity: { min: 60, max: 70, unit: '%' },\n        light: { min: 12000, max: 18000, unit: 'lux' },\n        ph: { min: 6.0, max: 7.0, unit: 'pH' },\n        ec: { min: 1.0, max: 1.5, unit: 'mS/cm' }\n      }\n    },\n    plantedDate: new Date(),\n    expectedHarvestDate: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000),\n    status: 'active',\n    health: 100,\n    farmId: 'default-farm',\n    zoneId: 'default-zone',\n    idealTemperature: 18,\n    idealHumidity: 65,\n    idealLight: 15000,\n    aiSuggestion: 'Perfect for your current soil conditions and climate.'\n  };\n\n  constructor(private cropService: CropService) { }\n\n  ngOnInit(): void {\n    this.loadPlantingHistory();\n    this.loadSuggestedPlants();\n  }\n\n  loadPlantingHistory(): void {\n    this.isLoading = true;\n    this.cropService.getPlantingHistory(this.currentPage, this.itemsPerPage).subscribe({\n      next: (data) => {\n        this.plantingHistory = data.history;\n        this.totalItems = data.total;\n        this.isLoading = false;\n      },\n      error: (error) => {\n        console.error('Error loading planting history:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n\n  loadSuggestedPlants(): void {\n    this.cropService.getSuggestedPlants().subscribe({\n      next: (plants) => {\n        this.suggestedPlants = plants;\n      },\n      error: (error) => {\n        console.error('Error loading suggested plants:', error);\n      }\n    });\n  }\n\n  onPageChange(page: number): void {\n    this.currentPage = page;\n    this.loadPlantingHistory();\n  }\n\n  viewPlantDetails(crop: Crop): void {\n    // To be implemented when routing is set up\n    console.log('View details for plant:', crop);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}