{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/features/ai-tips/ai-tips.component.ts\nimport { Component } from '@angular/core';\nlet AITipsComponent = class AITipsComponent {\n  constructor(aiService, sensorService) {\n    this.aiService = aiService;\n    this.sensorService = sensorService;\n    this.tips = [];\n    this.microclimateTips = [];\n    this.healthTips = [];\n    this.generalTips = [];\n    this.isLoading = true;\n    this.refreshingTips = false;\n    this.lastSensorReadings = {};\n  }\n  ngOnInit() {\n    this.loadSensorData();\n    this.loadAITips();\n  }\n  loadSensorData() {\n    this.sensorService.getLatestReadings().subscribe({\n      next: readings => {\n        readings.forEach(reading => {\n          this.lastSensorReadings[reading.sensorType] = reading;\n        });\n      },\n      error: error => {\n        console.error('Error loading sensor data:', error);\n      }\n    });\n  }\n  loadAITips() {\n    this.isLoading = true;\n    this.aiService.getTips().subscribe({\n      next: tips => {\n        this.tips = tips;\n        this.categorizeTips();\n        this.isLoading = false;\n      },\n      error: error => {\n        console.error('Error loading AI tips:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n  categorizeTips() {\n    this.microclimateTips = this.tips.filter(tip => tip.category === 'climate');\n    this.healthTips = this.tips.filter(tip => tip.category === 'health');\n    this.generalTips = this.tips.filter(tip => tip.category === 'general');\n  }\n  refreshTips() {\n    this.refreshingTips = true;\n    this.aiService.refreshTips().subscribe({\n      next: tips => {\n        this.tips = tips;\n        this.categorizeTips();\n        this.refreshingTips = false;\n      },\n      error: error => {\n        console.error('Error refreshing AI tips:', error);\n        this.refreshingTips = false;\n      }\n    });\n  }\n  getReadingStatus(sensorType) {\n    if (!this.lastSensorReadings[sensorType]) return 'unknown';\n    const reading = this.lastSensorReadings[sensorType];\n    if (reading.value < (reading.minThreshold ?? 0) || reading.value > (reading.maxThreshold ?? 100)) {\n      return 'warning';\n    }\n    return 'normal';\n  }\n  getReadingValue(sensorType) {\n    if (!this.lastSensorReadings[sensorType]) return 'N/A';\n    const reading = this.lastSensorReadings[sensorType];\n    return `${reading.value} ${reading.unit}`;\n  }\n  saveTip(tipId) {\n    this.aiService.saveTip(tipId).subscribe({\n      next: () => {\n        // Find and update the tip in our local array\n        const tip = this.tips.find(t => t.id === tipId);\n        if (tip) {\n          tip.saved = true;\n        }\n      },\n      error: error => {\n        console.error('Error saving tip:', error);\n      }\n    });\n  }\n  dismissTip(tipId) {\n    this.aiService.dismissTip(tipId).subscribe({\n      next: () => {\n        // Remove the tip from our local arrays\n        this.tips = this.tips.filter(t => t.id !== tipId);\n        this.categorizeTips();\n      },\n      error: error => {\n        console.error('Error dismissing tip:', error);\n      }\n    });\n  }\n};\nAITipsComponent = __decorate([Component({\n  selector: 'app-ai-tips',\n  templateUrl: './ai-tips.component.html',\n  styleUrls: ['./ai-tips.component.css']\n})], AITipsComponent);\nexport { AITipsComponent };","map":{"version":3,"names":["Component","AITipsComponent","constructor","aiService","sensorService","tips","microclimateTips","healthTips","generalTips","isLoading","refreshingTips","lastSensorReadings","ngOnInit","loadSensorData","loadAITips","getLatestReadings","subscribe","next","readings","forEach","reading","sensorType","error","console","getTips","categorizeTips","filter","tip","category","refreshTips","getReadingStatus","value","minThreshold","maxThreshold","getReadingValue","unit","saveTip","tipId","find","t","id","saved","dismissTip","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/injinia/eden-link/src/app/features/ai-tips/ai-tips.component.ts"],"sourcesContent":["// src/app/features/ai-tips/ai-tips.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { AiService } from '../../core/services/ai.service';\nimport { SensorService } from '../../core/services/sensor.service';\nimport { AiTip } from '../../core/models/ai-tip.model';\nimport { SensorReading } from '../../core/models/sensor.model';\nimport { AiTipContent } from '../../core/models/ai-tip.model';\n\n\n@Component({\n  selector: 'app-ai-tips',\n  templateUrl: './ai-tips.component.html',\n  styleUrls: ['./ai-tips.component.css']\n})\nexport class AITipsComponent implements OnInit {\n  tips: AiTip[] = [];\n  microclimateTips: AiTip[] = [];\n  healthTips: AiTip[] = [];\n  generalTips: AiTip[] = [];\n  isLoading = true;\n  refreshingTips = false;\n  lastSensorReadings: { [key: string]: SensorReading } = {};\n  \n  constructor(\n    private aiService: AiService,\n    private sensorService: SensorService\n  ) {}\n\n  ngOnInit(): void {\n    this.loadSensorData();\n    this.loadAITips();\n  }\n\n  loadSensorData(): void {\n    this.sensorService.getLatestReadings().subscribe({\n      next: (readings) => {\n        readings.forEach(reading => {\n          this.lastSensorReadings[reading.sensorType] = reading;\n        });\n      },\n      error: (error) => {\n        console.error('Error loading sensor data:', error);\n      }\n    });\n  }\n\n  loadAITips(): void {\n    this.isLoading = true;\n    this.aiService.getTips().subscribe({\n      next: (tips) => {\n        this.tips = tips;\n        this.categorizeTips();\n        this.isLoading = false;\n      },\n      error: (error) => {\n        console.error('Error loading AI tips:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n\n  categorizeTips(): void {\n    this.microclimateTips = this.tips.filter(tip => tip.category === 'climate');\n    this.healthTips = this.tips.filter(tip => tip.category === 'health');\n    this.generalTips = this.tips.filter(tip => tip.category === 'general');\n  }\n\n  refreshTips(): void {\n    this.refreshingTips = true;\n    this.aiService.refreshTips().subscribe({\n      next: (tips) => {\n        this.tips = tips;\n        this.categorizeTips();\n        this.refreshingTips = false;\n      },\n      error: (error) => {\n        console.error('Error refreshing AI tips:', error);\n        this.refreshingTips = false;\n      }\n    });\n  }\n\n  getReadingStatus(sensorType: string): string {\n    if (!this.lastSensorReadings[sensorType]) return 'unknown';\n    \n    const reading = this.lastSensorReadings[sensorType];\n    \n    if (reading.value < (reading.minThreshold ?? 0) || reading.value > (reading.maxThreshold ?? 100)) {\n      return 'warning';\n    }\n    \n    return 'normal';\n  }\n\n  getReadingValue(sensorType: string): string {\n    if (!this.lastSensorReadings[sensorType]) return 'N/A';\n    \n    const reading = this.lastSensorReadings[sensorType];\n    return `${reading.value} ${reading.unit}`;\n  }\n\n  saveTip(tipId: string): void {\n    this.aiService.saveTip(tipId).subscribe({\n      next: () => {\n        // Find and update the tip in our local array\n        const tip = this.tips.find(t => t.id === tipId);\n        if (tip) {\n          tip.saved = true;\n        }\n      },\n      error: (error) => {\n        console.error('Error saving tip:', error);\n      }\n    });\n  }\n\n  dismissTip(tipId: string): void {\n    this.aiService.dismissTip(tipId).subscribe({\n      next: () => {\n        // Remove the tip from our local arrays\n        this.tips = this.tips.filter(t => t.id !== tipId);\n        this.categorizeTips();\n      },\n      error: (error) => {\n        console.error('Error dismissing tip:', error);\n      }\n    });\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}