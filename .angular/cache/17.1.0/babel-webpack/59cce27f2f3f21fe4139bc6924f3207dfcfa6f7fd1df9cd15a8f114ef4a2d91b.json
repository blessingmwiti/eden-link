{"ast":null,"code":"import { Chart } from 'chart.js/auto';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../core/services/sensor.service\";\nimport * as i2 from \"../../core/services/ai.service\";\nimport * as i3 from \"../../core/services/greenhouse.service\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = [\"chartCanvas\"];\nexport class DashboardComponent {\n  constructor(sensorService, aiService, greenhouseService) {\n    this.sensorService = sensorService;\n    this.aiService = aiService;\n    this.greenhouseService = greenhouseService;\n    this.sensors = [];\n    this.systemHealth = {\n      status: 'excellent',\n      message: 'All systems functioning optimally. Consider adjusting CO₂ levels slightly for optimal tomato growth.'\n    };\n    // Sensor data\n    this.currentTemperature = 25;\n    this.currentHumidity = 60;\n    this.currentLight = 1200;\n  }\n  ngOnInit() {\n    this.loadSensorData();\n    this.initializeChart();\n    this.subscribeToGreenhouseData();\n    // Simulate real-time data updates\n    setInterval(() => {\n      this.updateSensorData();\n    }, 5000);\n  }\n  ngOnDestroy() {\n    if (this.greenhouseDataSubscription) {\n      this.greenhouseDataSubscription.unsubscribe();\n    }\n  }\n  ngAfterViewInit() {\n    this.initializeChart();\n  }\n  initializeChart() {\n    const ctx = this.chartCanvas.nativeElement.getContext('2d');\n    const config = {\n      type: 'line',\n      data: {\n        labels: Array.from({\n          length: 10\n        }, (_, i) => `${i * 5}m ago`),\n        datasets: [{\n          label: 'Temperature (°C)',\n          data: Array.from({\n            length: 10\n          }, () => Math.random() * 10 + 20),\n          borderColor: '#ff6384',\n          tension: 0.4\n        }, {\n          label: 'Humidity (%)',\n          data: Array.from({\n            length: 10\n          }, () => Math.random() * 20 + 50),\n          borderColor: '#36a2eb',\n          tension: 0.4\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n    this.chart = new Chart(ctx, config);\n  }\n  subscribeToGreenhouseData() {\n    this.greenhouseDataSubscription = this.greenhouseService.getGreenhouseData().subscribe(data => {\n      if (data.length > 0) {\n        this.updateChart(data);\n        this.currentData = data[data.length - 1];\n        this.updateSensors();\n      }\n    });\n  }\n  updateChart(data) {\n    const labels = data.map(d => {\n      const time = new Date(d.timestamp);\n      return time.toLocaleTimeString('en-US', {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    });\n    const temperatures = data.map(d => d.temperature);\n    const humidities = data.map(d => d.humidity);\n    const lights = data.map(d => d.light);\n    this.greenhouseChart.data.labels = labels;\n    this.greenhouseChart.data.datasets[0].data = temperatures;\n    this.greenhouseChart.data.datasets[1].data = humidities;\n    this.greenhouseChart.data.datasets[2].data = lights;\n    this.greenhouseChart.update();\n  }\n  updateSensors() {\n    if (this.currentData) {\n      this.sensors = [{\n        id: 1,\n        name: 'Temperature',\n        value: `${this.currentData.temperature}°C`,\n        icon: '🌡️',\n        type: 'Environmental',\n        unit: '°C',\n        status: 'normal'\n      }, {\n        id: 2,\n        name: 'Humidity',\n        value: `${this.currentData.humidity}%`,\n        icon: '💧',\n        type: 'Environmental',\n        unit: '%',\n        status: 'normal'\n      }, {\n        id: 3,\n        name: 'Light',\n        value: `${this.currentData.light} lux`,\n        icon: '☀️',\n        type: 'Environmental',\n        unit: 'lux',\n        status: 'normal'\n      }];\n    }\n  }\n  loadSensorData() {\n    // Keep other sensor data for EC, pH, and CO₂\n    const otherSensors = [{\n      id: 4,\n      name: 'EC',\n      value: '1.8 mS/cm',\n      icon: '⚡',\n      type: 'Nutrient',\n      unit: 'mS/cm',\n      status: 'normal'\n    }, {\n      id: 5,\n      name: 'pH',\n      value: '6.2',\n      icon: '🧪',\n      type: 'Nutrient',\n      unit: '',\n      status: 'normal'\n    }, {\n      id: 6,\n      name: 'CO₂',\n      value: '450 ppm',\n      icon: '🌫️',\n      type: 'Gas',\n      unit: 'ppm',\n      status: 'normal'\n    }];\n    this.sensors = [...this.sensors, ...otherSensors];\n  }\n  startIrrigation() {\n    this.sensorService.startIrrigation().subscribe(() => alert('Irrigation started successfully!'), error => console.error('Error starting irrigation:', error));\n  }\n  exportData() {\n    this.sensorService.exportData().subscribe(data => {\n      const blob = new Blob([data], {\n        type: 'application/json'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.setAttribute('hidden', '');\n      a.setAttribute('href', url);\n      a.setAttribute('download', 'eden-link-data-export.json');\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }, error => console.error('Error exporting data:', error));\n  }\n  updateSensorData() {\n    // Simulate sensor data changes\n    this.currentTemperature = Math.round((Math.random() * 5 + 22) * 10) / 10;\n    this.currentHumidity = Math.round(Math.random() * 20 + 50);\n    this.currentLight = Math.round(Math.random() * 500 + 1000);\n    // Update chart data\n    if (this.chart) {\n      this.chart.data.datasets[0].data.shift();\n      this.chart.data.datasets[0].data.push(this.currentTemperature);\n      this.chart.data.datasets[1].data.shift();\n      this.chart.data.datasets[1].data.push(this.currentHumidity);\n      this.chart.update();\n    }\n  }\n  // Status getters\n  getTemperatureStatus() {\n    if (this.currentTemperature < 18) return 'alert';\n    if (this.currentTemperature > 30) return 'warning';\n    return 'normal';\n  }\n  getHumidityStatus() {\n    if (this.currentHumidity < 40) return 'alert';\n    if (this.currentHumidity > 80) return 'warning';\n    return 'normal';\n  }\n  getLightStatus() {\n    if (this.currentLight < 800) return 'alert';\n    if (this.currentLight > 2000) return 'warning';\n    return 'normal';\n  }\n  getSystemHealthClass() {\n    const statuses = [this.getTemperatureStatus(), this.getHumidityStatus(), this.getLightStatus()];\n    if (statuses.includes('alert')) return 'health-alert';\n    if (statuses.includes('warning')) return 'health-warning';\n    return 'health-normal';\n  }\n  getSystemHealthIcon() {\n    const healthClass = this.getSystemHealthClass();\n    switch (healthClass) {\n      case 'health-alert':\n        return 'fa-exclamation-circle';\n      case 'health-warning':\n        return 'fa-exclamation-triangle';\n      default:\n        return 'fa-check-circle';\n    }\n  }\n  getSystemHealthMessage() {\n    const healthClass = this.getSystemHealthClass();\n    switch (healthClass) {\n      case 'health-alert':\n        return 'System requires immediate attention';\n      case 'health-warning':\n        return 'System needs monitoring';\n      default:\n        return 'All systems operating normally';\n    }\n  }\n  // Quick actions\n  toggleVentilation() {\n    // Implement ventilation control\n    console.log('Toggling ventilation');\n  }\n  toggleLights() {\n    // Implement lighting control\n    console.log('Toggling lights');\n  }\n  toggleIrrigation() {\n    // Implement irrigation control\n    console.log('Toggling irrigation');\n  }\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.SensorService), i0.ɵɵdirectiveInject(i2.AiService), i0.ɵɵdirectiveInject(i3.GreenhouseService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      viewQuery: function DashboardComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chartCanvas = _t.first);\n        }\n      },\n      decls: 51,\n      vars: 12,\n      consts: [[1, \"dashboard-container\"], [1, \"chart-section\"], [1, \"chart-container\"], [\"chartCanvas\", \"\"], [1, \"sensor-grid\"], [1, \"sensor-card\"], [1, \"sensor-icon\", \"fas\", \"fa-thermometer-half\"], [1, \"sensor-info\"], [1, \"sensor-value\"], [1, \"sensor-status\", 3, \"ngClass\"], [1, \"sensor-icon\", \"fas\", \"fa-tint\"], [1, \"sensor-icon\", \"fas\", \"fa-sun\"], [1, \"health-card\", 3, \"ngClass\"], [1, \"health-icon\", \"fas\", 3, \"ngClass\"], [1, \"health-message\"], [1, \"quick-actions\"], [1, \"action-btn\", 3, \"click\"], [1, \"btn-icon\", \"fas\", \"fa-fan\"], [1, \"btn-icon\", \"fas\", \"fa-lightbulb\"], [1, \"btn-icon\", \"fas\", \"fa-water\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"section\", 1)(2, \"h2\");\n          i0.ɵɵtext(3, \"Greenhouse Conditions\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 2);\n          i0.ɵɵelement(5, \"canvas\", null, 3);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"div\", 4)(8, \"div\", 5);\n          i0.ɵɵelement(9, \"i\", 6);\n          i0.ɵɵelementStart(10, \"div\", 7)(11, \"h3\");\n          i0.ɵɵtext(12, \"Temperature\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"div\", 8);\n          i0.ɵɵtext(14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"span\", 9);\n          i0.ɵɵtext(16);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(17, \"div\", 5);\n          i0.ɵɵelement(18, \"i\", 10);\n          i0.ɵɵelementStart(19, \"div\", 7)(20, \"h3\");\n          i0.ɵɵtext(21, \"Humidity\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"div\", 8);\n          i0.ɵɵtext(23);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"span\", 9);\n          i0.ɵɵtext(25);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(26, \"div\", 5);\n          i0.ɵɵelement(27, \"i\", 11);\n          i0.ɵɵelementStart(28, \"div\", 7)(29, \"h3\");\n          i0.ɵɵtext(30, \"Light\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"div\", 8);\n          i0.ɵɵtext(32);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"span\", 9);\n          i0.ɵɵtext(34);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(35, \"div\", 12)(36, \"h3\");\n          i0.ɵɵtext(37, \"System Health\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(38, \"i\", 13);\n          i0.ɵɵelementStart(39, \"p\", 14);\n          i0.ɵɵtext(40);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(41, \"div\", 15)(42, \"button\", 16);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_42_listener() {\n            return ctx.toggleVentilation();\n          });\n          i0.ɵɵelement(43, \"i\", 17);\n          i0.ɵɵtext(44, \" Toggle Ventilation \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(45, \"button\", 16);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_45_listener() {\n            return ctx.toggleLights();\n          });\n          i0.ɵɵelement(46, \"i\", 18);\n          i0.ɵɵtext(47, \" Toggle Lights \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(48, \"button\", 16);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_48_listener() {\n            return ctx.toggleIrrigation();\n          });\n          i0.ɵɵelement(49, \"i\", 19);\n          i0.ɵɵtext(50, \" Toggle Irrigation \");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(14);\n          i0.ɵɵtextInterpolate1(\"\", ctx.currentTemperature, \"\\u00B0C\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", ctx.getTemperatureStatus());\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.getTemperatureStatus(), \" \");\n          i0.ɵɵadvance(7);\n          i0.ɵɵtextInterpolate1(\"\", ctx.currentHumidity, \"%\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", ctx.getHumidityStatus());\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.getHumidityStatus(), \" \");\n          i0.ɵɵadvance(7);\n          i0.ɵɵtextInterpolate1(\"\", ctx.currentLight, \" lux\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", ctx.getLightStatus());\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.getLightStatus(), \" \");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngClass\", ctx.getSystemHealthClass());\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngClass\", ctx.getSystemHealthIcon());\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.getSystemHealthMessage());\n        }\n      },\n      dependencies: [i4.NgClass],\n      styles: [\".dashboard-container[_ngcontent-%COMP%] {\\n  padding: 2rem;\\n  display: grid;\\n  gap: 2rem;\\n  max-width: 1400px;\\n  margin: 0 auto;\\n}\\n\\n\\n\\n.chart-section[_ngcontent-%COMP%] {\\n  background: white;\\n  border-radius: 12px;\\n  padding: 1.5rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.chart-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 400px;\\n  position: relative;\\n}\\n\\n\\n\\n.sensor-grid[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\\n  gap: 1.5rem;\\n}\\n\\n.sensor-card[_ngcontent-%COMP%] {\\n  background: white;\\n  border-radius: 12px;\\n  padding: 1.5rem;\\n  display: flex;\\n  align-items: center;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n  transition: transform 0.2s ease;\\n}\\n\\n.sensor-card[_ngcontent-%COMP%]:hover {\\n  transform: translateY(-2px);\\n}\\n\\n.sensor-icon[_ngcontent-%COMP%] {\\n  font-size: 2rem;\\n  margin-right: 1rem;\\n}\\n\\n.sensor-info[_ngcontent-%COMP%] {\\n  flex: 1;\\n}\\n\\n.sensor-info[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  margin: 0;\\n  color: #333;\\n  font-size: 1.1rem;\\n}\\n\\n.sensor-value[_ngcontent-%COMP%] {\\n  font-size: 1.5rem;\\n  font-weight: 600;\\n  color: #006d5b;\\n  margin: 0.5rem 0;\\n}\\n\\n.sensor-status[_ngcontent-%COMP%] {\\n  font-size: 0.9rem;\\n  padding: 0.25rem 0.75rem;\\n  border-radius: 12px;\\n  text-transform: capitalize;\\n}\\n\\n.sensor-status.normal[_ngcontent-%COMP%] {\\n  background: #e8f5e9;\\n  color: #2e7d32;\\n}\\n\\n.sensor-status.warning[_ngcontent-%COMP%] {\\n  background: #fff3e0;\\n  color: #ef6c00;\\n}\\n\\n.sensor-status.alert[_ngcontent-%COMP%] {\\n  background: #ffebee;\\n  color: #c62828;\\n}\\n\\n\\n\\n.system-health[_ngcontent-%COMP%] {\\n  margin-top: 1rem;\\n}\\n\\n.health-card[_ngcontent-%COMP%] {\\n  background: white;\\n  border-radius: 12px;\\n  padding: 1.5rem;\\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\\n}\\n\\n.health-card[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  margin: 0 0 1rem 0;\\n  color: #333;\\n}\\n\\n.health-icon[_ngcontent-%COMP%] {\\n  font-size: 2rem;\\n  margin: 1rem 0;\\n}\\n\\n.health-message[_ngcontent-%COMP%] {\\n  color: #666;\\n  margin: 0;\\n  line-height: 1.5;\\n}\\n\\n.health-card.excellent[_ngcontent-%COMP%] {\\n  border-left: 4px solid #2e7d32;\\n}\\n\\n.health-card.warning[_ngcontent-%COMP%] {\\n  border-left: 4px solid #ef6c00;\\n}\\n\\n.health-card.alert[_ngcontent-%COMP%] {\\n  border-left: 4px solid #c62828;\\n}\\n\\n\\n\\n.quick-actions[_ngcontent-%COMP%] {\\n  display: flex;\\n  gap: 1rem;\\n  margin-top: 1rem;\\n}\\n\\n.action-btn[_ngcontent-%COMP%] {\\n  background: #006d5b;\\n  color: white;\\n  border: none;\\n  border-radius: 8px;\\n  padding: 0.75rem 1.5rem;\\n  font-size: 1rem;\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  transition: background-color 0.2s ease;\\n}\\n\\n.action-btn[_ngcontent-%COMP%]:hover {\\n  background: #005446;\\n}\\n\\n.btn-icon[_ngcontent-%COMP%] {\\n  margin-right: 0.5rem;\\n}\\n\\n\\n\\n@media (max-width: 768px) {\\n  .dashboard-container[_ngcontent-%COMP%] {\\n    padding: 1rem;\\n  }\\n\\n  .chart-container[_ngcontent-%COMP%] {\\n    height: 300px;\\n  }\\n\\n  .sensor-grid[_ngcontent-%COMP%] {\\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\\n  }\\n\\n  .quick-actions[_ngcontent-%COMP%] {\\n    flex-direction: column;\\n  }\\n\\n  .action-btn[_ngcontent-%COMP%] {\\n    width: 100%;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBYTtFQUNiLGFBQWE7RUFDYixTQUFTO0VBQ1QsaUJBQWlCO0VBQ2pCLGNBQWM7QUFDaEI7O0FBRUEsa0JBQWtCO0FBQ2xCO0VBQ0UsaUJBQWlCO0VBQ2pCLG1CQUFtQjtFQUNuQixlQUFlO0VBQ2Ysd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0UsV0FBVztFQUNYLGFBQWE7RUFDYixrQkFBa0I7QUFDcEI7O0FBRUEsZ0JBQWdCO0FBQ2hCO0VBQ0UsYUFBYTtFQUNiLDJEQUEyRDtFQUMzRCxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsbUJBQW1CO0VBQ25CLGVBQWU7RUFDZixhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLHdDQUF3QztFQUN4QywrQkFBK0I7QUFDakM7O0FBRUE7RUFDRSwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxlQUFlO0VBQ2Ysa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsT0FBTztBQUNUOztBQUVBO0VBQ0UsU0FBUztFQUNULFdBQVc7RUFDWCxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLGNBQWM7RUFDZCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsd0JBQXdCO0VBQ3hCLG1CQUFtQjtFQUNuQiwwQkFBMEI7QUFDNUI7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsY0FBYztBQUNoQjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQixjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLGNBQWM7QUFDaEI7O0FBRUEsa0JBQWtCO0FBQ2xCO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLG1CQUFtQjtFQUNuQixlQUFlO0VBQ2Ysd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGVBQWU7RUFDZixjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsV0FBVztFQUNYLFNBQVM7RUFDVCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSw4QkFBOEI7QUFDaEM7O0FBRUEsa0JBQWtCO0FBQ2xCO0VBQ0UsYUFBYTtFQUNiLFNBQVM7RUFDVCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsWUFBWTtFQUNaLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsdUJBQXVCO0VBQ3ZCLGVBQWU7RUFDZixlQUFlO0VBQ2YsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixzQ0FBc0M7QUFDeEM7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxvQkFBb0I7QUFDdEI7O0FBRUEsc0JBQXNCO0FBQ3RCO0VBQ0U7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSwyREFBMkQ7RUFDN0Q7O0VBRUE7SUFDRSxzQkFBc0I7RUFDeEI7O0VBRUE7SUFDRSxXQUFXO0VBQ2I7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5kYXNoYm9hcmQtY29udGFpbmVyIHtcbiAgcGFkZGluZzogMnJlbTtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ2FwOiAycmVtO1xuICBtYXgtd2lkdGg6IDE0MDBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG59XG5cbi8qIENoYXJ0IFNlY3Rpb24gKi9cbi5jaGFydC1zZWN0aW9uIHtcbiAgYmFja2dyb3VuZDogd2hpdGU7XG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIHBhZGRpbmc6IDEuNXJlbTtcbiAgYm94LXNoYWRvdzogMCAycHggNHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbn1cblxuLmNoYXJ0LWNvbnRhaW5lciB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDQwMHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi8qIFNlbnNvciBHcmlkICovXG4uc2Vuc29yLWdyaWQge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDI1MHB4LCAxZnIpKTtcbiAgZ2FwOiAxLjVyZW07XG59XG5cbi5zZW5zb3ItY2FyZCB7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAxLjVyZW07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzIGVhc2U7XG59XG5cbi5zZW5zb3ItY2FyZDpob3ZlciB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMnB4KTtcbn1cblxuLnNlbnNvci1pY29uIHtcbiAgZm9udC1zaXplOiAycmVtO1xuICBtYXJnaW4tcmlnaHQ6IDFyZW07XG59XG5cbi5zZW5zb3ItaW5mbyB7XG4gIGZsZXg6IDE7XG59XG5cbi5zZW5zb3ItaW5mbyBoMyB7XG4gIG1hcmdpbjogMDtcbiAgY29sb3I6ICMzMzM7XG4gIGZvbnQtc2l6ZTogMS4xcmVtO1xufVxuXG4uc2Vuc29yLXZhbHVlIHtcbiAgZm9udC1zaXplOiAxLjVyZW07XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAjMDA2ZDViO1xuICBtYXJnaW46IDAuNXJlbSAwO1xufVxuXG4uc2Vuc29yLXN0YXR1cyB7XG4gIGZvbnQtc2l6ZTogMC45cmVtO1xuICBwYWRkaW5nOiAwLjI1cmVtIDAuNzVyZW07XG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xufVxuXG4uc2Vuc29yLXN0YXR1cy5ub3JtYWwge1xuICBiYWNrZ3JvdW5kOiAjZThmNWU5O1xuICBjb2xvcjogIzJlN2QzMjtcbn1cblxuLnNlbnNvci1zdGF0dXMud2FybmluZyB7XG4gIGJhY2tncm91bmQ6ICNmZmYzZTA7XG4gIGNvbG9yOiAjZWY2YzAwO1xufVxuXG4uc2Vuc29yLXN0YXR1cy5hbGVydCB7XG4gIGJhY2tncm91bmQ6ICNmZmViZWU7XG4gIGNvbG9yOiAjYzYyODI4O1xufVxuXG4vKiBTeXN0ZW0gSGVhbHRoICovXG4uc3lzdGVtLWhlYWx0aCB7XG4gIG1hcmdpbi10b3A6IDFyZW07XG59XG5cbi5oZWFsdGgtY2FyZCB7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBwYWRkaW5nOiAxLjVyZW07XG4gIGJveC1zaGFkb3c6IDAgMnB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG59XG5cbi5oZWFsdGgtY2FyZCBoMyB7XG4gIG1hcmdpbjogMCAwIDFyZW0gMDtcbiAgY29sb3I6ICMzMzM7XG59XG5cbi5oZWFsdGgtaWNvbiB7XG4gIGZvbnQtc2l6ZTogMnJlbTtcbiAgbWFyZ2luOiAxcmVtIDA7XG59XG5cbi5oZWFsdGgtbWVzc2FnZSB7XG4gIGNvbG9yOiAjNjY2O1xuICBtYXJnaW46IDA7XG4gIGxpbmUtaGVpZ2h0OiAxLjU7XG59XG5cbi5oZWFsdGgtY2FyZC5leGNlbGxlbnQge1xuICBib3JkZXItbGVmdDogNHB4IHNvbGlkICMyZTdkMzI7XG59XG5cbi5oZWFsdGgtY2FyZC53YXJuaW5nIHtcbiAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCAjZWY2YzAwO1xufVxuXG4uaGVhbHRoLWNhcmQuYWxlcnQge1xuICBib3JkZXItbGVmdDogNHB4IHNvbGlkICNjNjI4Mjg7XG59XG5cbi8qIFF1aWNrIEFjdGlvbnMgKi9cbi5xdWljay1hY3Rpb25zIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAxcmVtO1xuICBtYXJnaW4tdG9wOiAxcmVtO1xufVxuXG4uYWN0aW9uLWJ0biB7XG4gIGJhY2tncm91bmQ6ICMwMDZkNWI7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyOiBub25lO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIHBhZGRpbmc6IDAuNzVyZW0gMS41cmVtO1xuICBmb250LXNpemU6IDFyZW07XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjJzIGVhc2U7XG59XG5cbi5hY3Rpb24tYnRuOmhvdmVyIHtcbiAgYmFja2dyb3VuZDogIzAwNTQ0Njtcbn1cblxuLmJ0bi1pY29uIHtcbiAgbWFyZ2luLXJpZ2h0OiAwLjVyZW07XG59XG5cbi8qIFJlc3BvbnNpdmUgRGVzaWduICovXG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgLmRhc2hib2FyZC1jb250YWluZXIge1xuICAgIHBhZGRpbmc6IDFyZW07XG4gIH1cblxuICAuY2hhcnQtY29udGFpbmVyIHtcbiAgICBoZWlnaHQ6IDMwMHB4O1xuICB9XG5cbiAgLnNlbnNvci1ncmlkIHtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDIwMHB4LCAxZnIpKTtcbiAgfVxuXG4gIC5xdWljay1hY3Rpb25zIHtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB9XG5cbiAgLmFjdGlvbi1idG4ge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Chart","DashboardComponent","constructor","sensorService","aiService","greenhouseService","sensors","systemHealth","status","message","currentTemperature","currentHumidity","currentLight","ngOnInit","loadSensorData","initializeChart","subscribeToGreenhouseData","setInterval","updateSensorData","ngOnDestroy","greenhouseDataSubscription","unsubscribe","ngAfterViewInit","ctx","chartCanvas","nativeElement","getContext","config","type","data","labels","Array","from","length","_","i","datasets","label","Math","random","borderColor","tension","options","responsive","maintainAspectRatio","scales","y","beginAtZero","chart","getGreenhouseData","subscribe","updateChart","currentData","updateSensors","map","d","time","Date","timestamp","toLocaleTimeString","hour12","hour","minute","temperatures","temperature","humidities","humidity","lights","light","greenhouseChart","update","id","name","value","icon","unit","otherSensors","startIrrigation","alert","error","console","exportData","blob","Blob","url","window","URL","createObjectURL","a","document","createElement","setAttribute","body","appendChild","click","removeChild","round","shift","push","getTemperatureStatus","getHumidityStatus","getLightStatus","getSystemHealthClass","statuses","includes","getSystemHealthIcon","healthClass","getSystemHealthMessage","toggleVentilation","log","toggleLights","toggleIrrigation","i0","ɵɵdirectiveInject","i1","SensorService","i2","AiService","i3","GreenhouseService","selectors","viewQuery","DashboardComponent_Query","rf","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","DashboardComponent_Template_button_click_42_listener","DashboardComponent_Template_button_click_45_listener","DashboardComponent_Template_button_click_48_listener","ɵɵadvance","ɵɵtextInterpolate1","ɵɵproperty","ɵɵtextInterpolate"],"sources":["/home/injinia/eden-link/src/app/features/dashboard/dashboard.component.ts","/home/injinia/eden-link/src/app/features/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit, OnDestroy, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { SensorService } from '../../core/services/sensor.service';\nimport { AiService } from '../../core/services/ai.service';\nimport { GreenhouseService, GreenhouseData } from '../../core/services/greenhouse.service';\nimport { Sensor } from '../../core/models/sensor.model';\nimport { Subscription } from 'rxjs';\nimport { Chart, ChartConfiguration } from 'chart.js/auto';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit, OnDestroy, AfterViewInit {\n  @ViewChild('chartCanvas') chartCanvas!: ElementRef;\n  \n  sensors: Sensor[] = [];\n  systemHealth = {\n    status: 'excellent',\n    message: 'All systems functioning optimally. Consider adjusting CO₂ levels slightly for optimal tomato growth.'\n  };\n  \n  greenhouseChart: any;\n  private greenhouseDataSubscription: Subscription;\n  currentData: GreenhouseData;\n  \n  // Sensor data\n  currentTemperature: number = 25;\n  currentHumidity: number = 60;\n  currentLight: number = 1200;\n  \n  private chart: Chart | undefined;\n\n  constructor(\n    private sensorService: SensorService,\n    private aiService: AiService,\n    private greenhouseService: GreenhouseService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadSensorData();\n    this.initializeChart();\n    this.subscribeToGreenhouseData();\n    \n    // Simulate real-time data updates\n    setInterval(() => {\n      this.updateSensorData();\n    }, 5000);\n  }\n\n  ngOnDestroy(): void {\n    if (this.greenhouseDataSubscription) {\n      this.greenhouseDataSubscription.unsubscribe();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.initializeChart();\n  }\n\n  private initializeChart(): void {\n    const ctx = this.chartCanvas.nativeElement.getContext('2d');\n    \n    const config: ChartConfiguration = {\n      type: 'line',\n      data: {\n        labels: Array.from({ length: 10 }, (_, i) => `${i * 5}m ago`),\n        datasets: [\n          {\n            label: 'Temperature (°C)',\n            data: Array.from({ length: 10 }, () => Math.random() * 10 + 20),\n            borderColor: '#ff6384',\n            tension: 0.4\n          },\n          {\n            label: 'Humidity (%)',\n            data: Array.from({ length: 10 }, () => Math.random() * 20 + 50),\n            borderColor: '#36a2eb',\n            tension: 0.4\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n\n    this.chart = new Chart(ctx, config);\n  }\n\n  private subscribeToGreenhouseData(): void {\n    this.greenhouseDataSubscription = this.greenhouseService.getGreenhouseData()\n      .subscribe(data => {\n        if (data.length > 0) {\n          this.updateChart(data);\n          this.currentData = data[data.length - 1];\n          this.updateSensors();\n        }\n      });\n  }\n\n  private updateChart(data: GreenhouseData[]): void {\n    const labels = data.map(d => {\n      const time = new Date(d.timestamp);\n      return time.toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' });\n    });\n\n    const temperatures = data.map(d => d.temperature);\n    const humidities = data.map(d => d.humidity);\n    const lights = data.map(d => d.light);\n\n    this.greenhouseChart.data.labels = labels;\n    this.greenhouseChart.data.datasets[0].data = temperatures;\n    this.greenhouseChart.data.datasets[1].data = humidities;\n    this.greenhouseChart.data.datasets[2].data = lights;\n    this.greenhouseChart.update();\n  }\n\n  private updateSensors(): void {\n    if (this.currentData) {\n      this.sensors = [\n        {\n          id: 1,\n          name: 'Temperature',\n          value: `${this.currentData.temperature}°C`,\n          icon: '🌡️',\n          type: 'Environmental',\n          unit: '°C',\n          status: 'normal'\n        },\n        {\n          id: 2,\n          name: 'Humidity',\n          value: `${this.currentData.humidity}%`,\n          icon: '💧',\n          type: 'Environmental',\n          unit: '%',\n          status: 'normal'\n        },\n        {\n          id: 3,\n          name: 'Light',\n          value: `${this.currentData.light} lux`,\n          icon: '☀️',\n          type: 'Environmental',\n          unit: 'lux',\n          status: 'normal'\n        }\n      ];\n    }\n  }\n\n  loadSensorData(): void {\n    // Keep other sensor data for EC, pH, and CO₂\n    const otherSensors = [\n      { id: 4, name: 'EC', value: '1.8 mS/cm', icon: '⚡', type: 'Nutrient', unit: 'mS/cm', status: 'normal' },\n      { id: 5, name: 'pH', value: '6.2', icon: '🧪', type: 'Nutrient', unit: '', status: 'normal' },\n      { id: 6, name: 'CO₂', value: '450 ppm', icon: '🌫️', type: 'Gas', unit: 'ppm', status: 'normal' }\n    ];\n    this.sensors = [...this.sensors, ...otherSensors];\n  }\n\n  startIrrigation(): void {\n    this.sensorService.startIrrigation().subscribe(\n      () => alert('Irrigation started successfully!'),\n      (error) => console.error('Error starting irrigation:', error)\n    );\n  }\n\n  exportData(): void {\n    this.sensorService.exportData().subscribe(\n      (data) => {\n        const blob = new Blob([data], { type: 'application/json' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.setAttribute('hidden', '');\n        a.setAttribute('href', url);\n        a.setAttribute('download', 'eden-link-data-export.json');\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      },\n      (error) => console.error('Error exporting data:', error)\n    );\n  }\n\n  private updateSensorData(): void {\n    // Simulate sensor data changes\n    this.currentTemperature = Math.round((Math.random() * 5 + 22) * 10) / 10;\n    this.currentHumidity = Math.round(Math.random() * 20 + 50);\n    this.currentLight = Math.round(Math.random() * 500 + 1000);\n    \n    // Update chart data\n    if (this.chart) {\n      this.chart.data.datasets[0].data.shift();\n      this.chart.data.datasets[0].data.push(this.currentTemperature);\n      this.chart.data.datasets[1].data.shift();\n      this.chart.data.datasets[1].data.push(this.currentHumidity);\n      this.chart.update();\n    }\n  }\n\n  // Status getters\n  getTemperatureStatus(): string {\n    if (this.currentTemperature < 18) return 'alert';\n    if (this.currentTemperature > 30) return 'warning';\n    return 'normal';\n  }\n\n  getHumidityStatus(): string {\n    if (this.currentHumidity < 40) return 'alert';\n    if (this.currentHumidity > 80) return 'warning';\n    return 'normal';\n  }\n\n  getLightStatus(): string {\n    if (this.currentLight < 800) return 'alert';\n    if (this.currentLight > 2000) return 'warning';\n    return 'normal';\n  }\n\n  getSystemHealthClass(): string {\n    const statuses = [\n      this.getTemperatureStatus(),\n      this.getHumidityStatus(),\n      this.getLightStatus()\n    ];\n    if (statuses.includes('alert')) return 'health-alert';\n    if (statuses.includes('warning')) return 'health-warning';\n    return 'health-normal';\n  }\n\n  getSystemHealthIcon(): string {\n    const healthClass = this.getSystemHealthClass();\n    switch (healthClass) {\n      case 'health-alert': return 'fa-exclamation-circle';\n      case 'health-warning': return 'fa-exclamation-triangle';\n      default: return 'fa-check-circle';\n    }\n  }\n\n  getSystemHealthMessage(): string {\n    const healthClass = this.getSystemHealthClass();\n    switch (healthClass) {\n      case 'health-alert': return 'System requires immediate attention';\n      case 'health-warning': return 'System needs monitoring';\n      default: return 'All systems operating normally';\n    }\n  }\n\n  // Quick actions\n  toggleVentilation(): void {\n    // Implement ventilation control\n    console.log('Toggling ventilation');\n  }\n\n  toggleLights(): void {\n    // Implement lighting control\n    console.log('Toggling lights');\n  }\n\n  toggleIrrigation(): void {\n    // Implement irrigation control\n    console.log('Toggling irrigation');\n  }\n}","<div class=\"dashboard-container\">\n  <!-- Chart Section -->\n  <section class=\"chart-section\">\n    <h2>Greenhouse Conditions</h2>\n    <div class=\"chart-container\">\n      <canvas #chartCanvas></canvas>\n    </div>\n  </section>\n\n  <!-- Sensor Grid -->\n  <div class=\"sensor-grid\">\n    <!-- Temperature Card -->\n    <div class=\"sensor-card\">\n      <i class=\"sensor-icon fas fa-thermometer-half\"></i>\n      <div class=\"sensor-info\">\n        <h3>Temperature</h3>\n        <div class=\"sensor-value\">{{ currentTemperature }}°C</div>\n        <span class=\"sensor-status\" [ngClass]=\"getTemperatureStatus()\">\n          {{ getTemperatureStatus() }}\n        </span>\n      </div>\n    </div>\n\n    <!-- Humidity Card -->\n    <div class=\"sensor-card\">\n      <i class=\"sensor-icon fas fa-tint\"></i>\n      <div class=\"sensor-info\">\n        <h3>Humidity</h3>\n        <div class=\"sensor-value\">{{ currentHumidity }}%</div>\n        <span class=\"sensor-status\" [ngClass]=\"getHumidityStatus()\">\n          {{ getHumidityStatus() }}\n        </span>\n      </div>\n    </div>\n\n    <!-- Light Card -->\n    <div class=\"sensor-card\">\n      <i class=\"sensor-icon fas fa-sun\"></i>\n      <div class=\"sensor-info\">\n        <h3>Light</h3>\n        <div class=\"sensor-value\">{{ currentLight }} lux</div>\n        <span class=\"sensor-status\" [ngClass]=\"getLightStatus()\">\n          {{ getLightStatus() }}\n        </span>\n      </div>\n    </div>\n  </div>\n\n  <!-- System Health -->\n  <div class=\"health-card\" [ngClass]=\"getSystemHealthClass()\">\n    <h3>System Health</h3>\n    <i class=\"health-icon fas\" [ngClass]=\"getSystemHealthIcon()\"></i>\n    <p class=\"health-message\">{{ getSystemHealthMessage() }}</p>\n  </div>\n\n  <!-- Quick Actions -->\n  <div class=\"quick-actions\">\n    <button class=\"action-btn\" (click)=\"toggleVentilation()\">\n      <i class=\"btn-icon fas fa-fan\"></i>\n      Toggle Ventilation\n    </button>\n    <button class=\"action-btn\" (click)=\"toggleLights()\">\n      <i class=\"btn-icon fas fa-lightbulb\"></i>\n      Toggle Lights\n    </button>\n    <button class=\"action-btn\" (click)=\"toggleIrrigation()\">\n      <i class=\"btn-icon fas fa-water\"></i>\n      Toggle Irrigation\n    </button>\n  </div>\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}