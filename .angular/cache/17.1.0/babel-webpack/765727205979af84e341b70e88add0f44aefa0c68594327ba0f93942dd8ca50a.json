{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { map, delay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./sensor.service\";\nimport * as i3 from \"./crop.service\";\nexport class AiService {\n  constructor(http, sensorService,\n  // Retained dependency\n  cropService // Retained dependency\n  ) {\n    this.http = http;\n    this.sensorService = sensorService;\n    this.cropService = cropService;\n    this.apiUrl = `${environment.apiBaseUrl}/ai`;\n    this.recommendationsSubject = new BehaviorSubject([]);\n    this.chatHistorySubject = new BehaviorSubject([]);\n    this.tipsSubject = new BehaviorSubject([]); // Added for AI tips\n    this.recommendations$ = this.recommendationsSubject.asObservable();\n    this.chatHistory$ = this.chatHistorySubject.asObservable();\n    this.tips$ = this.tipsSubject.asObservable(); // Observable for AI tips\n    // Initialize with sample data in development\n    if (!environment.production) {\n      this.recommendationsSubject.next(this.generateMockRecommendations());\n      this.chatHistorySubject.next(this.generateMockChatHistory());\n      this.tipsSubject.next(this.generateMockTips()); // Added mock tips initialization\n    } else {\n      this.fetchRecommendations().subscribe();\n    }\n  }\n  // Existing methods...\n  fetchRecommendations() {\n    return this.http.get(`${this.apiUrl}/recommendations`);\n  }\n  getRecommendations(category) {\n    return this.recommendations$;\n  }\n  applyRecommendation(id) {\n    return this.http.post(`${this.apiUrl}/recommendations/${id}/apply`, {});\n  }\n  dismissRecommendation(id) {\n    return this.http.delete(`${this.apiUrl}/recommendations/${id}`);\n  }\n  // AI Chatbot methods\n  sendMessage(message) {\n    return this.http.post(`${this.apiUrl}/chat`, {\n      message\n    });\n  }\n  getChatHistory() {\n    return this.chatHistory$;\n  }\n  // AI health assessment\n  getFarmHealthAssessment() {\n    return this.http.get(`${this.apiUrl}/health-assessment`);\n  }\n  // Crop recommendations based on current conditions\n  getCropRecommendations() {\n    return this.http.get(`${this.apiUrl}/crop-recommendations`);\n  }\n  // New methods for AI tips\n  getTips() {\n    return this.http.get(`${this.apiUrl}/tips`);\n  }\n  refreshTips() {\n    return this.http.get(`${this.apiUrl}/tips/refresh`).pipe(tap(tips => this.tipsSubject.next(tips)) // Update the BehaviorSubject\n    );\n  }\n  saveTip(tipId) {\n    return this.http.post(`${this.apiUrl}/tips/${tipId}/save`, {});\n  }\n  dismissTip(tipId) {\n    return this.http.delete(`${this.apiUrl}/tips/${tipId}`);\n  }\n  // Mock data for development\n  generateMockRecommendations() {\n    return [{\n      id: '1',\n      message: 'Humidity levels are suboptimal for tomatoes. Consider increasing humidity by 10%.',\n      priority: 'medium',\n      timestamp: new Date(),\n      category: 'climate',\n      actionRequired: true,\n      applied: false\n    }, {\n      id: '2',\n      message: 'Predicted rain in 48 hours. Consider postponing scheduled irrigation.',\n      priority: 'low',\n      timestamp: new Date(),\n      category: 'irrigation',\n      actionRequired: false,\n      applied: false\n    }, {\n      id: '3',\n      message: 'Calcium deficiency detected in eggplants. Add calcium supplement to nutrient solution.',\n      priority: 'high',\n      timestamp: new Date(),\n      category: 'nutrition',\n      actionRequired: true,\n      applied: false\n    }];\n  }\n  generateMockChatHistory() {\n    return [{\n      id: '1',\n      content: 'Hello! How can I help with your farm today?',\n      sender: 'ai',\n      timestamp: new Date(Date.now() - 3600000)\n    }, {\n      id: '2',\n      content: 'My tomatoes are showing yellow leaves. Any idea what might be causing this?',\n      sender: 'user',\n      timestamp: new Date(Date.now() - 3500000)\n    }, {\n      id: '3',\n      content: 'Based on your current sensor readings, it could be a nitrogen deficiency. I recommend adding a nitrogen-rich fertilizer and ensuring pH levels are between 6.0-6.5 for optimal nutrient absorption.',\n      sender: 'ai',\n      timestamp: new Date(Date.now() - 3400000)\n    }];\n  }\n  generateMockTips() {\n    return [{\n      id: '1',\n      title: 'Ventilation Check',\n      content: {\n        text: 'Ensure proper ventilation in the greenhouse to maintain optimal humidity levels.',\n        details: 'Good airflow helps prevent mold and fungal growth while maintaining ideal growing conditions.',\n        actionItems: ['Check ventilation fans are working', 'Clean air filters', 'Adjust vents as needed']\n      },\n      timestamp: new Date(),\n      priority: 'high',\n      category: 'climate',\n      recommendation: 'Increase ventilation during peak humidity hours',\n      source: 'System Sensors'\n    }, {\n      id: '2',\n      title: 'Pest Management',\n      content: {\n        text: 'Inspect plants for signs of pest infestation and apply organic pesticides if necessary.',\n        details: 'Regular inspection helps catch pest problems early before they become severe.',\n        actionItems: ['Check leaf undersides', 'Look for bite marks', 'Monitor sticky traps']\n      },\n      timestamp: new Date(),\n      priority: 'medium',\n      category: 'health',\n      recommendation: 'Apply neem oil solution if pests are found',\n      source: 'Weekly Inspection'\n    }];\n  }\n  getMockTips() {\n    const mockTips = [{\n      id: '1',\n      title: 'Ventilation Check',\n      content: {\n        text: 'Ensure proper ventilation in the greenhouse to maintain optimal humidity levels.',\n        details: 'Good airflow helps prevent mold and fungal growth while maintaining ideal growing conditions.',\n        actionItems: ['Check ventilation fans are working', 'Clean air filters', 'Adjust vents as needed']\n      },\n      timestamp: new Date(),\n      priority: 'high',\n      category: 'climate',\n      recommendation: 'Increase ventilation during peak humidity hours',\n      source: 'System Sensors'\n    }, {\n      id: '2',\n      title: 'Pest Management',\n      content: {\n        text: 'Inspect plants for signs of pest infestation and apply organic pesticides if necessary.',\n        details: 'Regular inspection helps catch pest problems early before they become severe.',\n        actionItems: ['Check leaf undersides', 'Look for bite marks', 'Monitor sticky traps']\n      },\n      timestamp: new Date(),\n      priority: 'medium',\n      category: 'health',\n      recommendation: 'Apply neem oil solution if pests are found',\n      source: 'Weekly Inspection'\n    }];\n    return of(mockTips).pipe(delay(500));\n  }\n  getResponse(query) {\n    return of('This is a mock AI response. In production, this would connect to an AI service.').pipe(delay(500));\n  }\n  getCropGrowthInsight(cropCycleId) {\n    return of('Mock crop growth insight based on AI analysis.').pipe(delay(500));\n  }\n  // This will be replaced with real AI implementation later\n  getSystemHealthSuggestions(metrics, crops) {\n    // Mock implementation\n    const suggestions = [];\n    // Temperature check\n    if (metrics.temperature < 20) {\n      suggestions.push({\n        type: 'warning',\n        message: 'Temperature is below optimal range',\n        probability: 0.6,\n        suggestedActions: ['Increase temperature to 22-23°C', 'Check heating system']\n      });\n    }\n    // Humidity check\n    if (metrics.humidity > 70) {\n      suggestions.push({\n        type: 'warning',\n        message: 'High humidity detected',\n        probability: 0.7,\n        suggestedActions: ['Increase ventilation', 'Monitor for fungal growth']\n      });\n    }\n    return of(suggestions);\n  }\n  // Placeholder for future AI growth stage prediction\n  predictGrowthStage(cropData) {\n    // Mock implementation\n    return of({\n      currentStage: 'Vegetation',\n      progress: 45,\n      nextStageDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n      recommendations: ['Maintain current temperature', 'Monitor leaf development']\n    });\n  }\n  // Placeholder for future AI optimal conditions prediction\n  predictOptimalConditions(cropType, growthStage) {\n    // Mock implementation based on crop type\n    const conditions = {\n      temperature: {\n        min: 20,\n        max: 25,\n        unit: '°C'\n      },\n      humidity: {\n        min: 55,\n        max: 70,\n        unit: '%'\n      },\n      light: {\n        min: 500,\n        max: 800,\n        unit: 'lux'\n      },\n      ec: {\n        min: 1.5,\n        max: 2.2,\n        unit: 'mS/cm'\n      },\n      ph: {\n        min: 6.0,\n        max: 6.8,\n        unit: 'pH'\n      }\n    };\n    if (cropType === 'Coriander') {\n      conditions.temperature = {\n        min: 18,\n        max: 22,\n        unit: '°C'\n      };\n      conditions.humidity = {\n        min: 50,\n        max: 60,\n        unit: '%'\n      };\n    }\n    return of(conditions);\n  }\n  static {\n    this.ɵfac = function AiService_Factory(t) {\n      return new (t || AiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SensorService), i0.ɵɵinject(i3.CropService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AiService,\n      factory: AiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nfunction tap(onNext) {\n  return source$ => source$.pipe(map(value => {\n    onNext(value);\n    return value;\n  }));\n}","map":{"version":3,"names":["BehaviorSubject","of","environment","map","delay","AiService","constructor","http","sensorService","cropService","apiUrl","apiBaseUrl","recommendationsSubject","chatHistorySubject","tipsSubject","recommendations$","asObservable","chatHistory$","tips$","production","next","generateMockRecommendations","generateMockChatHistory","generateMockTips","fetchRecommendations","subscribe","get","getRecommendations","category","applyRecommendation","id","post","dismissRecommendation","delete","sendMessage","message","getChatHistory","getFarmHealthAssessment","getCropRecommendations","getTips","refreshTips","pipe","tap","tips","saveTip","tipId","dismissTip","priority","timestamp","Date","actionRequired","applied","content","sender","now","title","text","details","actionItems","recommendation","source","getMockTips","mockTips","getResponse","query","getCropGrowthInsight","cropCycleId","getSystemHealthSuggestions","metrics","crops","suggestions","temperature","push","type","probability","suggestedActions","humidity","predictGrowthStage","cropData","currentStage","progress","nextStageDate","recommendations","predictOptimalConditions","cropType","growthStage","conditions","min","max","unit","light","ec","ph","i0","ɵɵinject","i1","HttpClient","i2","SensorService","i3","CropService","factory","ɵfac","providedIn","onNext","source$","value"],"sources":["/home/injinia/eden-link/src/app/core/services/ai.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { SensorService } from './sensor.service'; // Retained import\nimport { CropService } from './crop.service'; // Retained import\nimport { AiTip, AiTipContent } from '../models/ai-tip.model';\nimport { OperatorFunction } from 'rxjs';\nimport { map, delay } from 'rxjs/operators';\nimport { SystemHealthSuggestion, GrowthPrediction, OptimalConditions, SensorMetrics } from '../models/ai.model';\n\ninterface AiRecommendation {\n  id: string;\n  message: string;\n  priority: 'low' | 'medium' | 'high';\n  timestamp: Date;\n  category: 'climate' | 'irrigation' | 'nutrition' | 'pest' | 'general';\n  actionRequired: boolean;\n  applied: boolean;\n}\n\ninterface AiChatMessage {\n  id: string;\n  content: string;\n  sender: 'user' | 'ai';\n  timestamp: Date;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiService {\n  private apiUrl = `${environment.apiBaseUrl}/ai`;\n\n  private recommendationsSubject = new BehaviorSubject<AiRecommendation[]>([]);\n  private chatHistorySubject = new BehaviorSubject<AiChatMessage[]>([]);\n  private tipsSubject = new BehaviorSubject<AiTip[]>([]); // Added for AI tips\n\n  public recommendations$ = this.recommendationsSubject.asObservable();\n  public chatHistory$ = this.chatHistorySubject.asObservable();\n  public tips$ = this.tipsSubject.asObservable(); // Observable for AI tips\n\n  constructor(\n    private http: HttpClient,\n    private sensorService: SensorService, // Retained dependency\n    private cropService: CropService // Retained dependency\n  ) {\n    // Initialize with sample data in development\n    if (!environment.production) {\n      this.recommendationsSubject.next(this.generateMockRecommendations());\n      this.chatHistorySubject.next(this.generateMockChatHistory());\n      this.tipsSubject.next(this.generateMockTips()); // Added mock tips initialization\n    } else {\n      this.fetchRecommendations().subscribe();\n    }\n  }\n\n  // Existing methods...\n\n  fetchRecommendations(): Observable<AiRecommendation[]> {\n    return this.http.get<AiRecommendation[]>(`${this.apiUrl}/recommendations`);\n  }\n\n  getRecommendations(category?: string): Observable<AiRecommendation[]> {\n    return this.recommendations$;\n  }\n\n  applyRecommendation(id: string): Observable<any> {\n    return this.http.post(`${this.apiUrl}/recommendations/${id}/apply`, {});\n  }\n\n  dismissRecommendation(id: string): Observable<any> {\n    return this.http.delete(`${this.apiUrl}/recommendations/${id}`);\n  }\n\n  // AI Chatbot methods\n  sendMessage(message: string): Observable<AiChatMessage> {\n    return this.http.post<AiChatMessage>(`${this.apiUrl}/chat`, { message });\n  }\n\n  getChatHistory(): Observable<AiChatMessage[]> {\n    return this.chatHistory$;\n  }\n\n  // AI health assessment\n  getFarmHealthAssessment(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/health-assessment`);\n  }\n\n  // Crop recommendations based on current conditions\n  getCropRecommendations(): Observable<any> {\n    return this.http.get(`${this.apiUrl}/crop-recommendations`);\n  }\n\n  // New methods for AI tips\n  getTips(): Observable<AiTip[]> {\n    return this.http.get<AiTip[]>(`${this.apiUrl}/tips`);\n  }\n\n  refreshTips(): Observable<AiTip[]> {\n    return this.http.get<AiTip[]>(`${this.apiUrl}/tips/refresh`).pipe(\n      tap((tips) => this.tipsSubject.next(tips)) // Update the BehaviorSubject\n    );\n  }\n\n  saveTip(tipId: string): Observable<void> {\n    return this.http.post<void>(`${this.apiUrl}/tips/${tipId}/save`, {});\n  }\n\n  dismissTip(tipId: string): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/tips/${tipId}`);\n  }\n\n  // Mock data for development\n  private generateMockRecommendations(): AiRecommendation[] {\n    return [\n      {\n        id: '1',\n        message: 'Humidity levels are suboptimal for tomatoes. Consider increasing humidity by 10%.',\n        priority: 'medium',\n        timestamp: new Date(),\n        category: 'climate',\n        actionRequired: true,\n        applied: false\n      },\n      {\n        id: '2',\n        message: 'Predicted rain in 48 hours. Consider postponing scheduled irrigation.',\n        priority: 'low',\n        timestamp: new Date(),\n        category: 'irrigation',\n        actionRequired: false,\n        applied: false\n      },\n      {\n        id: '3',\n        message: 'Calcium deficiency detected in eggplants. Add calcium supplement to nutrient solution.',\n        priority: 'high',\n        timestamp: new Date(),\n        category: 'nutrition',\n        actionRequired: true,\n        applied: false\n      }\n    ];\n  }\n\n  private generateMockChatHistory(): AiChatMessage[] {\n    return [\n      {\n        id: '1',\n        content: 'Hello! How can I help with your farm today?',\n        sender: 'ai',\n        timestamp: new Date(Date.now() - 3600000)\n      },\n      {\n        id: '2',\n        content: 'My tomatoes are showing yellow leaves. Any idea what might be causing this?',\n        sender: 'user',\n        timestamp: new Date(Date.now() - 3500000)\n      },\n      {\n        id: '3',\n        content: 'Based on your current sensor readings, it could be a nitrogen deficiency. I recommend adding a nitrogen-rich fertilizer and ensuring pH levels are between 6.0-6.5 for optimal nutrient absorption.',\n        sender: 'ai',\n        timestamp: new Date(Date.now() - 3400000)\n      }\n    ];\n  }\n\n  private generateMockTips(): AiTip[] {\n    return [\n      {\n        id: '1',\n        title: 'Ventilation Check',\n        content: {\n          text: 'Ensure proper ventilation in the greenhouse to maintain optimal humidity levels.',\n          details: 'Good airflow helps prevent mold and fungal growth while maintaining ideal growing conditions.',\n          actionItems: [\n            'Check ventilation fans are working',\n            'Clean air filters',\n            'Adjust vents as needed'\n          ]\n        },\n        timestamp: new Date(),\n        priority: 'high',\n        category: 'climate',\n        recommendation: 'Increase ventilation during peak humidity hours',\n        source: 'System Sensors'\n      },\n      {\n        id: '2',\n        title: 'Pest Management',\n        content: {\n          text: 'Inspect plants for signs of pest infestation and apply organic pesticides if necessary.',\n          details: 'Regular inspection helps catch pest problems early before they become severe.',\n          actionItems: [\n            'Check leaf undersides',\n            'Look for bite marks',\n            'Monitor sticky traps'\n          ]\n        },\n        timestamp: new Date(),\n        priority: 'medium',\n        category: 'health',\n        recommendation: 'Apply neem oil solution if pests are found',\n        source: 'Weekly Inspection'\n      }\n    ];\n  }\n\n  getMockTips(): Observable<AiTip[]> {\n    const mockTips: AiTip[] = [\n      {\n        id: '1',\n        title: 'Ventilation Check',\n        content: {\n          text: 'Ensure proper ventilation in the greenhouse to maintain optimal humidity levels.',\n          details: 'Good airflow helps prevent mold and fungal growth while maintaining ideal growing conditions.',\n          actionItems: [\n            'Check ventilation fans are working',\n            'Clean air filters',\n            'Adjust vents as needed'\n          ]\n        },\n        timestamp: new Date(),\n        priority: 'high',\n        category: 'climate',\n        recommendation: 'Increase ventilation during peak humidity hours',\n        source: 'System Sensors'\n      },\n      {\n        id: '2',\n        title: 'Pest Management',\n        content: {\n          text: 'Inspect plants for signs of pest infestation and apply organic pesticides if necessary.',\n          details: 'Regular inspection helps catch pest problems early before they become severe.',\n          actionItems: [\n            'Check leaf undersides',\n            'Look for bite marks',\n            'Monitor sticky traps'\n          ]\n        },\n        timestamp: new Date(),\n        priority: 'medium',\n        category: 'health',\n        recommendation: 'Apply neem oil solution if pests are found',\n        source: 'Weekly Inspection'\n      }\n    ];\n\n    return of(mockTips).pipe(delay(500));\n  }\n\n  getResponse(query: string): Observable<string> {\n    return of('This is a mock AI response. In production, this would connect to an AI service.').pipe(delay(500));\n  }\n\n  getCropGrowthInsight(cropCycleId: string): Observable<string> {\n    return of('Mock crop growth insight based on AI analysis.').pipe(delay(500));\n  }\n\n  // This will be replaced with real AI implementation later\n  getSystemHealthSuggestions(metrics: SensorMetrics, crops: string[]): Observable<SystemHealthSuggestion[]> {\n    // Mock implementation\n    const suggestions: SystemHealthSuggestion[] = [];\n    \n    // Temperature check\n    if (metrics.temperature < 20) {\n      suggestions.push({\n        type: 'warning',\n        message: 'Temperature is below optimal range',\n        probability: 0.6,\n        suggestedActions: ['Increase temperature to 22-23°C', 'Check heating system']\n      });\n    }\n\n    // Humidity check\n    if (metrics.humidity > 70) {\n      suggestions.push({\n        type: 'warning',\n        message: 'High humidity detected',\n        probability: 0.7,\n        suggestedActions: ['Increase ventilation', 'Monitor for fungal growth']\n      });\n    }\n\n    return of(suggestions);\n  }\n\n  // Placeholder for future AI growth stage prediction\n  predictGrowthStage(cropData: {\n    cropType: string;\n    plantedDate: Date;\n    sensorHistory: SensorMetrics[];\n  }): Observable<GrowthPrediction> {\n    // Mock implementation\n    return of({\n      currentStage: 'Vegetation',\n      progress: 45,\n      nextStageDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n      recommendations: [\n        'Maintain current temperature',\n        'Monitor leaf development'\n      ]\n    });\n  }\n\n  // Placeholder for future AI optimal conditions prediction\n  predictOptimalConditions(cropType: string, growthStage: string): Observable<OptimalConditions> {\n    // Mock implementation based on crop type\n    const conditions: OptimalConditions = {\n      temperature: { min: 20, max: 25, unit: '°C' },\n      humidity: { min: 55, max: 70, unit: '%' },\n      light: { min: 500, max: 800, unit: 'lux' },\n      ec: { min: 1.5, max: 2.2, unit: 'mS/cm' },\n      ph: { min: 6.0, max: 6.8, unit: 'pH' }\n    };\n\n    if (cropType === 'Coriander') {\n      conditions.temperature = { min: 18, max: 22, unit: '°C' };\n      conditions.humidity = { min: 50, max: 60, unit: '%' };\n    }\n\n    return of(conditions);\n  }\n\n  // Add more placeholder methods for future AI features\n}\n\nfunction tap<T>(onNext: (value: T) => void): OperatorFunction<T, T> {\n  return (source$) =>\n    source$.pipe(\n      map((value) => {\n        onNext(value);\n        return value;\n      })\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}