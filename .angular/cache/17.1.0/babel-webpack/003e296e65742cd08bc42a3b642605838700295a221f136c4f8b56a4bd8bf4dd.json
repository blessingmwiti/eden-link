{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/features/crop-roadmap/crop-roadmap.component.ts\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet CropRoadmapComponent = class CropRoadmapComponent {\n  constructor(fb, cropService, aiService) {\n    this.fb = fb;\n    this.cropService = cropService;\n    this.aiService = aiService;\n    this.cropTypes = [];\n    this.currentCropCycle = null;\n    this.aiInsight = '';\n    this.showAiInsight = false;\n    this.loadingInsight = false;\n    this.cropForm = this.fb.group({\n      cropType: ['', Validators.required],\n      plantDate: ['', Validators.required],\n      cycleDuration: ['12', [Validators.required, Validators.min(1), Validators.max(52)]]\n    });\n  }\n  ngOnInit() {\n    this.loadCropTypes();\n    this.loadCurrentCropCycle();\n  }\n  loadCropTypes() {\n    this.cropService.getCropTypes().subscribe({\n      next: types => {\n        this.cropTypes = types;\n      },\n      error: error => {\n        console.error('Error loading crop types:', error);\n      }\n    });\n  }\n  loadCurrentCropCycle() {\n    this.cropService.getCurrentCropCycle().subscribe({\n      next: cycle => {\n        this.currentCropCycle = cycle;\n        if (cycle) {\n          // Populate form with current cycle data\n          this.cropForm.patchValue({\n            cropType: cycle.cropTypeId,\n            plantDate: cycle.plantDate,\n            cycleDuration: cycle.durationWeeks\n          });\n        }\n      },\n      error: error => {\n        console.error('Error loading current crop cycle:', error);\n      }\n    });\n  }\n  calculateProgress() {\n    if (!this.currentCropCycle) return 0;\n    const startDate = new Date(this.currentCropCycle.plantDate);\n    const today = new Date();\n    const totalDays = this.currentCropCycle.durationWeeks * 7;\n    const daysPassed = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    return Math.min(Math.round(daysPassed / totalDays * 100), 100);\n  }\n  getCurrentWeek() {\n    if (!this.currentCropCycle) return 0;\n    const startDate = new Date(this.currentCropCycle.plantDate);\n    const today = new Date();\n    const daysPassed = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    return Math.min(Math.ceil(daysPassed / 7), this.currentCropCycle.durationWeeks);\n  }\n  onSubmit() {\n    if (this.cropForm.invalid) return;\n    const formData = this.cropForm.value;\n    const selectedCropType = this.cropTypes.find(ct => ct.id === formData.cropType);\n    const cropCycle = {\n      id: Date.now().toString(),\n      cropTypeId: formData.cropType,\n      cropName: selectedCropType?.name || '',\n      startDate: new Date(),\n      plantDate: formData.plantDate,\n      currentStage: 0,\n      status: 'active',\n      completedStages: [],\n      durationWeeks: formData.cycleDuration,\n      stages: selectedCropType?.stages.map(s => ({\n        name: s.name,\n        startWeek: s.duration,\n        endWeek: s.duration,\n        description: s.description,\n        tasks: s.tasks.map(t => ({\n          description: t,\n          completed: false\n        })),\n        completed: false\n      })) || []\n    };\n    this.cropService.createCropCycle(cropCycle).subscribe({\n      next: cycle => {\n        this.currentCropCycle = cycle;\n      },\n      error: error => {\n        console.error('Error creating crop cycle:', error);\n      }\n    });\n  }\n  markStageComplete(stageIndex) {\n    if (!this.currentCropCycle) return;\n    this.cropService.completeStage(this.currentCropCycle.id, stageIndex).subscribe({\n      next: success => {\n        if (success && this.currentCropCycle) {\n          // Update the local state if the operation was successful\n          const updatedStages = [...this.currentCropCycle.stages];\n          updatedStages[stageIndex].completed = true;\n          this.currentCropCycle = {\n            ...this.currentCropCycle,\n            stages: updatedStages,\n            completedStages: [...this.currentCropCycle.completedStages, stageIndex]\n          };\n        }\n      },\n      error: error => {\n        console.error('Error completing stage:', error);\n      }\n    });\n  }\n  getAIInsight() {\n    if (!this.currentCropCycle) return;\n    this.loadingInsight = true;\n    this.aiService.getCropGrowthInsight(this.currentCropCycle.id).subscribe({\n      next: insight => {\n        this.aiInsight = insight;\n        this.showAiInsight = true;\n        this.loadingInsight = false;\n      },\n      error: error => {\n        console.error('Error getting AI insight:', error);\n        this.loadingInsight = false;\n      }\n    });\n  }\n  closeAIInsight() {\n    this.showAiInsight = false;\n  }\n};\nCropRoadmapComponent = __decorate([Component({\n  selector: 'app-crop-roadmap',\n  templateUrl: './crop-roadmap.component.html',\n  styleUrls: ['./crop-roadmap.component.css']\n})], CropRoadmapComponent);\nexport { CropRoadmapComponent };","map":{"version":3,"names":["Component","Validators","CropRoadmapComponent","constructor","fb","cropService","aiService","cropTypes","currentCropCycle","aiInsight","showAiInsight","loadingInsight","cropForm","group","cropType","required","plantDate","cycleDuration","min","max","ngOnInit","loadCropTypes","loadCurrentCropCycle","getCropTypes","subscribe","next","types","error","console","getCurrentCropCycle","cycle","patchValue","cropTypeId","durationWeeks","calculateProgress","startDate","Date","today","totalDays","daysPassed","Math","floor","getTime","round","getCurrentWeek","ceil","onSubmit","invalid","formData","value","selectedCropType","find","ct","id","cropCycle","now","toString","cropName","name","currentStage","status","completedStages","stages","map","s","startWeek","duration","endWeek","description","tasks","t","completed","createCropCycle","markStageComplete","stageIndex","completeStage","success","updatedStages","getAIInsight","getCropGrowthInsight","insight","closeAIInsight","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/injinia/eden-link/src/app/features/crop-roadmap/crop-roadmap.component.ts"],"sourcesContent":["// src/app/features/crop-roadmap/crop-roadmap.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CropService } from '../../core/services/crop.service';\nimport { AiService } from '../../core/services/ai.service';\nimport { CropCycle } from '../../core/models/crop-cycle.model';\nimport { CropType } from '../../core/models/crop-type.model';\n\n@Component({\n  selector: 'app-crop-roadmap',\n  templateUrl: './crop-roadmap.component.html',\n  styleUrls: ['./crop-roadmap.component.css']\n})\nexport class CropRoadmapComponent implements OnInit {\n  cropForm: FormGroup;\n  cropTypes: CropType[] = [];\n  currentCropCycle: CropCycle | null = null;\n  aiInsight: string = '';\n  showAiInsight: boolean = false;\n  loadingInsight: boolean = false;\n  \n  constructor(\n    private fb: FormBuilder,\n    private cropService: CropService,\n    private aiService: AiService\n  ) {\n    this.cropForm = this.fb.group({\n      cropType: ['', Validators.required],\n      plantDate: ['', Validators.required],\n      cycleDuration: ['12', [Validators.required, Validators.min(1), Validators.max(52)]]\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadCropTypes();\n    this.loadCurrentCropCycle();\n  }\n\n  loadCropTypes(): void {\n    this.cropService.getCropTypes().subscribe({\n      next: (types) => {\n        this.cropTypes = types;\n      },\n      error: (error) => {\n        console.error('Error loading crop types:', error);\n      }\n    });\n  }\n\n  loadCurrentCropCycle(): void {\n    this.cropService.getCurrentCropCycle().subscribe({\n      next: (cycle) => {\n        this.currentCropCycle = cycle;\n        \n        if (cycle) {\n          // Populate form with current cycle data\n          this.cropForm.patchValue({\n            cropType: cycle.cropTypeId,\n            plantDate: cycle.plantDate,\n            cycleDuration: cycle.durationWeeks\n          });\n        }\n      },\n      error: (error) => {\n        console.error('Error loading current crop cycle:', error);\n      }\n    });\n  }\n\n  calculateProgress(): number {\n    if (!this.currentCropCycle) return 0;\n    \n    const startDate = new Date(this.currentCropCycle.plantDate);\n    const today = new Date();\n    const totalDays = this.currentCropCycle.durationWeeks * 7;\n    const daysPassed = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    \n    return Math.min(Math.round((daysPassed / totalDays) * 100), 100);\n  }\n\n  getCurrentWeek(): number {\n    if (!this.currentCropCycle) return 0;\n    \n    const startDate = new Date(this.currentCropCycle.plantDate);\n    const today = new Date();\n    const daysPassed = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    \n    return Math.min(Math.ceil(daysPassed / 7), this.currentCropCycle.durationWeeks);\n  }\n\n  onSubmit(): void {\n    if (this.cropForm.invalid) return;\n    \n    const formData = this.cropForm.value;\n    const selectedCropType = this.cropTypes.find(ct => ct.id === formData.cropType);\n    \n    const cropCycle: CropCycle = {\n      id: Date.now().toString(), // Generate a temporary ID\n      cropTypeId: formData.cropType,\n      cropName: selectedCropType?.name || '',\n      startDate: new Date(),\n      plantDate: formData.plantDate,\n      currentStage: 0,\n      status: 'active',\n      completedStages: [],\n      durationWeeks: formData.cycleDuration,\n      stages: selectedCropType?.stages.map(s => ({\n        name: s.name,\n        startWeek: s.duration,\n        endWeek: s.duration,\n        description: s.description,\n        tasks: s.tasks.map(t => ({ description: t, completed: false })),\n        completed: false\n      })) || []\n    };\n    \n    this.cropService.createCropCycle(cropCycle).subscribe({\n      next: (cycle) => {\n        this.currentCropCycle = cycle;\n      },\n      error: (error) => {\n        console.error('Error creating crop cycle:', error);\n      }\n    });\n  }\n  \n  markStageComplete(stageIndex: number): void {\n    if (!this.currentCropCycle) return;\n    \n    this.cropService.completeStage(this.currentCropCycle.id, stageIndex).subscribe({\n      next: (success) => {\n        if (success && this.currentCropCycle) {\n          // Update the local state if the operation was successful\n          const updatedStages = [...this.currentCropCycle.stages];\n          updatedStages[stageIndex].completed = true;\n          this.currentCropCycle = {\n            ...this.currentCropCycle,\n            stages: updatedStages,\n            completedStages: [...this.currentCropCycle.completedStages, stageIndex]\n          };\n        }\n      },\n      error: (error) => {\n        console.error('Error completing stage:', error);\n      }\n    });\n  }\n  \n  getAIInsight(): void {\n    if (!this.currentCropCycle) return;\n    \n    this.loadingInsight = true;\n    this.aiService.getCropGrowthInsight(this.currentCropCycle.id).subscribe({\n      next: (insight) => {\n        this.aiInsight = insight;\n        this.showAiInsight = true;\n        this.loadingInsight = false;\n      },\n      error: (error) => {\n        console.error('Error getting AI insight:', error);\n        this.loadingInsight = false;\n      }\n    });\n  }\n  \n  closeAIInsight(): void {\n    this.showAiInsight = false;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}