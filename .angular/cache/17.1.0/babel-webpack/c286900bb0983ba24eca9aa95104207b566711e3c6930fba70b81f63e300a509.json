{"ast":null,"code":"import { BehaviorSubject, of, timer } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SensorService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiBaseUrl}/sensors`;\n    // BehaviorSubjects to store real-time data\n    this.sensorsSubject = new BehaviorSubject([]);\n    this.sensorHistorySubject = new BehaviorSubject([]);\n    // Public observable that components can subscribe to\n    this.sensors$ = this.sensorsSubject.asObservable();\n    this.sensorHistory$ = this.sensorHistorySubject.asObservable();\n    // Start polling for sensor data every 30 seconds\n    this.startPolling();\n  }\n  startPolling() {\n    timer(0, 30000).pipe(switchMap(() => this.fetchSensors())).subscribe();\n  }\n  fetchSensors() {\n    return this.http.get(this.apiUrl).pipe(tap(sensors => this.sensorsSubject.next(sensors)));\n  }\n  getSensorById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  getSensorHistory(id, days = 7) {\n    return this.http.get(`${this.apiUrl}/${id}/history?days=${days}`).pipe(tap(history => this.sensorHistorySubject.next(history)));\n  }\n  getSensorTypes() {\n    return this.sensors$.pipe(map(sensors => [...new Set(sensors.map(s => s.type))]));\n  }\n  // Helper methods to get specific sensor readings\n  getTemperatureSensors() {\n    return this.sensors$.pipe(map(sensors => sensors.filter(s => s.type === 'temperature')));\n  }\n  getHumiditySensors() {\n    return this.sensors$.pipe(map(sensors => sensors.filter(s => s.type === 'humidity')));\n  }\n  getLightSensors() {\n    return this.sensors$.pipe(map(sensors => sensors.filter(s => s.type === 'light')));\n  }\n  getECSensors() {\n    return this.sensors$.pipe(map(sensors => sensors.filter(s => s.type === 'ec')));\n  }\n  getPHSensors() {\n    return this.sensors$.pipe(map(sensors => sensors.filter(s => s.type === 'ph')));\n  }\n  // New method: Get the latest sensor readings\n  getLatestReadings() {\n    // Mock implementation or actual API call\n    return of([{\n      sensorId: '1',\n      sensorType: 'temperature',\n      value: 25,\n      minThreshold: 15,\n      maxThreshold: 30,\n      unit: '°C',\n      timestamp: new Date(),\n      status: 'normal'\n    }, {\n      sensorId: '2',\n      sensorType: 'humidity',\n      value: 60,\n      minThreshold: 30,\n      maxThreshold: 70,\n      unit: '%',\n      timestamp: new Date(),\n      status: 'normal'\n    }]);\n  }\n  // New method: Start irrigation\n  startIrrigation() {\n    // Mock implementation of starting irrigation\n    console.log('Irrigation started');\n    return of();\n  }\n  // Adjusted method: Export data in JSON format\n  exportData() {\n    // Mock implementation for exporting data as JSON\n    const mockJsonData = [{\n      id: '1',\n      name: 'Temperature Sensor A',\n      type: 'temperature',\n      value: 24.5,\n      unit: '°C',\n      status: 'normal',\n      location: 'Zone A'\n    }, {\n      id: '2',\n      name: 'Humidity Sensor A',\n      type: 'humidity',\n      value: 65,\n      unit: '%',\n      status: 'warning',\n      location: 'Zone A'\n    }, {\n      id: '3',\n      name: 'Light Sensor A',\n      type: 'light',\n      value: 850,\n      unit: 'lux',\n      status: 'normal',\n      location: 'Zone A'\n    }, {\n      id: '4',\n      name: 'EC Sensor B',\n      type: 'ec',\n      value: 1.8,\n      unit: 'mS/cm',\n      status: 'normal',\n      location: 'Zone B'\n    }, {\n      id: '5',\n      name: 'pH Sensor B',\n      type: 'ph',\n      value: 6.2,\n      unit: 'pH',\n      status: 'normal',\n      location: 'Zone B'\n    }];\n    return of(JSON.stringify(mockJsonData, null, 2)); // Pretty-printed JSON\n  }\n  // For simulating data in development\n  generateMockData() {\n    return [{\n      id: '1',\n      name: 'Temperature Sensor A',\n      type: 'temperature',\n      value: 24.5,\n      unit: '°C',\n      status: 'normal',\n      location: 'Zone A'\n    }, {\n      id: '2',\n      name: 'Humidity Sensor A',\n      type: 'humidity',\n      value: 65,\n      unit: '%',\n      status: 'warning',\n      location: 'Zone A'\n    }, {\n      id: '3',\n      name: 'Light Sensor A',\n      type: 'light',\n      value: 850,\n      unit: 'lux',\n      status: 'normal',\n      location: 'Zone A'\n    }, {\n      id: '4',\n      name: 'EC Sensor B',\n      type: 'ec',\n      value: 1.8,\n      unit: 'mS/cm',\n      status: 'normal',\n      location: 'Zone B'\n    }, {\n      id: '5',\n      name: 'pH Sensor B',\n      type: 'ph',\n      value: 6.2,\n      unit: 'pH',\n      status: 'normal',\n      location: 'Zone B'\n    }];\n  }\n  static {\n    this.ɵfac = function SensorService_Factory(t) {\n      return new (t || SensorService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SensorService,\n      factory: SensorService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","of","timer","map","switchMap","tap","environment","SensorService","constructor","http","apiUrl","apiBaseUrl","sensorsSubject","sensorHistorySubject","sensors$","asObservable","sensorHistory$","startPolling","pipe","fetchSensors","subscribe","get","sensors","next","getSensorById","id","getSensorHistory","days","history","getSensorTypes","Set","s","type","getTemperatureSensors","filter","getHumiditySensors","getLightSensors","getECSensors","getPHSensors","getLatestReadings","sensorId","sensorType","value","minThreshold","maxThreshold","unit","timestamp","Date","status","startIrrigation","console","log","exportData","mockJsonData","name","location","JSON","stringify","generateMockData","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/injinia/eden-link/src/app/core/services/sensor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of, timer } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { Sensor } from '../models/sensor.model';\nimport { SensorReading } from '../models/sensor.model'; // Ensure SensorReading is imported\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SensorService {\n  private apiUrl = `${environment.apiBaseUrl}/sensors`;\n\n  // BehaviorSubjects to store real-time data\n  private sensorsSubject = new BehaviorSubject<Sensor[]>([]);\n  private sensorHistorySubject = new BehaviorSubject<any[]>([]);\n\n  // Public observable that components can subscribe to\n  public sensors$ = this.sensorsSubject.asObservable();\n  public sensorHistory$ = this.sensorHistorySubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    // Start polling for sensor data every 30 seconds\n    this.startPolling();\n  }\n\n  startPolling() {\n    timer(0, 30000).pipe(\n      switchMap(() => this.fetchSensors())\n    ).subscribe();\n  }\n\n  fetchSensors(): Observable<Sensor[]> {\n    return this.http.get<Sensor[]>(this.apiUrl).pipe(\n      tap(sensors => this.sensorsSubject.next(sensors))\n    );\n  }\n\n  getSensorById(id: string): Observable<Sensor> {\n    return this.http.get<Sensor>(`${this.apiUrl}/${id}`);\n  }\n\n  getSensorHistory(id: string, days: number = 7): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/${id}/history?days=${days}`).pipe(\n      tap(history => this.sensorHistorySubject.next(history))\n    );\n  }\n\n  getSensorTypes(): Observable<string[]> {\n    return this.sensors$.pipe(\n      map(sensors => [...new Set(sensors.map(s => s.type))])\n    );\n  }\n\n  // Helper methods to get specific sensor readings\n  getTemperatureSensors(): Observable<Sensor[]> {\n    return this.sensors$.pipe(\n      map(sensors => sensors.filter(s => s.type === 'temperature'))\n    );\n  }\n\n  getHumiditySensors(): Observable<Sensor[]> {\n    return this.sensors$.pipe(\n      map(sensors => sensors.filter(s => s.type === 'humidity'))\n    );\n  }\n\n  getLightSensors(): Observable<Sensor[]> {\n    return this.sensors$.pipe(\n      map(sensors => sensors.filter(s => s.type === 'light'))\n    );\n  }\n\n  getECSensors(): Observable<Sensor[]> {\n    return this.sensors$.pipe(\n      map(sensors => sensors.filter(s => s.type === 'ec'))\n    );\n  }\n\n  getPHSensors(): Observable<Sensor[]> {\n    return this.sensors$.pipe(\n      map(sensors => sensors.filter(s => s.type === 'ph'))\n    );\n  }\n\n  // New method: Get the latest sensor readings\n  getLatestReadings(): Observable<SensorReading[]> {\n    // Mock implementation or actual API call\n    return of([\n      { sensorId: '1', sensorType: 'temperature', value: 25, minThreshold: 15, maxThreshold: 30, unit: '°C', timestamp: new Date(), status: 'normal' },\n      { sensorId: '2', sensorType: 'humidity', value: 60, minThreshold: 30, maxThreshold: 70, unit: '%', timestamp: new Date(), status: 'normal' }\n    ]);\n  }\n\n  // New method: Start irrigation\n  startIrrigation(): Observable<void> {\n    // Mock implementation of starting irrigation\n    console.log('Irrigation started');\n    return of();\n  }\n\n  // Adjusted method: Export data in JSON format\n  exportData(): Observable<string> {\n    // Mock implementation for exporting data as JSON\n    const mockJsonData = [\n      { id: '1', name: 'Temperature Sensor A', type: 'temperature', value: 24.5, unit: '°C', status: 'normal', location: 'Zone A' },\n      { id: '2', name: 'Humidity Sensor A', type: 'humidity', value: 65, unit: '%', status: 'warning', location: 'Zone A' },\n      { id: '3', name: 'Light Sensor A', type: 'light', value: 850, unit: 'lux', status: 'normal', location: 'Zone A' },\n      { id: '4', name: 'EC Sensor B', type: 'ec', value: 1.8, unit: 'mS/cm', status: 'normal', location: 'Zone B' },\n      { id: '5', name: 'pH Sensor B', type: 'ph', value: 6.2, unit: 'pH', status: 'normal', location: 'Zone B' }\n    ];\n    return of(JSON.stringify(mockJsonData, null, 2)); // Pretty-printed JSON\n  }\n\n  // For simulating data in development\n  generateMockData(): Sensor[] {\n    return [\n      { id: '1', name: 'Temperature Sensor A', type: 'temperature', value: 24.5, unit: '°C', status: 'normal', location: 'Zone A' },\n      { id: '2', name: 'Humidity Sensor A', type: 'humidity', value: 65, unit: '%', status: 'warning', location: 'Zone A' },\n      { id: '3', name: 'Light Sensor A', type: 'light', value: 850, unit: 'lux', status: 'normal', location: 'Zone A' },\n      { id: '4', name: 'EC Sensor B', type: 'ec', value: 1.8, unit: 'mS/cm', status: 'normal', location: 'Zone B' },\n      { id: '5', name: 'pH Sensor B', type: 'ph', value: 6.2, unit: 'pH', status: 'normal', location: 'Zone B' }\n    ];\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}