{"ast":null,"code":"import { BehaviorSubject, interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class GreenhouseService {\n  constructor() {\n    this.MAX_DATA_POINTS = 10;\n    this.greenhouseData = new BehaviorSubject([]);\n    // Initialize with first data point\n    this.addNewDataPoint();\n    // Update data every 5 seconds\n    interval(5000).subscribe(() => {\n      this.addNewDataPoint();\n    });\n  }\n  addNewDataPoint() {\n    const currentData = this.greenhouseData.value;\n    const newData = {\n      timestamp: new Date(),\n      temperature: this.generateTemperature(),\n      humidity: this.generateHumidity(),\n      light: this.generateLight()\n    };\n    // Add new data point and keep only the last MAX_DATA_POINTS\n    const updatedData = [...currentData, newData].slice(-this.MAX_DATA_POINTS);\n    this.greenhouseData.next(updatedData);\n  }\n  generateTemperature() {\n    // Simulate temperature between 18°C and 28°C with some variation\n    return +(20 + Math.random() * 8).toFixed(1);\n  }\n  generateHumidity() {\n    // Simulate humidity between 50% and 80%\n    return +(60 + Math.random() * 20).toFixed(1);\n  }\n  generateLight() {\n    // Simulate light levels between 0 and 1000 lux\n    const hour = new Date().getHours();\n    const baseLight = hour >= 6 && hour <= 18 ? 800 : 0; // Day/Night simulation\n    return +(baseLight + Math.random() * 200).toFixed(0);\n  }\n  getGreenhouseData() {\n    return this.greenhouseData.asObservable();\n  }\n  getCurrentData() {\n    return this.greenhouseData.pipe(map(data => data[data.length - 1] || {\n      timestamp: new Date(),\n      temperature: 0,\n      humidity: 0,\n      light: 0\n    }));\n  }\n  static {\n    this.ɵfac = function GreenhouseService_Factory(t) {\n      return new (t || GreenhouseService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GreenhouseService,\n      factory: GreenhouseService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","interval","map","GreenhouseService","constructor","MAX_DATA_POINTS","greenhouseData","addNewDataPoint","subscribe","currentData","value","newData","timestamp","Date","temperature","generateTemperature","humidity","generateHumidity","light","generateLight","updatedData","slice","next","Math","random","toFixed","hour","getHours","baseLight","getGreenhouseData","asObservable","getCurrentData","pipe","data","length","factory","ɵfac","providedIn"],"sources":["/home/injinia/eden-link/src/app/core/services/greenhouse.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, interval } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface GreenhouseData {\n  timestamp: Date;\n  temperature: number;\n  humidity: number;\n  light: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GreenhouseService {\n  private readonly MAX_DATA_POINTS = 10;\n  private greenhouseData = new BehaviorSubject<GreenhouseData[]>([]);\n\n  constructor() {\n    // Initialize with first data point\n    this.addNewDataPoint();\n\n    // Update data every 5 seconds\n    interval(5000).subscribe(() => {\n      this.addNewDataPoint();\n    });\n  }\n\n  private addNewDataPoint(): void {\n    const currentData = this.greenhouseData.value;\n    const newData: GreenhouseData = {\n      timestamp: new Date(),\n      temperature: this.generateTemperature(),\n      humidity: this.generateHumidity(),\n      light: this.generateLight()\n    };\n\n    // Add new data point and keep only the last MAX_DATA_POINTS\n    const updatedData = [...currentData, newData].slice(-this.MAX_DATA_POINTS);\n    this.greenhouseData.next(updatedData);\n  }\n\n  private generateTemperature(): number {\n    // Simulate temperature between 18°C and 28°C with some variation\n    return +(20 + Math.random() * 8).toFixed(1);\n  }\n\n  private generateHumidity(): number {\n    // Simulate humidity between 50% and 80%\n    return +(60 + Math.random() * 20).toFixed(1);\n  }\n\n  private generateLight(): number {\n    // Simulate light levels between 0 and 1000 lux\n    const hour = new Date().getHours();\n    const baseLight = hour >= 6 && hour <= 18 ? 800 : 0; // Day/Night simulation\n    return +(baseLight + Math.random() * 200).toFixed(0);\n  }\n\n  getGreenhouseData(): Observable<GreenhouseData[]> {\n    return this.greenhouseData.asObservable();\n  }\n\n  getCurrentData(): Observable<GreenhouseData> {\n    return this.greenhouseData.pipe(\n      map(data => data[data.length - 1] || {\n        timestamp: new Date(),\n        temperature: 0,\n        humidity: 0,\n        light: 0\n      })\n    );\n  }\n} "],"mappings":"AACA,SAASA,eAAe,EAAcC,QAAQ,QAAQ,MAAM;AAC5D,SAASC,GAAG,QAAQ,gBAAgB;;AAYpC,OAAM,MAAOC,iBAAiB;EAI5BC,YAAA;IAHiB,KAAAC,eAAe,GAAG,EAAE;IAC7B,KAAAC,cAAc,GAAG,IAAIN,eAAe,CAAmB,EAAE,CAAC;IAGhE;IACA,IAAI,CAACO,eAAe,EAAE;IAEtB;IACAN,QAAQ,CAAC,IAAI,CAAC,CAACO,SAAS,CAAC,MAAK;MAC5B,IAAI,CAACD,eAAe,EAAE;IACxB,CAAC,CAAC;EACJ;EAEQA,eAAeA,CAAA;IACrB,MAAME,WAAW,GAAG,IAAI,CAACH,cAAc,CAACI,KAAK;IAC7C,MAAMC,OAAO,GAAmB;MAC9BC,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,WAAW,EAAE,IAAI,CAACC,mBAAmB,EAAE;MACvCC,QAAQ,EAAE,IAAI,CAACC,gBAAgB,EAAE;MACjCC,KAAK,EAAE,IAAI,CAACC,aAAa;KAC1B;IAED;IACA,MAAMC,WAAW,GAAG,CAAC,GAAGX,WAAW,EAAEE,OAAO,CAAC,CAACU,KAAK,CAAC,CAAC,IAAI,CAAChB,eAAe,CAAC;IAC1E,IAAI,CAACC,cAAc,CAACgB,IAAI,CAACF,WAAW,CAAC;EACvC;EAEQL,mBAAmBA,CAAA;IACzB;IACA,OAAO,CAAC,CAAC,EAAE,GAAGQ,IAAI,CAACC,MAAM,EAAE,GAAG,CAAC,EAAEC,OAAO,CAAC,CAAC,CAAC;EAC7C;EAEQR,gBAAgBA,CAAA;IACtB;IACA,OAAO,CAAC,CAAC,EAAE,GAAGM,IAAI,CAACC,MAAM,EAAE,GAAG,EAAE,EAAEC,OAAO,CAAC,CAAC,CAAC;EAC9C;EAEQN,aAAaA,CAAA;IACnB;IACA,MAAMO,IAAI,GAAG,IAAIb,IAAI,EAAE,CAACc,QAAQ,EAAE;IAClC,MAAMC,SAAS,GAAGF,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;IACrD,OAAO,CAAC,CAACE,SAAS,GAAGL,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC;EACtD;EAEAI,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACvB,cAAc,CAACwB,YAAY,EAAE;EAC3C;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACzB,cAAc,CAAC0B,IAAI,CAC7B9B,GAAG,CAAC+B,IAAI,IAAIA,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC,IAAI;MACnCtB,SAAS,EAAE,IAAIC,IAAI,EAAE;MACrBC,WAAW,EAAE,CAAC;MACdE,QAAQ,EAAE,CAAC;MACXE,KAAK,EAAE;KACR,CAAC,CACH;EACH;;;uBA1DWf,iBAAiB;IAAA;EAAA;;;aAAjBA,iBAAiB;MAAAgC,OAAA,EAAjBhC,iBAAiB,CAAAiC,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}