{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AiChatbotComponent = class AiChatbotComponent {\n  constructor(aiService) {\n    this.aiService = aiService;\n    this.isChatOpen = false;\n    this.messages = [];\n    this.newMessage = '';\n  }\n  ngOnInit() {\n    // Initial welcome message\n    this.messages.push({\n      text: 'Hello! I\\'m your Eden Link AI assistant. How can I help you today?',\n      fromUser: false,\n      timestamp: new Date()\n    });\n  }\n  toggleChat() {\n    this.isChatOpen = !this.isChatOpen;\n  }\n  sendMessage() {\n    if (!this.newMessage.trim()) return;\n    // Add user message\n    this.messages.push({\n      text: this.newMessage,\n      fromUser: true,\n      timestamp: new Date()\n    });\n    // Store and clear message input\n    const userQuery = this.newMessage;\n    this.newMessage = '';\n    // Get AI response\n    this.aiService.getResponse(userQuery).subscribe(response => {\n      this.messages.push({\n        text: response,\n        fromUser: false,\n        timestamp: new Date()\n      });\n    }, error => {\n      console.error('Error getting AI response:', error);\n      // Fallback response\n      this.messages.push({\n        text: 'I\\'m having trouble connecting right now. Please try again later.',\n        fromUser: false,\n        timestamp: new Date()\n      });\n    });\n  }\n};\nAiChatbotComponent = __decorate([Component({\n  selector: 'app-ai-chatbot',\n  templateUrl: './ai-chatbot.component.html',\n  styleUrls: ['./ai-chatbot.component.css']\n})], AiChatbotComponent);\nexport { AiChatbotComponent };","map":{"version":3,"names":["Component","AiChatbotComponent","constructor","aiService","isChatOpen","messages","newMessage","ngOnInit","push","text","fromUser","timestamp","Date","toggleChat","sendMessage","trim","userQuery","getResponse","subscribe","response","error","console","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/injinia/eden-link/src/app/shared/components/ai-chatbot/ai-chatbot.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AiService } from '../../../core/services/ai.service';\n\n@Component({\n  selector: 'app-ai-chatbot',\n  templateUrl: './ai-chatbot.component.html',\n  styleUrls: ['./ai-chatbot.component.css']\n})\nexport class AiChatbotComponent implements OnInit {\n  isChatOpen = false;\n  messages: { text: string, fromUser: boolean, timestamp: Date }[] = [];\n  newMessage = '';\n  \n  constructor(private aiService: AiService) { }\n\n  ngOnInit(): void {\n    // Initial welcome message\n    this.messages.push({\n      text: 'Hello! I\\'m your Eden Link AI assistant. How can I help you today?',\n      fromUser: false,\n      timestamp: new Date()\n    });\n  }\n  \n  toggleChat(): void {\n    this.isChatOpen = !this.isChatOpen;\n  }\n  \n  sendMessage(): void {\n    if (!this.newMessage.trim()) return;\n    \n    // Add user message\n    this.messages.push({\n      text: this.newMessage,\n      fromUser: true,\n      timestamp: new Date()\n    });\n    \n    // Store and clear message input\n    const userQuery = this.newMessage;\n    this.newMessage = '';\n    \n    // Get AI response\n    this.aiService.getResponse(userQuery).subscribe(\n      (response) => {\n        this.messages.push({\n          text: response,\n          fromUser: false,\n          timestamp: new Date()\n        });\n      },\n      (error) => {\n        console.error('Error getting AI response:', error);\n        // Fallback response\n        this.messages.push({\n          text: 'I\\'m having trouble connecting right now. Please try again later.',\n          fromUser: false,\n          timestamp: new Date()\n        });\n      }\n    );\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAK7BC,YAAoBC,SAAoB;IAApB,KAAAA,SAAS,GAATA,SAAS;IAJ7B,KAAAC,UAAU,GAAG,KAAK;IAClB,KAAAC,QAAQ,GAA2D,EAAE;IACrE,KAAAC,UAAU,GAAG,EAAE;EAE6B;EAE5CC,QAAQA,CAAA;IACN;IACA,IAAI,CAACF,QAAQ,CAACG,IAAI,CAAC;MACjBC,IAAI,EAAE,oEAAoE;MAC1EC,QAAQ,EAAE,KAAK;MACfC,SAAS,EAAE,IAAIC,IAAI;KACpB,CAAC;EACJ;EAEAC,UAAUA,CAAA;IACR,IAAI,CAACT,UAAU,GAAG,CAAC,IAAI,CAACA,UAAU;EACpC;EAEAU,WAAWA,CAAA;IACT,IAAI,CAAC,IAAI,CAACR,UAAU,CAACS,IAAI,EAAE,EAAE;IAE7B;IACA,IAAI,CAACV,QAAQ,CAACG,IAAI,CAAC;MACjBC,IAAI,EAAE,IAAI,CAACH,UAAU;MACrBI,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAE,IAAIC,IAAI;KACpB,CAAC;IAEF;IACA,MAAMI,SAAS,GAAG,IAAI,CAACV,UAAU;IACjC,IAAI,CAACA,UAAU,GAAG,EAAE;IAEpB;IACA,IAAI,CAACH,SAAS,CAACc,WAAW,CAACD,SAAS,CAAC,CAACE,SAAS,CAC5CC,QAAQ,IAAI;MACX,IAAI,CAACd,QAAQ,CAACG,IAAI,CAAC;QACjBC,IAAI,EAAEU,QAAQ;QACdT,QAAQ,EAAE,KAAK;QACfC,SAAS,EAAE,IAAIC,IAAI;OACpB,CAAC;IACJ,CAAC,EACAQ,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD;MACA,IAAI,CAACf,QAAQ,CAACG,IAAI,CAAC;QACjBC,IAAI,EAAE,mEAAmE;QACzEC,QAAQ,EAAE,KAAK;QACfC,SAAS,EAAE,IAAIC,IAAI;OACpB,CAAC;IACJ,CAAC,CACF;EACH;CACD;AAtDYX,kBAAkB,GAAAqB,UAAA,EAL9BtB,SAAS,CAAC;EACTuB,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,C,EACWxB,kBAAkB,CAsD9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}